{"version":3,"sources":["node_modules/@angular/cdk/esm2015/bidi.js","node_modules/@angular/cdk/esm2015/coercion.js","node_modules/@angular/cdk/esm2015/collections.js","node_modules/@angular/cdk/esm2015/drag-drop.js","node_modules/@angular/cdk/esm2015/platform.js","node_modules/@angular/cdk/esm2015/scrolling.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gBAAA,EAAA,YAAA;MAAA,OAAA,cAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,cAAA,EAAA,YAAA;MAAA,OAAA,YAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,KAAA,EAAA,YAAA;MAAA,OAAA,GAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,YAAA,EAAA,YAAA;MAAA,OAAA,UAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,IAAA,EAAA,YAAA;MAAA,OAAA,oBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,IAAA,4CAAA,GAAA,mBAAA,EAAA,sBAAA,mDAAA,CAAA;IAAA;IAAA,IAAA,0CAAA,GAAA,mBAAA,EAAA,oBAAA,+CAAA,CAAA;IAAA;AACA;AACA;AACA;AACA;AACA;AACA;;IAIA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,IAAA,YAAA,GAAA,IAAyB,0CAAA,CAAA,gBAAA,CAAc,CAAA,aAAA,EAAA;MACvC,UAAA,EAAA,MAAA;MACA,OAAA,EAAA;IACA,CAAC,CAAA;IACD;AACA;AACA;AACA;IACA,SAAA,oBAAA,CAAA,EAAA;MACA,OAAW,MAAA,CAAA,0CAAA,CAAA,QAAA,CAAA,CAAM,CAAC,4CAAA,CAAA,UAAA,CAAQ,CAAA;IAC1B;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IAHA,IAIA,cAAA;MACA;AACA;AACA;MACA,SAAA,eAAA,SAAA,EAAA;QAAA,eAAA,OAAA,cAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,KAAA,GAAA,KAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,MAAA,GAAA,IAA0B,0CAAA,CAAA,cAAA,CAAY,EAAA;QACtC,IAAA,SAAA,EAAA;UACA;UACA;UACA;UACA;UACA;UACA,IAAA,OAAA,GAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA,CAAA,GAAA,GAAA,IAAA;UACA;UACA,IAAA,OAAA,GAAA,SAAA,CAAA,eAAA,GAAA,SAAA,CAAA,eAAA,CAAA,GAAA,GAAA,IAAA;UACA;UACA,IAAA,KAAA,GAAA,OAAA,IAAA,OAAA;UACA,IAAA,CAAA,KAAA,GAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,GAAA,KAAA,GAAA,KAAA;QACA;MACA;MACA;AACA;AACA;MAFA,YAAA,CAAA,cAAA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,MAAA,CAAA,QAAA,EAAA;QACA;MAAA;MAAA,OAAA,cAAA;IAAA;IAEA,cAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,YAAA,CAAU;MAAA,IAAA,EAAA,CAAA;QAAU,UAAA,EAAA;MAAA,CAAqB;IAAA,CAAI,CACzD;IACA;IACA,cAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAA,SAAA;QAAA,UAAA,EAAA,CAAA;UAAgC,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE,EAAA;UAAG,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;UAAA,IAAA,EAAA,CAAA,YAAA;QAAA,CAAyB;MAAA,CAAA,CAC/F;IAAA;IACA;IAAA,cAAA,CAAA,eAAA,GAAoD,MAAA,CAAA,0CAAA,CAAA,oBAAA,CAAA,CAAkB,CAAA;MAAE,OAAA,EAAA,SAAA,sBAAA,CAAA,EAAA;QAA6C,OAAA,IAAA,cAAA,CAA2B,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAA,YAAA,EAAA,CAAA,CAAA,CAAA;MAAmB,CAAE;MAAA,KAAA,EAAA,cAAA;MAAA,UAAA,EAAA;IAAA,CAA6C,CAAA;;IAE1N;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;AACA;IALA,IAMA,GAAA;MACA,SAAA,IAAA,EAAA;QAAA,eAAA,OAAA,GAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,IAAA,GAAA,KAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,cAAA,GAAA,KAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,MAAA,GAAA,IAA0B,0CAAA,CAAA,cAAA,CAAY,EAAA;MACtC;MACA;AACA;AACA;AACA;MAHA,YAAA,CAAA,GAAA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UAAe,OAAA,IAAA,CAAA,IAAA;QAAkB;QACjC;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,KAAA,EAAA;UACA;UACA,IAAA,GAAA,GAAA,IAAA,CAAA,IAAA;UACA;UACA,IAAA,eAAA,GAAA,KAAA,GAAA,KAAA,CAAA,WAAA,EAAA,GAAA,KAAA;UACA,IAAA,CAAA,OAAA,GAAA,KAAA;UACA,IAAA,CAAA,IAAA,GAAA,eAAA,KAAA,KAAA,IAAA,eAAA,KAAA,KAAA,GAAA,eAAA,GAAA,KAAA;UACA,IAAA,GAAA,KAAA,IAAA,CAAA,IAAA,IAAA,IAAA,CAAA,cAAA,EAAA;YACA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA;UACA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UAAiB,OAAA,IAAA,CAAA,GAAA;QAAiB;QAClC;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,mBAAA,EAAA;UACA,IAAA,CAAA,cAAA,GAAA,IAAA;QACA;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,MAAA,CAAA,QAAA,EAAA;QACA;MAAA;MAAA,OAAA,GAAA;IAAA;IAEA,GAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;MAAA,IAAA,EAAA,CAAA;QACrB,QAAA,EAAA,OAAA;QACA,SAAA,EAAA,CAAA;UAA6B,OAAA,EAAA,cAAA;UAAA,WAAA,EAAA;QAAA,CAA4C,CAAA;QACzE,IAAA,EAAA;UAAuB,YAAA,EAAA;QAAA,CAA0B;QACjD,QAAA,EAAA;MACA,CAAa;IAAA,CAAI,CACjB;IACA,GAAA,CAAA,cAAA,GAAA;MACA,MAAA,EAAA,CAAA;QAAc,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,WAAA;MAAA,CAAwB,CAAA;MACnD,GAAA,EAAA,CAAA;QAAW,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE;IACzB,CAAA;;IAEA;AACA;AACA;AACA;IAHA,IAIA,UAAA,gBAAA,YAAA,UAAA,WAAA;MAAA,eAAA,OAAA,UAAA;IAAA;IAEA,UAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,UAAA,CAAQ;MAAA,IAAA,EAAA,CAAA;QACpB,OAAA,EAAA,CAAA,GAAA,CAAA;QACA,YAAA,EAAA,CAAA,GAAA;MACA,CAAa;IAAA,CAAI,CACjB;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;;IAGA;;;;;;;;;;;;;;IClMA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,uBAAA,EAAA,YAAA;MAAA,OAAA,qBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,sBAAA,EAAA,YAAA;MAAA,OAAA,oBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gBAAA,EAAA,YAAA;MAAA,OAAA,cAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,aAAA,EAAA,YAAA;MAAA,OAAA,WAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,qBAAA,EAAA,YAAA;MAAA,OAAA,mBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,YAAA;MAAA,OAAA,aAAA;IAAA,CAAA,CAAA;IAAA;IAAA,IAAA,0CAAA,GAAA,mBAAA,EAAA,oBAAA,+CAAA,CAAA;IAAA;AACA;AACA;AACA;AACA;AACA;AACA;;IAGA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;AACA;IACA,SAAA,qBAAA,CAAA,KAAA,EAAA;MACA,OAAA,KAAA,IAAA,IAAA,IAAA,GAAA,MAAA,CAA+B,KAAA,MAAM,OAAA;IACrC;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;AACA;IACA,SAAA,oBAAA,CAAA,KAAA,EAAA;MAAA,IAAA,aAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAA,CAAA;MACA,OAAA,cAAA,CAAA,KAAA,CAAA,GAAA,MAAA,CAAA,KAAA,CAAA,GAAA,aAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,cAAA,CAAA,KAAA,EAAA;MACA;MACA;MACA;MACA,OAAA,CAAA,KAAA,CAAA,UAAA,EAAA,gBAA2C,KAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA;IAC3C;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,WAAA,CAAA,KAAA,EAAA;MACA,OAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,KAAA,GAAA,CAAA,KAAA,CAAA;IACA;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;AACA;IACA,SAAA,mBAAA,CAAA,KAAA,EAAA;MACA,IAAA,KAAA,IAAA,IAAA,EAAA;QACA,OAAA,EAAA;MACA;MACA,OAAA,OAAA,KAAA,KAAA,QAAA,GAAA,KAAA,MAAA,MAAA,CAAkD,KAAA,OAAM;IACxD;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,aAAA,CAAA,YAAA,EAAA;MACA,OAAA,YAAA,YAAmC,0CAAA,CAAA,YAAA,CAAU,GAAA,YAAA,CAAA,aAAA,GAAA,YAAA;IAC7C;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;;IAGA;;;;;;;;;;;;;;IC3GA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,2BAAA,EAAA,YAAA;MAAA,OAAA,yBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,iBAAA,EAAA,YAAA;MAAA,OAAA,eAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,cAAA,EAAA,YAAA;MAAA,OAAA,YAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,YAAA,EAAA,YAAA;MAAA,OAAA,UAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,yCAAA,EAAA,YAAA;MAAA,OAAA,uCAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gBAAA,EAAA,YAAA;MAAA,OAAA,cAAA;IAAA,CAAA,CAAA;IAAA;IAAA,IAAA,iCAAA,GAAA,mBAAA,EAAA,WAAA,uCAAA,CAAA;IAAA;IAAA,IAAA,0CAAA,GAAA,mBAAA,EAAA,oBAAA,+CAAA,CAAA;IAAA;AACA;AACA;AACA;AACA;AACA;AACA;;IAIA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;IAHA,IAIA,UAAA,gBAAA,YAAA,UAAA,WAAA;MAAA,eAAA,OAAA,UAAA;IAAA;IAEA;AACA;AACA;AACA;AACA;IACA,SAAA,YAAA,CAAA,KAAA,EAAA;MACA;MACA;MACA;MACA,OAAA,KAAA,IAAA,OAAA,KAAA,CAAA,OAAA,KAAA,UAAA;IACA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IAHA,IAIA,eAAA,0BAAA,WAAA;MAAA,SAAA,CAAA,eAAA,EAAA,WAAA;MAAA,IAAA,MAAA,GAAA,YAAA,CAAA,eAAA;MACA;AACA;AACA;MACA,SAAA,gBAAA,KAAA,EAAA;QAAA,IAAA,KAAA;QAAA,eAAA,OAAA,eAAA;QACA,KAAA,GAAA,MAAA,CAAA,IAAA;QACA,KAAA,CAAA,KAAA,GAAA,KAAA;QAAA,OAAA,KAAA;MACA;MACA;AACA;AACA;MAFA,YAAA,CAAA,eAAA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,QAAA,EAAA;UACA,OAAA,IAAA,CAAA,KAAA,YAAqC,iCAAA,CAAA,YAAA,CAAU,GAAA,IAAA,CAAA,KAAA,GAAgB,MAAA,CAAA,iCAAA,CAAA,IAAA,CAAA,CAAE,CAAA,IAAA,CAAA,KAAA,CAAA;QACjE;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,WAAA,EAAA,CAAkB;MAAA;MAAA,OAAA,eAAA;IAAA,EAjBlB,UAAA;IAoBA;AACA;AACA;AACA;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IAHA,IAIA,cAAA;MACA;AACA;AACA;AACA;AACA;MACA,SAAA,eAAA,EAAA;QAAA,IAAA,MAAA;QAAA,IAAA,SAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAA,KAAA;QAAA,IAAA,uBAAA,GAAA,SAAA,CAAA,MAAA,OAAA,SAAA,MAAA,SAAA;QAAA,IAAA,YAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAA,IAAA;QAAA,eAAA,OAAA,cAAA;QACA,IAAA,CAAA,SAAA,GAAA,SAAA;QACA,IAAA,CAAA,YAAA,GAAA,YAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,UAAA,GAAA,IAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,iBAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,eAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAA2B,iCAAA,CAAA,SAAA,CAAO,EAAA;QAClC;AACA;AACA;AACA;AACA;QACA,IAAA,CAAA,QAAA,GAAA,IAAA,CAAA,OAAA;QACA,IAAA,uBAAA,IAAA,uBAAA,CAAA,MAAA,EAAA;UACA,IAAA,SAAA,EAAA;YACA,uBAAA,CAAA,OAAA;YAAA;AACA;AACA;AACA;YACA,UAAA,KAAA;cAAA,OAAA,MAAA,CAAA,aAAA,CAAA,KAAA,CAAA;YAAA,EAAA;UACA,CAAA,MACA;YACA,IAAA,CAAA,aAAA,CAAA,uBAAA,CAAA,CAAA,CAAA,CAAA;UACA;UACA;UACA,IAAA,CAAA,eAAA,CAAA,MAAA,GAAA,CAAA;QACA;MACA;MACA;AACA;AACA;AACA;MAHA,YAAA,CAAA,cAAA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA,SAAA,EAAA;YACA,IAAA,CAAA,SAAA,GAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,UAAA,CAAA,MAAA,EAAA,CAAA;UACA;UACA,OAAA,IAAA,CAAA,SAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,OAAA,EAAA;UAAA,IAAA,MAAA;UAAA,SAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAA,MAAA,OAAA,KAAA,CAAA,IAAA,GAAA,IAAA,MAAA,IAAA,GAAA,IAAA,EAAA,IAAA;YAAA,MAAA,CAAA,IAAA,IAAA,SAAA,CAAA,IAAA;UAAA;UACA,IAAA,CAAA,sBAAA,CAAA,MAAA,CAAA;UACA,MAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA;YAAA,OAAA,MAAA,CAAA,aAAA,CAAA,KAAA,CAAA;UAAA,EAAA;UACA,IAAA,CAAA,gBAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,SAAA,EAAA;UAAA,IAAA,MAAA;UAAA,SAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAAA,MAAA,OAAA,KAAA,CAAA,KAAA,GAAA,KAAA,MAAA,KAAA,GAAA,KAAA,EAAA,KAAA;YAAA,MAAA,CAAA,KAAA,IAAA,SAAA,CAAA,KAAA;UAAA;UACA,IAAA,CAAA,sBAAA,CAAA,MAAA,CAAA;UACA,MAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA;YAAA,OAAA,MAAA,CAAA,eAAA,CAAA,KAAA,CAAA;UAAA,EAAA;UACA,IAAA,CAAA,gBAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,OAAA,KAAA,EAAA;UACA,IAAA,CAAA,UAAA,CAAA,KAAA,CAAA,GAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA,GAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,MAAA,EAAA;UACA,IAAA,CAAA,UAAA,EAAA;UACA,IAAA,CAAA,gBAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,WAAA,KAAA,EAAA;UACA,OAAA,IAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,QAAA,EAAA;UACA,OAAA,IAAA,CAAA,UAAA,CAAA,IAAA,KAAA,CAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,SAAA,EAAA;UACA,OAAA,CAAA,IAAA,CAAA,OAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,KAAA,SAAA,EAAA;UACA,IAAA,IAAA,CAAA,SAAA,IAAA,IAAA,CAAA,QAAA,EAAA;YACA,gBAA0B,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA;UAC1B;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,oBAAA,EAAA;UACA,OAAA,IAAA,CAAA,SAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,iBAAA,EAAA;UACA;UACA,IAAA,CAAA,SAAA,GAAA,IAAA;UACA,IAAA,IAAA,CAAA,eAAA,CAAA,MAAA,IAAA,IAAA,CAAA,iBAAA,CAAA,MAAA,EAAA;YACA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA;cACA,MAAA,EAAA,IAAA;cACA,KAAA,EAAA,IAAA,CAAA,eAAA;cACA,OAAA,EAAA,IAAA,CAAA;YACA,CAAa,CAAA;YACb,IAAA,CAAA,iBAAA,GAAA,EAAA;YACA,IAAA,CAAA,eAAA,GAAA,EAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,cAAA,KAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA,UAAA,CAAA,KAAA,CAAA,EAAA;YACA,IAAA,CAAA,IAAA,CAAA,SAAA,EAAA;cACA,IAAA,CAAA,UAAA,EAAA;YACA;YACA,IAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA;YACA,IAAA,IAAA,CAAA,YAAA,EAAA;cACA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,KAAA,CAAA;YACA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,gBAAA,KAAA,EAAA;UACA,IAAA,IAAA,CAAA,UAAA,CAAA,KAAA,CAAA,EAAA;YACA,IAAA,CAAA,UAAA,UAAA,CAAA,KAAA,CAAA;YACA,IAAA,IAAA,CAAA,YAAA,EAAA;cACA,IAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,KAAA,CAAA;YACA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,WAAA,EAAA;UAAA,IAAA,MAAA;UACA,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA,EAAA;YACA,IAAA,CAAA,UAAA,CAAA,OAAA;YAAA;AACA;AACA;AACA;YACA,UAAA,KAAA;cAAA,OAAA,MAAA,CAAA,eAAA,CAAA,KAAA,CAAA;YAAA,EAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,uBAAA,MAAA,EAAA;UACA,IAAA,MAAA,CAAA,MAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,SAAA,EAAA;YACA,MAAA,uCAAA,EAAA;UACA;QACA;MAAA;MAAA,OAAA,cAAA;IAAA;IAEA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,uCAAA,CAAA,EAAA;MACA,OAAA,KAAA,CAAA,yEAAA,CAAA;IACA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IARA,IASA,yBAAA;MACA,SAAA,0BAAA,EAAA;QAAA,eAAA,OAAA,yBAAA;QACA,IAAA,CAAA,UAAA,GAAA,EAAA;MACA;MACA;AACA;AACA;AACA;AACA;AACA;MALA,YAAA,CAAA,yBAAA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,OAAA,EAAA,EAAA,IAAA,EAAA;UAAA,IAAA,SAAA,GAAA,0BAAA,CACA,IAAA,CAAA,UAAA;YAAA,KAAA;UAAA;YAAA,KAAA,SAAA,CAAA,CAAA,MAAA,KAAA,GAAA,SAAA,CAAA,CAAA,IAAA,IAAA,GAAA;cAAA,IAAA,QAAA,GAAA,KAAA,CAAA,KAAA;cACA,QAAA,CAAA,EAAA,EAAA,IAAA,CAAA;YACA;UAAA,SAAA,GAAA;YAAA,SAAA,CAAA,CAAA,CAAA,GAAA;UAAA;YAAA,SAAA,CAAA,CAAA;UAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,OAAA,QAAA,EAAA;UAAA,IAAA,MAAA;UACA,IAAA,CAAA,UAAA,CAAA,IAAA,CAAA,QAAA,CAAA;UACA;YAAA;AACA;AACA;YACA,YAAA;cACA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,UAAA,CAAA,MAAA;cAAA;AACA;AACA;AACA;cACA,UAAA,UAAA,EAAA;gBACA,OAAA,QAAA,KAAA,UAAA;cACA,CAAa,CAAA;YACb;UAAS;QACT;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,UAAA,GAAA,EAAA;QACA;MAAA;MAAA,OAAA,yBAAA;IAAA;IAEA,yBAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,YAAA,CAAU;MAAA,IAAA,EAAA,CAAA;QAAU,UAAA,EAAA;MAAA,CAAqB;IAAA,CAAI,CACzD;IACA;IAAA,yBAAA,CAAA,eAAA,GAA+D,MAAA,CAAA,0CAAA,CAAA,oBAAA,CAAA,CAAkB,CAAA;MAAE,OAAA,EAAA,SAAA,iCAAA,CAAA,EAAA;QAAwD,OAAA,IAAA,yBAAA,EAAA;MAAwC,CAAE;MAAA,KAAA,EAAA,yBAAA;MAAA,UAAA,EAAA;IAAA,CAAwD,CAAA;;IAE7O;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;;IAGA;;;;;;;;;;;;;;ICvXA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,UAAA,EAAA,YAAA;MAAA,OAAA,QAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,SAAA,EAAA,YAAA;MAAA,OAAA,OAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,aAAA,EAAA,YAAA;MAAA,OAAA,WAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,aAAA,EAAA,YAAA;MAAA,OAAA,WAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,YAAA;MAAA,OAAA,aAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,yBAAA,EAAA,YAAA;MAAA,OAAA,uBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,iBAAA,EAAA,YAAA;MAAA,OAAA,eAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,mBAAA,EAAA,YAAA;MAAA,OAAA,iBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,YAAA;MAAA,OAAA,aAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gBAAA,EAAA,YAAA;MAAA,OAAA,cAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,kBAAA,EAAA,YAAA;MAAA,OAAA,gBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,kBAAA,EAAA,YAAA;MAAA,OAAA,gBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,yBAAA,EAAA,YAAA;MAAA,OAAA,uBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,iBAAA,EAAA,YAAA;MAAA,OAAA,eAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,SAAA,EAAA,YAAA;MAAA,OAAA,OAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,YAAA;MAAA,OAAA,aAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gBAAA,EAAA,YAAA;MAAA,OAAA,cAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,oBAAA,EAAA,YAAA;MAAA,OAAA,kBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,IAAA,EAAA,YAAA;MAAA,OAAA,eAAA;IAAA,CAAA,CAAA;IAAA;IAAA,IAAA,kDAAA,GAAA,mBAAA,EAAA,4BAAA,iDAAA,CAAA;IAAA;IAAA,IAAA,kDAAA,GAAA,mBAAA,EAAA,4BAAA,iDAAA,CAAA;IAAA;IAAA,IAAA,iCAAA,GAAA,mBAAA,EAAA,WAAA,uCAAA,CAAA;IAAA;IAAA,IAAA,2CAAA,GAAA,mBAAA,EAAA,qBAAA,iDAAA,CAAA;IAAA;IAAA,IAAA,0CAAA,GAAA,mBAAA,EAAA,oBAAA,+CAAA,CAAA;IAAA;IAAA,IAAA,4CAAA,GAAA,mBAAA,EAAA,sBAAA,mDAAA,CAAA;IAAA;IAAA,IAAA,mDAAA,GAAA,mBAAA,EAAA,6BAAA,kDAAA,CAAA;IAAA;IAAA,IAAA,8CAAA,GAAA,mBAAA,EAAA,wBAAA,6CAAA,CAAA;IAAA;AACA;AACA;AACA;AACA;AACA;AACA;;IAUA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,YAAA,CAAA,IAAA,EAAA,MAAA,EAAA;MACA,KAAA,IAAA,GAAA,IAAA,MAAA,EAAA;QACA,IAAA,MAAA,CAAA,cAAA,CAAA,GAAA,CAAA,EAAA;UACA,IAAA,CAAA,GAAA,CAAA,GAAA,gBAAsC,MAAA,CAAA,GAAA,CAAA;QACtC;MACA;MACA,OAAA,IAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,4BAAA,CAAA,OAAA,EAAA,MAAA,EAAA;MACA;MACA,IAAA,UAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA;MACA,YAAA,CAAA,OAAA,CAAA,KAAA,EAAA;QACA,WAAA,EAAA,MAAA,GAAA,EAAA,GAAA,MAAA;QACA,cAAA,EAAA,MAAA,GAAA,EAAA,GAAA,MAAA;QACA,uBAAA,EAAA,MAAA,GAAA,EAAA,GAAA,aAAA;QACA,UAAA,EAAA,UAAA;QACA,YAAA,EAAA,UAAA;QACA,gBAAA,EAAA,UAAA;QACA,aAAA,EAAA;MACA,CAAK,CAAA;IACL;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;AACA;IACA,SAAA,qBAAA,CAAA,KAAA,EAAA;MACA;MACA;MACA,IAAA,UAAA,GAAA,KAAA,CAAA,WAAA,EAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,GAAA,IAAA;MACA,OAAA,UAAA,CAAA,KAAA,CAAA,GAAA,UAAA;IACA;IACA;AACA;AACA;AACA;AACA;IACA,SAAA,kCAAA,CAAA,OAAA,EAAA;MACA;MACA,IAAA,aAAA,GAAA,gBAAA,CAAA,OAAA,CAAA;MACA;MACA,IAAA,sBAAA,GAAA,qBAAA,CAAA,aAAA,EAAA,qBAAA,CAAA;MACA;MACA,IAAA,QAAA,GAAA,sBAAA,CAAA,IAAA;MAAA;AACA;AACA;AACA;MACA,UAAA,IAAA;QAAA,OAAA,IAAA,KAAA,WAAA,IAAA,IAAA,KAAA,KAAA;MAAA,EAAA;MACA;MACA,IAAA,CAAA,QAAA,EAAA;QACA,OAAA,CAAA;MACA;MACA;MACA;MACA;MACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA;MACA;MACA,IAAA,YAAA,GAAA,qBAAA,CAAA,aAAA,EAAA,qBAAA,CAAA;MACA;MACA,IAAA,SAAA,GAAA,qBAAA,CAAA,aAAA,EAAA,kBAAA,CAAA;MACA,OAAA,qBAAA,CAAA,YAAA,CAAA,aAAA,CAAA,CAAA,GACA,qBAAA,CAAA,SAAA,CAAA,aAAA,CAAA,CAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,qBAAA,CAAA,aAAA,EAAA,IAAA,EAAA;MACA;MACA,IAAA,KAAA,GAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CAAA;MACA,OAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA;MAAA;AACA;AACA;AACA;MACA,UAAA,IAAA;QAAA,OAAA,IAAA,CAAA,IAAA,EAAA;MAAA,EAAA;IACA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IACA,IAAA,2BAAA,GAAoC,MAAA,CAAA,kDAAA,CAAA,iCAAA,CAAA,CAA+B,CAAA;MAAE,OAAA,EAAA;IAAA,CAAgB,CAAA;IACrF;AACA;AACA;AACA;IACA,IAAA,0BAAA,GAAmC,MAAA,CAAA,kDAAA,CAAA,iCAAA,CAAA,CAA+B,CAAA;MAAE,OAAA,EAAA;IAAA,CAAiB,CAAA;IACrF;AACA;AACA;AACA;AACA;AACA;AACA;IACA,IAAA,uBAAA,GAAA,GAAA;IACA;AACA;AACA;AACA;AACA;IAJA,IAKA,OAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA,SAAA,QAAA,OAAA,EAAA,OAAA,EAAA,SAAA,EAAA,OAAA,EAAA,cAAA,EAAA,iBAAA,EAAA;QAAA,IAAA,MAAA;QAAA,eAAA,OAAA,OAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA;QACA,IAAA,CAAA,SAAA,GAAA,SAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA;QACA,IAAA,CAAA,cAAA,GAAA,cAAA;QACA,IAAA,CAAA,iBAAA,GAAA,iBAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACA,IAAA,CAAA,iBAAA,GAAA;UAAkC,CAAA,EAAA,CAAA;UAAA,CAAA,EAAA;QAAA,CAAA;QAClC;AACA;AACA;QACA,IAAA,CAAA,gBAAA,GAAA;UAAiC,CAAA,EAAA,CAAA;UAAA,CAAA,EAAA;QAAA,CAAA;QACjC;AACA;AACA;QACA,IAAA,CAAA,WAAA,GAAA,IAA+B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACtC;AACA;AACA;QACA,IAAA,CAAA,wBAAA,GAAwC,iCAAA,CAAA,cAAA,CAAY,CAAA,KAAA;QACpD;AACA;AACA;QACA,IAAA,CAAA,sBAAA,GAAsC,iCAAA,CAAA,cAAA,CAAY,CAAA,KAAA;QAClD;AACA;AACA;QACA,IAAA,CAAA,mBAAA,GAAmC,iCAAA,CAAA,cAAA,CAAY,CAAA,KAAA;QAC/C;AACA;AACA;QACA,IAAA,CAAA,mBAAA,GAAmC,iCAAA,CAAA,cAAA,CAAY,CAAA,KAAA;QAC/C;AACA;AACA;QACA,IAAA,CAAA,gBAAA,GAAA,IAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,0BAAA,GAAA,IAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,QAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,gBAAA,GAAA,IAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,UAAA,GAAA,KAAA;QACA;AACA;AACA;AACA;QACA,IAAA,CAAA,cAAA,GAAA,CAAA;QACA,IAAA,CAAA,SAAA,GAAA,KAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,aAAA,GAAA,IAAiC,iCAAA,CAAA,SAAA,CAAO,EAAA;QACxC;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAA2B,iCAAA,CAAA,SAAA,CAAO,EAAA;QAClC;AACA;AACA;QACA,IAAA,CAAA,QAAA,GAAA,IAA4B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACnC;AACA;AACA;QACA,IAAA,CAAA,KAAA,GAAA,IAAyB,iCAAA,CAAA,SAAA,CAAO,EAAA;QAChC;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAA2B,iCAAA,CAAA,SAAA,CAAO,EAAA;QAClC;AACA;AACA;QACA,IAAA,CAAA,MAAA,GAAA,IAA0B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACjC;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAA2B,iCAAA,CAAA,SAAA,CAAO,EAAA;QAClC;AACA;AACA;AACA;QACA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,WAAA,CAAA,YAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,YAAA;QAAA;AACA;AACA;AACA;QACA,UAAA,KAAA,EAAA;UACA,MAAA,CAAA,aAAA,CAAA,IAAA,EAAA;UACA;UACA,IAAA,MAAA,CAAA,QAAA,CAAA,MAAA,EAAA;YACA;YACA,IAAA,YAAA,GAAA,MAAA,CAAA,QAAA,CAAA,IAAA;YAAA;AACA;AACA;AACA;YACA,UAAA,MAAA,EAAA;cACA;cACA,IAAA,MAAA,GAAA,KAAA,CAAA,MAAA;cACA,OAAA,CAAA,CAAA,MAAA,KAAA,MAAA,KAAA,MAAA,IAAA,MAAA,CAAA,QAAA,EAAA,gBAA2F,MAAA,CAAA,CAAA;YAC3F,CAAiB,CAAA;YACjB,IAAA,YAAA,IAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,YAAA,CAAA,IAAA,CAAA,MAAA,CAAA,QAAA,EAAA;cACA,MAAA,CAAA,uBAAA,CAAA,YAAA,EAAA,KAAA,CAAA;YACA;UACA,CAAA,MACA,IAAA,CAAA,MAAA,CAAA,QAAA,EAAA;YACA,MAAA,CAAA,uBAAA,CAAA,MAAA,CAAA,YAAA,EAAA,KAAA,CAAA;UACA;QACA,CAAS;QACT;AACA;AACA;QACA,IAAA,CAAA,YAAA;QAAA;AACA;AACA;AACA;QACA,UAAA,KAAA,EAAA;UACA,IAAA,CAAA,MAAA,CAAA,mBAAA,EAAA;YACA;YACA,IAAA,eAAA,GAAA,MAAA,CAAA,yBAAA,CAAA,KAAA,CAAA;YACA;YACA,IAAA,SAAA,GAAA,IAAA,CAAA,GAAA,CAAA,eAAA,CAAA,CAAA,GAAA,MAAA,CAAA,qBAAA,CAAA,CAAA,CAAA;YACA;YACA,IAAA,SAAA,GAAA,IAAA,CAAA,GAAA,CAAA,eAAA,CAAA,CAAA,GAAA,MAAA,CAAA,qBAAA,CAAA,CAAA,CAAA;YACA;YACA,IAAA,eAAA,GAAA,SAAA,GAAA,SAAA,IAAA,MAAA,CAAA,OAAA,CAAA,kBAAA;YACA;YACA;YACA;YACA;YACA,IAAA,eAAA,EAAA;cACA;cACA,IAAA,cAAA,GAAA,IAAA,CAAA,GAAA,EAAA,IAAA,MAAA,CAAA,cAAA,IAAA,MAAA,CAAA,cAAA,IAAA,CAAA,CAAA;cACA,IAAA,CAAA,cAAA,EAAA;gBACA,MAAA,CAAA,gBAAA,CAAA,KAAA,CAAA;gBACA;cACA;cACA;cACA;cACA;cACA,IAAA,CAAA,MAAA,CAAA,cAAA,IAAA,CAAA,MAAA,CAAA,cAAA,CAAA,UAAA,EAAA,EAAA;gBACA,MAAA,CAAA,mBAAA,GAAA,IAAA;gBACA,MAAA,CAAA,OAAA,CAAA,GAAA;gBAAA;AACA;AACA;gBACA;kBAAA,OAAA,MAAA,CAAA,kBAAA,CAAA,KAAA,CAAA;gBAAA,EAAA;cACA;YACA;YACA;UACA;UACA;UACA,IAAA,MAAA,CAAA,gBAAA,EAAA;YACA;YACA;YACA,IAAA,CAAA,MAAA,CAAA,YAAA,IAAA,CAAA,MAAA,CAAA,YAAA,CAAA,KAAA,IAAA,CAAA,MAAA,CAAA,YAAA,CAAA,MAAA,EAAA;cACA,MAAA,CAAA,YAAA,GAAA,CAAA,MAAA,CAAA,QAAA,IAAA,MAAA,CAAA,YAAA,EAAA,qBAAA,EAAA;YACA;UACA;UACA;UACA,IAAA,0BAAA,GAAA,MAAA,CAAA,8BAAA,CAAA,KAAA,CAAA;UACA,MAAA,CAAA,SAAA,GAAA,IAAA;UACA,KAAA,CAAA,cAAA,EAAA;UACA,MAAA,CAAA,4BAAA,CAAA,0BAAA,CAAA;UACA,IAAA,MAAA,CAAA,cAAA,EAAA;YACA,MAAA,CAAA,0BAAA,CAAA,0BAAA,CAAA;UACA,CAAA,MACA;YACA;YACA,IAAA,eAAA,GAAA,MAAA,CAAA,gBAAA;YACA,eAAA,CAAA,CAAA,GACA,0BAAA,CAAA,CAAA,GAAA,MAAA,CAAA,qBAAA,CAAA,CAAA,GAAA,MAAA,CAAA,iBAAA,CAAA,CAAA;YACA,eAAA,CAAA,CAAA,GACA,0BAAA,CAAA,CAAA,GAAA,MAAA,CAAA,qBAAA,CAAA,CAAA,GAAA,MAAA,CAAA,iBAAA,CAAA,CAAA;YACA,MAAA,CAAA,0BAAA,CAAA,eAAA,CAAA,CAAA,EAAA,eAAA,CAAA,CAAA,CAAA;YACA;YACA,IAAA,OAAA,UAAA,KAAA,WAAA,IAAA,MAAA,CAAA,YAAA,YAAA,UAAA,EAAA;cACA;cACA,IAAA,gBAAA,gBAAA,MAAA,CAA0D,eAAA,CAAA,CAAA,OAAA,MAAA,CAAqB,eAAA,CAAA,CAAA,MAAkB;cACjG,MAAA,CAAA,YAAA,CAAA,YAAA,CAAA,WAAA,EAAA,gBAAA,CAAA;YACA;UACA;UACA;UACA;UACA;UACA,IAAA,MAAA,CAAA,WAAA,CAAA,SAAA,CAAA,MAAA,EAAA;YACA,MAAA,CAAA,OAAA,CAAA,GAAA;YAAA;AACA;AACA;YACA,YAAA;cACA,MAAA,CAAA,WAAA,CAAA,IAAA,CAAA;gBACA,MAAA,EAAA,MAAA;gBACA,eAAA,EAAA,0BAAA;gBACA,KAAA,EAAA,KAAA;gBACA,QAAA,EAAA,MAAA,CAAA,gBAAA,CAAA,0BAAA,CAAA;gBACA,KAAA,EAAA,MAAA,CAAA;cACA,CAAqB,CAAA;YACrB,CAAiB,CAAA;UACjB;QACA,CAAS;QACT;AACA;AACA;QACA,IAAA,CAAA,UAAA;QAAA;AACA;AACA;AACA;QACA,UAAA,KAAA,EAAA;UACA,MAAA,CAAA,gBAAA,CAAA,KAAA,CAAA;QACA,CAAS;QACT,IAAA,CAAA,eAAA,CAAA,OAAA,CAAA;QACA,iBAAA,CAAA,gBAAA,CAAA,IAAA,CAAA;MACA;MACA;AACA;AACA;AACA;MAHA,YAAA,CAAA,OAAA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UACA,OAAA,IAAA,CAAA,SAAA,IAAA,CAAA,EAAA,IAAA,CAAA,cAAA,IAAA,IAAA,CAAA,cAAA,CAAA,QAAA,CAAA;QACA;QACA;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,KAAA,EAAA;UACA;UACA,IAAA,QAAA,GAAyB,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAqB,CAAA,KAAA,CAAA;UAC9C,IAAA,QAAA,KAAA,IAAA,CAAA,SAAA,EAAA;YACA,IAAA,CAAA,SAAA,GAAA,QAAA;YACA,IAAA,CAAA,6BAAA,EAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,sBAAA,EAAA;UACA,OAAA,IAAA,CAAA,YAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,eAAA,EAAA;UACA,OAAA,IAAA,CAAA,YAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,YAAA,OAAA,EAAA;UACA,gBAAsB,IAAA,CAAA,QAAA,GAAA,OAAA,CAAA,GAAA;UAAA;AACtB;AACA;AACA;UACA,UAAA,MAAA;YAAA,OAAkB,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,MAAA,CAAA;UAAA,EAAA;UAC/B,gBAAsB,IAAA,CAAA,QAAA,CAAA,OAAA;UAAA;AACtB;AACA;AACA;UACA,UAAA,MAAA;YAAA,OAAA,4BAAA,CAAA,MAAA,EAAA,KAAA,CAAA;UAAA,EAAA;UACA,gBAAsB,IAAA,CAAA,6BAAA,EAAA;UACtB,OAAA,iBAA6B;UAAA;QAC7B;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,oBAAA,QAAA,EAAA;UACA,gBAAsB,IAAA,CAAA,gBAAA,GAAA,QAAA;UACtB,OAAA,iBAA6B;UAAA;QAC7B;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,wBAAA,QAAA,EAAA;UACA,gBAAsB,IAAA,CAAA,oBAAA,GAAA,QAAA;UACtB,OAAA,iBAA6B;UAAA;QAC7B;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MARA;QAAA,GAAA;QAAA,KAAA,EASA,SAAA,gBAAA,WAAA,EAAA;UACA;UACA,IAAA,OAAA,GAAwB,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,WAAA,CAAA;UACrC,IAAA,OAAA,KAAA,gBAAsC,IAAA,CAAA,YAAA,EAAA;YACtC,IAAA,CAAA,gBAA8B,IAAA,CAAA,YAAA,EAAA;cAC9B,gBAA8B,IAAA,CAAA,2BAAA,CAAA,CAAA,gBAAsD,IAAA,CAAA,YAAA,CAAA;YACpF;YACA,OAAA,CAAA,gBAAA,CAAA,WAAA,EAAA,gBAAgE,IAAA,CAAA,YAAA,EAAA,0BAAA,CAAA;YAChE,OAAA,CAAA,gBAAA,CAAA,YAAA,EAAA,gBAAiE,IAAA,CAAA,YAAA,EAAA,2BAAA,CAAA;YACjE,gBAA0B,IAAA,CAAA,iBAAA,GAAA,SAAA;YAC1B,gBAA0B,IAAA,CAAA,YAAA,GAAA,OAAA;UAC1B;UACA,OAAA,iBAA6B;UAAA;QAC7B;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,oBAAA,eAAA,EAAA;UAAA,IAAA,MAAA;UACA,gBAAsB,IAAA,CAAA,gBAAA,GAAA,eAAA,GAAiD,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,eAAA,CAAA,GAAA,IAAA;UACpF,gBAAsB,IAAA,CAAA,mBAAA,CAAA,WAAA,EAAA;UACtB,IAAA,eAAA,EAAA;YACA,gBAA0B,IAAA,CAAA,mBAAA,GAAA,gBAAgD,IAAA,CAAA,cAAA,CAC1E,MAAA,CAAA,EAAA,CAAA,CACA,SAAA;YAAA;AACA;AACA;YACA;cAAA,OAAA,iBAAgC,MAAA,CAAA,8BAAA;cAAA;YAAA,EAAA;UAChC;UACA,OAAA,iBAA6B;UAAA;QAC7B;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,QAAA,EAAA;UACA,IAAA,CAAA,2BAAA,CAAA,IAAA,CAAA,YAAA,CAAA;UACA;UACA;UACA,IAAA,IAAA,CAAA,UAAA,EAAA,EAAA;YACA;YACA;YACA,aAAA,CAAA,IAAA,CAAA,YAAA,CAAA;UACA;UACA,IAAA,CAAA,eAAA,EAAA;UACA,IAAA,CAAA,mBAAA,EAAA;UACA,IAAA,CAAA,iBAAA,CAAA,cAAA,CAAA,IAAA,CAAA;UACA,IAAA,CAAA,oBAAA,EAAA;UACA,IAAA,CAAA,aAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,QAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,KAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,MAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,WAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,QAAA,GAAA,EAAA;UACA,IAAA,CAAA,gBAAA,CAAA,KAAA,EAAA;UACA,IAAA,CAAA,cAAA,GAAA,SAAA;UACA,IAAA,CAAA,gBAAA,GAAA,IAAA,CAAA,YAAA,GAAA,IAAA,CAAA,oBAAA,GACA,IAAA,CAAA,gBAAA,GAAA,IAAA,CAAA,YAAA,GAAA,gBAAsE,IAAA;QACtE;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,WAAA,EAAA;UACA,OAAA,IAAA,CAAA,mBAAA,IAAA,IAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,IAAA,CAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,MAAA,EAAA;UACA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,SAAA,GAAA,IAAA,CAAA,iBAAA,IAAA,EAAA;UACA,IAAA,CAAA,gBAAA,GAAA;YAAiC,CAAA,EAAA,CAAA;YAAA,CAAA,EAAA;UAAA,CAAA;UACjC,IAAA,CAAA,iBAAA,GAAA;YAAkC,CAAA,EAAA,CAAA;YAAA,CAAA,EAAA;UAAA,CAAA;QAClC;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,cAAA,MAAA,EAAA;UACA,IAAA,IAAA,CAAA,QAAA,CAAA,OAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,EAAA;YACA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,MAAA,CAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,aAAA,MAAA,EAAA;UACA,IAAA,CAAA,gBAAA,UAAA,CAAA,MAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,cAAA,SAAA,EAAA;UACA,gBAAsB,IAAA,CAAA,UAAA,GAAA,SAAA;UACtB,OAAA,iBAA6B;UAAA;QAC7B;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,mBAAA,SAAA,EAAA;UACA,IAAA,CAAA,cAAA,GAAA,SAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,oBAAA,EAAA;UACA;UACA,IAAA,QAAA,GAAA,IAAA,CAAA,UAAA,EAAA,GAAA,IAAA,CAAA,gBAAA,GAAA,IAAA,CAAA,iBAAA;UACA,OAAA;YAAgB,CAAA,EAAA,QAAA,CAAA,CAAA;YAAA,CAAA,EAAA,QAAA,CAAA;UAAA,CAAA;QAChB;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,oBAAA,KAAA,EAAA;UACA,gBAAsB,IAAA,CAAA,gBAAA,GAAA;YAAgC,CAAA,EAAA,CAAA;YAAA,CAAA,EAAA;UAAA,CAAA;UACtD,gBAAsB,IAAA,CAAA,iBAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA;UACtB,gBAAsB,IAAA,CAAA,iBAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA;UACtB,IAAA,CAAA,CAAA,gBAA2B,IAAA,CAAA,cAAA,EAAA;YAC3B,gBAA0B,IAAA,CAAA,0BAAA,CAAA,KAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;UAC1B;UACA,OAAA,iBAA6B;UAAA;QAC7B;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,6BAAA,EAAA;UACA;UACA,IAAA,QAAA,GAAA,IAAA,CAAA,qCAAA;UACA,IAAA,QAAA,IAAA,IAAA,CAAA,cAAA,EAAA;YACA,IAAA,CAAA,0BAAA,CAAA,QAAA,CAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,qBAAA,EAAA;UACA,IAAA,CAAA,wBAAA,CAAA,WAAA,EAAA;UACA,IAAA,CAAA,sBAAA,CAAA,WAAA,EAAA;UACA,IAAA,CAAA,mBAAA,CAAA,WAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,gBAAA,EAAA;UACA,IAAA,IAAA,CAAA,QAAA,EAAA;YACA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA;UACA;UACA,IAAA,IAAA,CAAA,WAAA,EAAA;YACA,IAAA,CAAA,WAAA,CAAA,OAAA,EAAA;UACA;UACA,IAAA,CAAA,QAAA,GAAA,IAAA,CAAA,WAAA,GAAA,gBAAyD,IAAA;QACzD;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,oBAAA,EAAA;UACA,IAAA,IAAA,CAAA,YAAA,EAAA;YACA,aAAA,CAAA,IAAA,CAAA,YAAA,CAAA;UACA;UACA,IAAA,IAAA,CAAA,eAAA,EAAA;YACA,IAAA,CAAA,eAAA,CAAA,OAAA,EAAA;UACA;UACA,IAAA,CAAA,YAAA,GAAA,IAAA,CAAA,eAAA,GAAA,gBAAiE,IAAA;QACjE;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,iBAAA,KAAA,EAAA;UAAA,IAAA,MAAA;UACA;UACA;UACA;UACA;UACA,IAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,IAAA,CAAA,EAAA;YACA;UACA;UACA,IAAA,CAAA,oBAAA,EAAA;UACA,IAAA,CAAA,iBAAA,CAAA,YAAA,CAAA,IAAA,CAAA;UACA,IAAA,CAAA,6BAAA,EAAA;UACA,IAAA,IAAA,CAAA,QAAA,EAAA;YACA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,uBAAA,GAAA,IAAA,CAAA,wBAAA;UACA;UACA,IAAA,CAAA,IAAA,CAAA,mBAAA,EAAA;YACA;UACA;UACA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA;YAA4B,MAAA,EAAA;UAAA,CAAe,CAAA;UAC3C,IAAA,IAAA,CAAA,cAAA,EAAA;YACA;YACA,IAAA,CAAA,cAAA,CAAA,cAAA,EAAA;YACA,IAAA,CAAA,4BAAA,EAAA,CAAA,IAAA;YAAA;AACA;AACA;YACA,YAAA;cACA,MAAA,CAAA,qBAAA,CAAA,KAAA,CAAA;cACA,MAAA,CAAA,wBAAA,EAAA;cACA,MAAA,CAAA,iBAAA,CAAA,YAAA,CAAA,MAAA,CAAA;YACA,CAAa,CAAA;UACb,CAAA,MACA;YACA;YACA;YACA;YACA,IAAA,CAAA,iBAAA,CAAA,CAAA,GAAA,IAAA,CAAA,gBAAA,CAAA,CAAA;YACA,IAAA,CAAA,iBAAA,CAAA,CAAA,GAAA,IAAA,CAAA,gBAAA,CAAA,CAAA;YACA,IAAA,CAAA,OAAA,CAAA,GAAA;YAAA;AACA;AACA;YACA,YAAA;cACA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA;gBACA,MAAA,EAAA,MAAA;gBACA,QAAA,EAAA,MAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,yBAAA,CAAA,KAAA,CAAA;cACA,CAAiB,CAAA;YACjB,CAAa,CAAA;YACb,IAAA,CAAA,wBAAA,EAAA;YACA,IAAA,CAAA,iBAAA,CAAA,YAAA,CAAA,IAAA,CAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,mBAAA,KAAA,EAAA;UACA;UACA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA;YAA2B,MAAA,EAAA;UAAA,CAAe,CAAA;UAC1C,IAAA,YAAA,CAAA,KAAA,CAAA,EAAA;YACA,IAAA,CAAA,mBAAA,GAAA,IAAA,CAAA,GAAA,EAAA;UACA;UACA,IAAA,CAAA,6BAAA,EAAA;UACA,IAAA,IAAA,CAAA,cAAA,EAAA;YACA;YACA,IAAA,OAAA,GAAA,IAAA,CAAA,YAAA;YACA;YACA;YACA,IAAA,CAAA,YAAA,GAAA,OAAA,CAAA,WAAA;YACA;YACA,IAAA,OAAA,GAAA,IAAA,CAAA,QAAA,GAAA,IAAA,CAAA,qBAAA,EAAA;YACA;YACA,IAAA,WAAA,GAAA,IAAA,CAAA,YAAA,GAAA,IAAA,CAAA,yBAAA,EAAA;YACA;YACA;YACA;YACA,OAAA,CAAA,KAAA,CAAA,OAAA,GAAA,MAAA;YACA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,WAAA,CAAA,CAAA,gBAA0D,OAAA,CAAA,UAAA,CAAA,YAAA,CAAA,WAAA,EAAA,OAAA,CAAA,CAAA;YAC1D,wBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,WAAA,CAAA,OAAA,CAAA;YACA,IAAA,CAAA,cAAA,CAAA,KAAA,EAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAPA;QAAA,GAAA;QAAA,KAAA,EAQA,SAAA,wBAAA,gBAAA,EAAA,KAAA,EAAA;UAAA,IAAA,OAAA;UACA;UACA;UACA;UACA,KAAA,CAAA,eAAA,EAAA;UACA;UACA,IAAA,UAAA,GAAA,IAAA,CAAA,UAAA,EAAA;UACA;UACA,IAAA,eAAA,GAAA,YAAA,CAAA,KAAA,CAAA;UACA;UACA,IAAA,sBAAA,GAAA,CAAA,eAAA,IAAA,gBAA0E,KAAA,CAAA,MAAA,KAAA,CAAA;UAC1E;UACA,IAAA,WAAA,GAAA,IAAA,CAAA,YAAA;UACA;UACA,IAAA,gBAAA,GAAA,CAAA,eAAA,IAAA,IAAA,CAAA,mBAAA,IACA,IAAA,CAAA,mBAAA,GAAA,uBAAA,GAAA,IAAA,CAAA,GAAA,EAAA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,IAAA,KAAA,CAAA,MAAA,IAAA,gBAA2C,KAAA,CAAA,MAAA,CAAA,SAAA,IAAA,KAAA,CAAA,IAAA,KAAA,WAAA,EAAA;YAC3C,KAAA,CAAA,cAAA,EAAA;UACA;UACA;UACA,IAAA,UAAA,IAAA,sBAAA,IAAA,gBAAA,EAAA;YACA;UACA;UACA;UACA;UACA;UACA,IAAA,IAAA,CAAA,QAAA,CAAA,MAAA,EAAA;YACA,IAAA,CAAA,wBAAA,GAAA,WAAA,CAAA,KAAA,CAAA,uBAAA;YACA,WAAA,CAAA,KAAA,CAAA,uBAAA,GAAA,aAAA;UACA;UACA,IAAA,CAAA,mBAAA,GAAA,IAAA,CAAA,SAAA,GAAA,KAAA;UACA,IAAA,CAAA,iBAAA,GAAA,gBAA+C,IAAA,CAAA,cAAA;UAC/C;UACA;UACA,IAAA,CAAA,oBAAA,EAAA;UACA,IAAA,CAAA,wBAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,WAAA,CAAA,SAAA,CAAA,IAAA,CAAA,YAAA,CAAA;UACA,IAAA,CAAA,sBAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA;UACA,IAAA,CAAA,mBAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,IAAA,CAAsE,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,IAAA,CAAA,CAAA,CAAA,SAAA;UAAA;AAC/E;AACA;UACA,YAAA;YACA,OAAA,CAAA,eAAA,GAAA,OAAA,CAAA,cAAA,CAAA,yBAAA,EAAA;UACA,CAAS,CAAA;UACT,IAAA,IAAA,CAAA,gBAAA,EAAA;YACA,IAAA,CAAA,aAAA,GAAA,IAAA,CAAA,gBAAA,CAAA,qBAAA,EAAA;UACA;UACA;UACA;UACA,IAAA,CAAA,wBAAA,GAAA,IAAA,CAAA,gBAAA,IAAA,IAAA,CAAA,gBAAA,CAAA,QAAA,GACA;YAAa,CAAA,EAAA,CAAA;YAAA,CAAA,EAAA;UAAA,CAAa,GAC1B,IAAA,CAAA,4BAAA,CAAA,gBAAA,EAAA,KAAA,CAAA;UACA;UACA,IAAA,eAAA,GAAA,IAAA,CAAA,qBAAA,GAAA,IAAA,CAAA,yBAAA,CAAA,KAAA,CAAA;UACA,IAAA,CAAA,sBAAA,GAAA;YAAuC,CAAA,EAAA,CAAA;YAAA,CAAA,EAAA;UAAA,CAAA;UACvC,IAAA,CAAA,qCAAA,GAAA;YAAsD,CAAA,EAAA,eAAA,CAAA,CAAA;YAAA,CAAA,EAAA,eAAA,CAAA;UAAA,CAAA;UACtD,IAAA,CAAA,cAAA,GAAA,IAAA,CAAA,GAAA,EAAA;UACA,IAAA,CAAA,iBAAA,CAAA,aAAA,CAAA,IAAA,EAAA,KAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,sBAAA,KAAA,EAAA;UAAA,IAAA,OAAA;UACA;UACA;UACA;UACA;UACA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,OAAA,GAAA,EAAA;UACA,IAAA,IAAA,CAAA,YAAA,EAAA;YACA,gBAA0B,IAAA,CAAA,YAAA,CAAA,UAAA,CAAA,YAAA,CAAA,IAAA,CAAA,YAAA,EAAA,IAAA,CAAA,YAAA,CAAA;UAC1B,CAAA,MACA;YACY,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,IAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,CAAA,WAAA,CAAA,IAAA,CAAA,YAAA,CAAA;UACzB;UACA,IAAA,CAAA,eAAA,EAAA;UACA,IAAA,CAAA,mBAAA,EAAA;UACA,IAAA,CAAA,aAAA,GAAA,IAAA,CAAA,YAAA,GAAA,SAAA;UACA;UACA,IAAA,CAAA,OAAA,CAAA,GAAA;UAAA;AACA;AACA;UACA,YAAA;YACA;YACA,IAAA,SAAA,GAAA,gBAA4C,OAAA,CAAA,cAAA;YAC5C;YACA,IAAA,YAAA,GAAA,SAAA,CAAA,YAAA,CAAA,OAAA,CAAA;YACA;YACA,IAAA,eAAA,GAAA,OAAA,CAAA,yBAAA,CAAA,KAAA,CAAA;YACA;YACA,IAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,KAAA,CAAA,CAAA;YACA;YACA,IAAA,sBAAA,GAAA,SAAA,CAAA,gBAAA,CAAA,eAAA,CAAA,CAAA,EAAA,eAAA,CAAA,CAAA,CAAA;YACA,OAAA,CAAA,KAAA,CAAA,IAAA,CAAA;cAA6B,MAAA,EAAA,OAAA;cAAA,QAAA,EAAA;YAAA,CAAyB,CAAA;YACtD,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA;cACA,IAAA,EAAA,OAAA;cACA,YAAA,EAAA,YAAA;cACA,aAAA,EAAA,OAAA,CAAA,iBAAA,CAAA,YAAA,CAAA,OAAA,CAAA;cACA,SAAA,EAAA,SAAA;cACA,iBAAA,EAAA,OAAA,CAAA,iBAAA;cACA,sBAAA,EAAA,sBAAA;cACA,QAAA,EAAA;YACA,CAAa,CAAA;YACb,SAAA,CAAA,IAAA,CAAA,OAAA,EAAA,YAAA,EAAA,OAAA,CAAA,iBAAA,EAAA,sBAAA,EAAA,QAAA,CAAA;YACA,OAAA,CAAA,cAAA,GAAA,OAAA,CAAA,iBAAA;UACA,CAAS,CAAA;QACT;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,2BAAA,IAAA,EAAuC;UAAA,IAAA,OAAA;UAAA,IAAP,CAAA,GAAA,IAAA,CAAA,CAAA;YAAA,CAAA,GAAA,IAAA,CAAA,CAAA;UAChC;UACA;UACA,IAAA,YAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,gCAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,CAAA;UACA;UACA;UACA;UACA;UACA,IAAA,CAAA,YAAA,IAAA,IAAA,CAAA,cAAA,KAAA,IAAA,CAAA,iBAAA,IACA,IAAA,CAAA,iBAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA;YACA,YAAA,GAAA,IAAA,CAAA,iBAAA;UACA;UACA,IAAA,YAAA,IAAA,YAAA,KAAA,IAAA,CAAA,cAAA,EAAA;YACA,IAAA,CAAA,OAAA,CAAA,GAAA;YAAA;AACA;AACA;YACA,YAAA;cACA;cACA,OAAA,CAAA,MAAA,CAAA,IAAA,CAAA;gBAAkC,IAAA,EAAA,OAAA;gBAAA,SAAA,EAAA,gBAAsC,OAAA,CAAA;cAAA,CAA4B,CAAA;cACpG,gBAA8B,OAAA,CAAA,cAAA,CAAA,IAAA,CAAA,OAAA,CAAA;cAC9B;cACA,OAAA,CAAA,cAAA,GAAA,gBAAoD,YAAA;cACpD,OAAA,CAAA,cAAA,CAAA,KAAA,CAAA,OAAA,EAAA,CAAA,EAAA,CAAA,CAAA;cACA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA;gBACA,IAAA,EAAA,OAAA;gBACA,SAAA,EAAA,gBAA6C,YAAA;gBAC7C,YAAA,EAAA,gBAAgD,YAAA,CAAA,YAAA,CAAA,OAAA;cAChD,CAAiB,CAAA;YACjB,CAAa,CAAA;UACb;UACA,gBAAsB,IAAA,CAAA,cAAA,CAAA,0BAAA,CAAA,CAAA,EAAA,CAAA,CAAA;UACtB,gBAAsB,IAAA,CAAA,cAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,CAAA,sBAAA,CAAA;UACtB,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA,SAAA,GACA,YAAA,CAAA,CAAA,GAAA,IAAA,CAAA,wBAAA,CAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,wBAAA,CAAA,CAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,sBAAA,EAAA;UACA;UACA,IAAA,aAAA,GAAA,IAAA,CAAA,gBAAA;UACA;UACA,IAAA,eAAA,GAAA,aAAA,GAAA,aAAA,CAAA,QAAA,GAAA,IAAA;UACA;UACA,IAAA,OAAA;UACA,IAAA,eAAA,EAAA;YACA;YACA,IAAA,OAAA,GAAA,gBAA0C,aAAA,CAAA,aAAA,CAAA,kBAAA,CAAA,eAAA,EAAA,gBAAqF,aAAA,CAAA,OAAA,CAAA;YAC/H,OAAA,GAAA,WAAA,CAAA,OAAA,EAAA,IAAA,CAAA,SAAA,CAAA;YACA,IAAA,CAAA,WAAA,GAAA,OAAA;YACA,OAAA,CAAA,KAAA,CAAA,SAAA,GACA,YAAA,CAAA,IAAA,CAAA,qBAAA,CAAA,CAAA,EAAA,IAAA,CAAA,qBAAA,CAAA,CAAA,CAAA;UACA,CAAA,MACA;YACA;YACA,IAAA,OAAA,GAAA,IAAA,CAAA,YAAA;YACA;YACA,IAAA,WAAA,GAAA,OAAA,CAAA,qBAAA,EAAA;YACA,OAAA,GAAA,aAAA,CAAA,OAAA,CAAA;YACA,OAAA,CAAA,KAAA,CAAA,KAAA,MAAA,MAAA,CAAqC,WAAA,CAAA,KAAA,OAAkB;YACvD,OAAA,CAAA,KAAA,CAAA,MAAA,MAAA,MAAA,CAAsC,WAAA,CAAA,MAAA,OAAmB;YACzD,OAAA,CAAA,KAAA,CAAA,SAAA,GAAA,YAAA,CAAA,WAAA,CAAA,IAAA,EAAA,WAAA,CAAA,GAAA,CAAA;UACA;UACA,YAAA,CAAA,OAAA,CAAA,KAAA,EAAA;YACA;YACA;YACA,aAAA,EAAA,MAAA;YACA;YACA,MAAA,EAAA,GAAA;YACA,QAAA,EAAA,OAAA;YACA,GAAA,EAAA,GAAA;YACA,IAAA,EAAA,GAAA;YACA,MAAA,EAAA;UACA,CAAS,CAAA;UACT,4BAAA,CAAA,OAAA,EAAA,KAAA,CAAA;UACA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,kBAAA,CAAA;UACA,OAAA,CAAA,YAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,CAAA;UACA,OAAA,OAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,6BAAA,EAAA;UAAA,IAAA,OAAA;UACA;UACA,IAAA,CAAA,IAAA,CAAA,SAAA,EAAA;YACA,OAAA,OAAA,CAAA,OAAA,EAAA;UACA;UACA;UACA,IAAA,eAAA,GAAA,IAAA,CAAA,YAAA,CAAA,qBAAA,EAAA;UACA;UACA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,oBAAA,CAAA;UACA;UACA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA,SAAA,GAAA,YAAA,CAAA,eAAA,CAAA,IAAA,EAAA,eAAA,CAAA,GAAA,CAAA;UACA;UACA;UACA;UACA;UACA;UACA,IAAA,QAAA,GAAA,kCAAA,CAAA,IAAA,CAAA,QAAA,CAAA;UACA,IAAA,QAAA,KAAA,CAAA,EAAA;YACA,OAAA,OAAA,CAAA,OAAA,EAAA;UACA;UACA,OAAA,IAAA,CAAA,OAAA,CAAA,iBAAA;UAAA;AACA;AACA;UACA,YAAA;YACA,OAAA,IAAA,OAAA;YAAA;AACA;AACA;AACA;YACA,UAAA,OAAA,EAAA;cACA;cACA,IAAA,OAAA,GAAA,iBAA8C;AAC9C;AACA;AACA;cACA,SAJA,OAAA,CAIA,KAAA,EAAA;gBACA,IAAA,CAAA,KAAA,IAAA,KAAA,CAAA,MAAA,KAAA,OAAA,CAAA,QAAA,IAAA,KAAA,CAAA,YAAA,KAAA,WAAA,EAAA;kBACA,OAAA,CAAA,QAAA,CAAA,mBAAA,CAAA,eAAA,EAAA,OAAA,CAAA;kBACA,OAAA,EAAA;kBACA,YAAA,CAAA,OAAA,CAAA;gBACA;cACA,CAAiB;cACjB;cACA;cACA;cACA;cACA,IAAA,OAAA,GAAA,UAAA,EAAA,gBAAyD,OAAA,EAAA,QAAA,GAAA,GAAA,CAAA;cACzD,OAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,eAAA,EAAA,OAAA,CAAA;YACA,CAAa,CAAA;UACb,CAAS,CAAA;QACT;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,0BAAA,EAAA;UACA;UACA,IAAA,iBAAA,GAAA,IAAA,CAAA,oBAAA;UACA;UACA,IAAA,mBAAA,GAAA,iBAAA,GAAA,iBAAA,CAAA,QAAA,GAAA,IAAA;UACA;UACA,IAAA,WAAA;UACA,IAAA,mBAAA,EAAA;YACA,IAAA,CAAA,eAAA,GAAA,gBAAiD,iBAAA,CAAA,aAAA,CAAA,kBAAA,CAAA,mBAAA,EAAA,gBAA6F,iBAAA,CAAA,OAAA,CAAA;YAC9I,WAAA,GAAA,WAAA,CAAA,IAAA,CAAA,eAAA,EAAA,IAAA,CAAA,SAAA,CAAA;UACA,CAAA,MACA;YACA,WAAA,GAAA,aAAA,CAAA,IAAA,CAAA,YAAA,CAAA;UACA;UACA,WAAA,CAAA,SAAA,CAAA,GAAA,CAAA,sBAAA,CAAA;UACA,OAAA,WAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,6BAAA,gBAAA,EAAA,KAAA,EAAA;UACA;UACA,IAAA,WAAA,GAAA,IAAA,CAAA,YAAA,CAAA,qBAAA,EAAA;UACA;UACA,IAAA,aAAA,GAAA,gBAAA,KAAA,IAAA,CAAA,YAAA,GAAA,IAAA,GAAA,gBAAA;UACA;UACA,IAAA,aAAA,GAAA,aAAA,GAAA,aAAA,CAAA,qBAAA,EAAA,GAAA,WAAA;UACA;UACA,IAAA,KAAA,GAAA,YAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA,aAAA,CAAA,CAAA,CAAA,GAAA,KAAA;UACA;UACA,IAAA,CAAA,GAAA,KAAA,CAAA,KAAA,GAAA,aAAA,CAAA,IAAA,GAAA,IAAA,CAAA,eAAA,CAAA,IAAA;UACA;UACA,IAAA,CAAA,GAAA,KAAA,CAAA,KAAA,GAAA,aAAA,CAAA,GAAA,GAAA,IAAA,CAAA,eAAA,CAAA,GAAA;UACA,OAAA;YACA,CAAA,EAAA,aAAA,CAAA,IAAA,GAAA,WAAA,CAAA,IAAA,GAAA,CAAA;YACA,CAAA,EAAA,aAAA,CAAA,GAAA,GAAA,WAAA,CAAA,GAAA,GAAA;UACA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,0BAAA,KAAA,EAAA;UACA;UACA;UACA,IAAA,KAAA,GAAA,YAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA,OAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,cAAA,CAAA,CAAA,CAAA,GAAA,KAAA;UACA,OAAA;YACA,CAAA,EAAA,KAAA,CAAA,KAAA,GAAA,IAAA,CAAA,eAAA,CAAA,IAAA;YACA,CAAA,EAAA,KAAA,CAAA,KAAA,GAAA,IAAA,CAAA,eAAA,CAAA;UACA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,+BAAA,KAAA,EAAA;UACA;UACA,IAAA,KAAA,GAAA,IAAA,CAAA,yBAAA,CAAA,KAAA,CAAA;UACA;UACA,IAAA,gBAAA,GAAA,IAAA,CAAA,iBAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,KAAA,EAAA,IAAA,CAAA,GAAA,KAAA;UACA;UACA,IAAA,iBAAA,GAAA,IAAA,CAAA,cAAA,GAAA,IAAA,CAAA,cAAA,CAAA,QAAA,GAAA,IAAA;UACA,IAAA,IAAA,CAAA,QAAA,KAAA,GAAA,IAAA,iBAAA,KAAA,GAAA,EAAA;YACA,gBAAA,CAAA,CAAA,GAAA,IAAA,CAAA,qBAAA,CAAA,CAAA;UACA,CAAA,MACA,IAAA,IAAA,CAAA,QAAA,KAAA,GAAA,IAAA,iBAAA,KAAA,GAAA,EAAA;YACA,gBAAA,CAAA,CAAA,GAAA,IAAA,CAAA,qBAAA,CAAA,CAAA;UACA;UACA,IAAA,IAAA,CAAA,aAAA,EAAA;YACA,IAAA,qBAAA,GAA4C,IAAA,CAAA,wBAAA;cAAzB,OAAA,GAAA,qBAAA,CAAA,CAAA;cAAA,OAAA,GAAA,qBAAA,CAAA,CAAA;YACnB;YACA,IAAA,YAAA,GAAA,IAAA,CAAA,aAAA;YACA;YACA,IAAA,WAAA,GAAA,gBAA8C,IAAA,CAAA,YAAA;YAC9C;YACA,IAAA,IAAA,GAAA,YAAA,CAAA,GAAA,GAAA,OAAA;YACA;YACA,IAAA,IAAA,GAAA,YAAA,CAAA,MAAA,IAAA,WAAA,CAAA,MAAA,GAAA,OAAA,CAAA;YACA;YACA,IAAA,IAAA,GAAA,YAAA,CAAA,IAAA,GAAA,OAAA;YACA;YACA,IAAA,IAAA,GAAA,YAAA,CAAA,KAAA,IAAA,WAAA,CAAA,KAAA,GAAA,OAAA,CAAA;YACA,gBAAA,CAAA,CAAA,GAAA,KAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,IAAA,EAAA,IAAA,CAAA;YACA,gBAAA,CAAA,CAAA,GAAA,KAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,IAAA,EAAA,IAAA,CAAA;UACA;UACA,OAAA,gBAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,6BAAA,qBAAA,EAAA;UACA,IAAe,CAAA,GAAO,qBAAA,CAAP,CAAA;YAAA,CAAA,GAAO,qBAAA,CAAP,CAAA;UACf;UACA,IAAA,KAAA,GAAA,IAAA,CAAA,sBAAA;UACA;UACA,IAAA,uBAAA,GAAA,IAAA,CAAA,qCAAA;UACA;UACA;UACA,IAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,uBAAA,CAAA,CAAA,CAAA;UACA;UACA,IAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,uBAAA,CAAA,CAAA,CAAA;UACA;UACA;UACA;UACA;UACA,IAAA,OAAA,GAAA,IAAA,CAAA,OAAA,CAAA,+BAAA,EAAA;YACA,KAAA,CAAA,CAAA,GAAA,CAAA,GAAA,uBAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;YACA,uBAAA,CAAA,CAAA,GAAA,CAAA;UACA;UACA,IAAA,OAAA,GAAA,IAAA,CAAA,OAAA,CAAA,+BAAA,EAAA;YACA,KAAA,CAAA,CAAA,GAAA,CAAA,GAAA,uBAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;YACA,uBAAA,CAAA,CAAA,GAAA,CAAA;UACA;UACA,OAAA,KAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,8BAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA,YAAA,IAAA,CAAA,IAAA,CAAA,QAAA,EAAA;YACA;UACA;UACA;UACA,IAAA,YAAA,GAAA,IAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,UAAA,EAAA;UACA,IAAA,YAAA,KAAA,IAAA,CAAA,0BAAA,EAAA;YACA,IAAA,CAAA,0BAAA,GAAA,YAAA;YACA,4BAAA,CAAA,IAAA,CAAA,YAAA,EAAA,YAAA,CAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,4BAAA,OAAA,EAAA;UACA,OAAA,CAAA,mBAAA,CAAA,WAAA,EAAA,IAAA,CAAA,YAAA,EAAA,0BAAA,CAAA;UACA,OAAA,CAAA,mBAAA,CAAA,YAAA,EAAA,IAAA,CAAA,YAAA,EAAA,2BAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,2BAAA,CAAA,EAAA,CAAA,EAAA;UACA;UACA,IAAA,SAAA,GAAA,YAAA,CAAA,CAAA,EAAA,CAAA,CAAA;UACA;UACA;UACA,IAAA,IAAA,CAAA,iBAAA,IAAA,IAAA,EAAA;YACA,IAAA,CAAA,iBAAA,GAAA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,SAAA,IAAA,EAAA;UACA;UACA;UACA;UACA;UACA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,SAAA,GAAA,IAAA,CAAA,iBAAA,GACA,SAAA,GAAA,GAAA,GAAA,IAAA,CAAA,iBAAA,GAAA,SAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,iBAAA,eAAA,EAAA;UACA;UACA,IAAA,cAAA,GAAA,IAAA,CAAA,qBAAA;UACA,IAAA,cAAA,EAAA;YACA,OAAA;cAAoB,CAAA,EAAA,eAAA,CAAA,CAAA,GAAA,cAAA,CAAA,CAAA;cAAA,CAAA,EAAA,eAAA,CAAA,CAAA,GAAA,cAAA,CAAA;YAAA,CAAA;UACpB;UACA,OAAA;YAAgB,CAAA,EAAA,CAAA;YAAA,CAAA,EAAA;UAAA,CAAA;QAChB;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,yBAAA,EAAA;UACA,IAAA,CAAA,aAAA,GAAA,IAAA,CAAA,YAAA,GAAA,SAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,+BAAA,EAAA;UACA,IAAA,qBAAA,GAAoB,IAAA,CAAA,iBAAA;YAAP,CAAA,GAAA,qBAAA,CAAA,CAAA;YAAA,CAAA,GAAA,qBAAA,CAAA,CAAA;UACb,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,UAAA,EAAA,IAAA,CAAA,IAAA,CAAA,gBAAA,EAAA;YACA;UACA;UACA;UACA,IAAA,YAAA,GAAA,IAAA,CAAA,gBAAA,CAAA,qBAAA,EAAA;UACA;UACA,IAAA,WAAA,GAAA,IAAA,CAAA,YAAA,CAAA,qBAAA,EAAA;UACA;UACA,IAAA,YAAA,GAAA,YAAA,CAAA,IAAA,GAAA,WAAA,CAAA,IAAA;UACA;UACA,IAAA,aAAA,GAAA,WAAA,CAAA,KAAA,GAAA,YAAA,CAAA,KAAA;UACA;UACA,IAAA,WAAA,GAAA,YAAA,CAAA,GAAA,GAAA,WAAA,CAAA,GAAA;UACA;UACA,IAAA,cAAA,GAAA,WAAA,CAAA,MAAA,GAAA,YAAA,CAAA,MAAA;UACA;UACA;UACA,IAAA,YAAA,CAAA,KAAA,GAAA,WAAA,CAAA,KAAA,EAAA;YACA,IAAA,YAAA,GAAA,CAAA,EAAA;cACA,CAAA,IAAA,YAAA;YACA;YACA,IAAA,aAAA,GAAA,CAAA,EAAA;cACA,CAAA,IAAA,aAAA;YACA;UACA,CAAA,MACA;YACA,CAAA,GAAA,CAAA;UACA;UACA;UACA;UACA,IAAA,YAAA,CAAA,MAAA,GAAA,WAAA,CAAA,MAAA,EAAA;YACA,IAAA,WAAA,GAAA,CAAA,EAAA;cACA,CAAA,IAAA,WAAA;YACA;YACA,IAAA,cAAA,GAAA,CAAA,EAAA;cACA,CAAA,IAAA,cAAA;YACA;UACA,CAAA,MACA;YACA,CAAA,GAAA,CAAA;UACA;UACA,IAAA,CAAA,KAAA,IAAA,CAAA,iBAAA,CAAA,CAAA,IAAA,CAAA,KAAA,IAAA,CAAA,iBAAA,CAAA,CAAA,EAAA;YACA,IAAA,CAAA,mBAAA,CAAA;cAAsC,CAAA,EAAA,CAAA;cAAA,CAAA,EAAA;YAAA,CAAO,CAAA;UAC7C;QACA;MAAA;MAAA,OAAA,OAAA;IAAA;IAEA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA;MACA;MACA;MACA,sBAAA,MAAA,CAA0B,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,UAAA,MAAA,CAAoB,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA;IAC9C;IACA;AACA;AACA;AACA;AACA;IACA,SAAA,aAAA,CAAA,IAAA,EAAA;MACA;MACA,IAAA,KAAA,GAAA,gBAAgC,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA;MAChC;MACA,IAAA,iBAAA,GAAA,KAAA,CAAA,gBAAA,CAAA,MAAA,CAAA;MACA;MACA,IAAA,kBAAA,GAAA,IAAA,CAAA,gBAAA,CAAA,QAAA,CAAA;MACA;MACA,KAAA,CAAA,eAAA,CAAA,IAAA,CAAA;MACA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAmB,CAAA,GAAA,iBAAA,CAAA,MAAA,EAA8B,CAAA,EAAA,EAAA;QACjD,iBAAA,CAAA,CAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA;MACA;MACA;MACA;MACA,IAAA,kBAAA,CAAA,MAAA,EAAA;QACA;QACA,IAAA,aAAA,GAAA,KAAA,CAAA,gBAAA,CAAA,QAAA,CAAA;QACA,KAAA,IAAA,EAAA,GAAA,CAAA,EAAuB,EAAA,GAAA,kBAAA,CAAA,MAAA,EAA+B,EAAA,EAAA,EAAA;UACtD;UACA,IAAA,yBAAA,GAAA,aAAA,CAAA,EAAA,CAAA,CAAA,UAAA,CAAA,IAAA,CAAA;UACA,IAAA,yBAAA,EAAA;YACA,yBAAA,CAAA,SAAA,CAAA,kBAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;UACA;QACA;MACA;MACA,OAAA,KAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,KAAA,CAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA;MACA,OAAA,IAAA,CAAA,GAAA,CAAA,GAAA,EAAA,IAAA,CAAA,GAAA,CAAA,GAAA,EAAA,KAAA,CAAA,CAAA;IACA;IACA;AACA;AACA;AACA;AACA;IACA,SAAA,aAAA,CAAA,OAAA,EAAA;MACA,IAAA,OAAA,IAAA,OAAA,CAAA,UAAA,EAAA;QACA,OAAA,CAAA,UAAA,CAAA,WAAA,CAAA,OAAA,CAAA;MACA;IACA;IACA;AACA;AACA;AACA;AACA;IACA,SAAA,YAAA,CAAA,KAAA,EAAA;MACA;MACA;MACA;MACA,OAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,KAAA,GAAA;IACA;IACA;AACA;AACA;AACA;AACA;IACA,SAAA,wBAAA,CAAA,WAAA,EAAA;MACA;MACA;MACA;MACA,OAAA,WAAA,CAAA,iBAAA,IACA,WAAA,CAAA,uBAAA,IACA,WAAA,CAAA,oBAAA,IACA,WAAA,CAAA,mBAAA,IACA,WAAA,CAAA,IAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,WAAA,CAAA,OAAA,EAAA,SAAA,EAAA;MACA;MACA,IAAA,QAAA,GAAA,OAAA,CAAA,SAAA,CAAA,CAAA,CAAA;MACA,IAAA,QAAA,CAAA,QAAA,KAAA,SAAA,CAAA,YAAA,EAAA;QACA;QACA,IAAA,OAAA,GAAA,SAAA,CAAA,aAAA,CAAA,KAAA,CAAA;QACA,OAAA,CAAA,WAAA,CAAA,QAAA,CAAA;QACA,OAAA,OAAA;MACA;MACA,OAAA,iBAAyB;MAAA;IACzB;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,eAAA,CAAA,KAAA,EAAA,SAAA,EAAA,OAAA,EAAA;MACA;MACA,IAAA,IAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,MAAA,GAAA,CAAA,CAAA;MACA;MACA,IAAA,EAAA,GAAA,OAAA,CAAA,OAAA,EAAA,KAAA,CAAA,MAAA,GAAA,CAAA,CAAA;MACA,IAAA,IAAA,KAAA,EAAA,EAAA;QACA;MACA;MACA;MACA,IAAA,MAAA,GAAA,KAAA,CAAA,IAAA,CAAA;MACA;MACA,IAAA,KAAA,GAAA,EAAA,GAAA,IAAA,GAAA,CAAA,CAAA,GAAA,CAAA;MACA,KAAA,IAAA,CAAA,GAAA,IAAA,EAAsB,CAAA,KAAA,EAAA,EAAU,CAAA,IAAA,KAAA,EAAA;QAChC,KAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA,GAAA,KAAA,CAAA;MACA;MACA,KAAA,CAAA,EAAA,CAAA,GAAA,MAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,iBAAA,CAAA,YAAA,EAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA;MACA;MACA,IAAA,IAAA,GAAA,OAAA,CAAA,YAAA,EAAA,YAAA,CAAA,MAAA,GAAA,CAAA,CAAA;MACA;MACA,IAAA,EAAA,GAAA,OAAA,CAAA,WAAA,EAAA,WAAA,CAAA,MAAA,CAAA;MACA,IAAA,YAAA,CAAA,MAAA,EAAA;QACA,WAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,EAAA,YAAA,CAAA,MAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;MACA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,aAAA,CAAA,YAAA,EAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA;MACA;MACA,IAAA,EAAA,GAAA,OAAA,CAAA,WAAA,EAAA,WAAA,CAAA,MAAA,CAAA;MACA,IAAA,YAAA,CAAA,MAAA,EAAA;QACA,WAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,EAAA,YAAA,CAAA,YAAA,CAAA,CAAA;MACA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,OAAA,CAAA,KAAA,EAAA,GAAA,EAAA;MACA,OAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,GAAA,CAAA,GAAA,EAAA,KAAA,CAAA,CAAA;IACA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IACA,IAAA,gBAAA,GAAA,CAAA;IACA;AACA;AACA;AACA;AACA;IACA,IAAA,wBAAA,GAAA,IAAA;IACA;AACA;AACA;AACA;AACA;IACA,IAAA,0BAAA,GAAA,IAAA;IACA;AACA;AACA;AACA;AACA;IACA,IAAA,gBAAA,GAAA,CAAA;IACA;AACA;AACA;AACA;AACA;IAJA,IAKA,WAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA,SAAA,YAAA,OAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,OAAA,EAAA,cAAA,EAAA;QAAA,IAAA,OAAA;QAAA,eAAA,OAAA,WAAA;QACA,IAAA,CAAA,iBAAA,GAAA,iBAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA;QACA,IAAA,CAAA,cAAA,GAAA,cAAA;QACA;AACA;AACA;AACA;AACA;QACA,IAAA,CAAA,EAAA,wBAAA,MAAA,CAAuC,gBAAA,EAAA,CAAmB;QAC1D;AACA;AACA;QACA,IAAA,CAAA,QAAA,GAAA,KAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,eAAA,GAAA,KAAA;QACA;AACA;AACA;AACA;QACA,IAAA,CAAA,kBAAA,GAAA,KAAA;QACA;AACA;AACA;AACA;QACA,IAAA,CAAA,cAAA;QAAA;AACA;AACA;QACA;UAAA,OAAA,IAAA;QAAA,CAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,aAAA,GAAA,IAAiC,iCAAA,CAAA,SAAA,CAAO,EAAA;QACxC;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAA2B,iCAAA,CAAA,SAAA,CAAO,EAAA;QAClC;AACA;AACA;AACA;QACA,IAAA,CAAA,MAAA,GAAA,IAA0B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACjC;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAA2B,iCAAA,CAAA,SAAA,CAAO,EAAA;QAClC;AACA;AACA;QACA,IAAA,CAAA,MAAA,GAAA,IAA0B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACjC;AACA;AACA;QACA,IAAA,CAAA,WAAA,GAAA,KAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,cAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,eAAA,GAAA;UAAgC,GAAA,EAAA,CAAA;UAAA,IAAA,EAAA;QAAA,CAAA;QAChC;AACA;AACA;QACA,IAAA,CAAA,uBAAA,GAAA;UAAwC,GAAA,EAAA,CAAA;UAAA,IAAA,EAAA;QAAA,CAAA;QACxC;AACA;AACA;AACA;QACA,IAAA,CAAA,aAAA,GAAA;UAA8B,IAAA,EAAA,gBAAqB,IAAA;UAAA,KAAA,EAAA;QAAA,CAAA;QACnD;AACA;AACA;QACA,IAAA,CAAA,SAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,YAAA,GAAA,UAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,eAAA,GAAA,IAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,UAAA,GAAA,KAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,2BAAA,GAA2C,iCAAA,CAAA,cAAA,CAAY,CAAA,KAAA;QACvD;AACA;AACA;QACA,IAAA,CAAA,wBAAA,GAAA,CAAA,CAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,0BAAA,GAAA,CAAA,CAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,iBAAA,GAAA,IAAqC,iCAAA,CAAA,SAAA,CAAO,EAAA;QAC5C;AACA;AACA;QACA,IAAA,CAAA,aAAA;QAAA;AACA;AACA;QACA,YAAA;UACA,IAAA,CAAA,OAAA,CAAA,UAAA,EAAA,EAAA;YACA;UACA;UACA;UACA,IAAA,OAAA,GAA4B,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,OAAA,CAAA,OAAA,CAAA;UACzC,OAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,eAAA,EAAA,OAAA,CAAA,SAAA,EAAA,OAAA,CAAA,UAAA,CAAA;QACA,CAAS;QACT;AACA;AACA;QACA,IAAA,CAAA,oBAAA;QAAA;AACA;AACA;QACA,YAAA;UACA,OAAA,CAAA,cAAA,EAAA;UACY,MAAA,CAAA,iCAAA,CAAA,UAAA,CAAA,CAAQ,CAAA,CAAA,EAAI,iCAAA,CAAA,yBAAA,CAAuB,CAAA,CAC/C,IAAA,CAAsB,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA,CAC/B,SAAA;UAAA;AACA;AACA;UACA,YAAA;YACA;YACA,IAAA,IAAA,GAAA,OAAA,CAAA,WAAA;YACA,IAAA,OAAA,CAAA,wBAAA,KAAA,CAAA,CAAA,UAAA;cACA,uBAAA,CAAA,IAAA,EAAA,CAAA,gBAAA,CAAA;YACA,CAAA,MACA,IAAA,OAAA,CAAA,wBAAA,KAAA,CAAA,CAAA,YAAA;cACA,uBAAA,CAAA,IAAA,EAAA,gBAAA,CAAA;YACA;YACA,IAAA,OAAA,CAAA,0BAAA,KAAA,CAAA,CAAA,YAAA;cACA,yBAAA,CAAA,IAAA,EAAA,CAAA,gBAAA,CAAA;YACA,CAAA,MACA,IAAA,OAAA,CAAA,0BAAA,KAAA,CAAA,CAAA,aAAA;cACA,yBAAA,CAAA,IAAA,EAAA,gBAAA,CAAA;YACA;UACA,CAAa,CAAA;QACb,CAAS;QACT;QACA,IAAA,UAAA,GAAA,IAAA,CAAA,OAAA,GAA0C,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,OAAA,CAAA;QACvD,IAAA,CAAA,WAAA,GAAA,aAAA,CAAA,UAAA,CAAA,IAAA,SAAA;QACA,iBAAA,CAAA,qBAAA,CAAA,IAAA,CAAA;MACA;MACA;AACA;AACA;AACA;MAHA,YAAA,CAAA,WAAA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,QAAA,EAAA;UACA,IAAA,CAAA,cAAA,EAAA;UACA,IAAA,CAAA,iBAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,gBAAA,EAAA;UACA,IAAA,CAAA,aAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,MAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,MAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,eAAA,CAAA,KAAA,EAAA;UACA,IAAA,CAAA,WAAA,GAAA,gBAAyC,IAAA;UACzC,IAAA,CAAA,iBAAA,CAAA,mBAAA,CAAA,IAAA,CAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,WAAA,EAAA;UACA,OAAA,IAAA,CAAA,WAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,MAAA,EAAA;UAAA,IAAA,OAAA;UACA;UACA,IAAA,OAAA,GAAwB,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,IAAA,CAAA,OAAA,CAAA;UACrC,IAAA,CAAA,aAAA,CAAA,IAAA,EAAA;UACA,IAAA,CAAA,WAAA,GAAA,IAAA;UACA,IAAA,CAAA,WAAA,EAAA;UACA,IAAA,CAAA,SAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,OAAA;YAAA,OAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA;UAAA,EAAA;UACA,IAAA,CAAA,gBAAA,EAAA;UACA;UACA,IAAA,IAAA,CAAA,OAAA,EAAA;YACA,IAAA,CAAA,OAAA,CAAA,iBAAA;YAAA;AACA;AACA;YACA;cAAA,OAAA,OAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,OAAA,CAAA,aAAA,CAAA;YAAA,EAAA;UACA,CAAA,MACA;YACA,OAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,IAAA,CAAA,aAAA,CAAA;UACA;UACA;UACA,IAAA,IAAA,CAAA,cAAA,EAAA;YACA,IAAA,CAAA,qBAAA,EAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,MAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA;UACA,IAAA,CAAA,KAAA,EAAA;UACA;UACA;UACA;UACA,IAAA,QAAA,GAAA,IAAA,CAAA,eAAA,GAAA,IAAA,CAAA,WAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA;UACA,IAAA,QAAA,KAAA,CAAA,CAAA,EAAA;YACA;YACA;YACA,QAAA,GAAA,IAAA,CAAA,gCAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,CAAA;UACA;UACA;UACA,IAAA,gBAAA,GAAA,IAAA,CAAA,iBAAA;UACA;UACA,IAAA,YAAA,GAAA,gBAAA,CAAA,OAAA,CAAA,IAAA,CAAA;UACA;UACA,IAAA,WAAA,GAAA,IAAA,CAAA,qBAAA,EAAA;UACA;UACA,IAAA,oBAAA,GAAA,gBAAA,CAAA,QAAA,CAAA;UACA;UACA;UACA;UACA,IAAA,oBAAA,KAAA,IAAA,EAAA;YACA,oBAAA,GAAA,gBAAA,CAAA,QAAA,GAAA,CAAA,CAAA;UACA;UACA;UACA;UACA,IAAA,YAAA,GAAA,CAAA,CAAA,EAAA;YACA,gBAAA,CAAA,MAAA,CAAA,YAAA,EAAA,CAAA,CAAA;UACA;UACA;UACA;UACA,IAAA,oBAAA,IAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,oBAAA,CAAA,EAAA;YACA;YACA,IAAA,OAAA,GAAA,oBAAA,CAAA,cAAA,EAAA;YACA,gBAA0B,OAAA,CAAA,aAAA,CAAA,YAAA,CAAA,WAAA,EAAA,OAAA,CAAA;YAC1B,gBAAA,CAAA,MAAA,CAAA,QAAA,EAAA,CAAA,EAAA,IAAA,CAAA;UACA,CAAA,MACA;YACY,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,WAAA,CAAA,WAAA,CAAA;YACzB,gBAAA,CAAA,IAAA,CAAA,IAAA,CAAA;UACA;UACA;UACA,WAAA,CAAA,KAAA,CAAA,SAAA,GAAA,EAAA;UACA;UACA;UACA,IAAA,CAAA,mBAAA,EAAA;UACA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA;YAA2B,IAAA,EAAA,IAAA;YAAA,SAAA,EAAA,IAAA;YAAA,YAAA,EAAA,IAAA,CAAA,YAAA,CAAA,IAAA;UAAA,CAA+D,CAAA;QAC1F;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,KAAA,IAAA,EAAA;UACA,IAAA,CAAA,MAAA,EAAA;UACA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA;YAA0B,IAAA,EAAA,IAAA;YAAA,SAAA,EAAA;UAAA,CAAwB,CAAA;QAClD;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAVA;QAAA,GAAA;QAAA,KAAA,EAWA,SAAA,KAAA,IAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,sBAAA,EAAiG;UAAA,IAAjG,QAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAA;YAAoF,CAAA,EAAA,CAAA;YAAA,CAAA,EAAA;UAAA,CAAa;UACjG,IAAA,CAAA,MAAA,EAAA;UACA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA;YACA,IAAA,EAAA,IAAA;YACA,YAAA,EAAA,YAAA;YACA,aAAA,EAAA,iBAAA,CAAA,YAAA,CAAA,IAAA,CAAA;YACA,SAAA,EAAA,IAAA;YACA,iBAAA,EAAA,iBAAA;YACA,sBAAA,EAAA,sBAAA;YACA,QAAA,EAAA;UACA,CAAS,CAAA;QACT;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,UAAA,KAAA,EAAA;UAAA,IAAA,OAAA;UACA,gBAAsB,IAAA,CAAA,WAAA,GAAA,KAAA;UACtB,KAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,IAAA;YAAA,OAAA,IAAA,CAAA,kBAAA,EAAA,gBAAsD,OAAA,CAAA;UAAA,EAAA;UACtD,IAAA,CAAA,gBAA0B,IAAA,CAAA,UAAA,EAAA,EAAA;YAC1B,gBAA0B,IAAA,CAAA,WAAA,EAAA;UAC1B;UACA,OAAA,iBAA6B;UAAA;QAC7B;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,cAAA,SAAA,EAAA;UACA,gBAAsB,IAAA,CAAA,UAAA,GAAA,SAAA;UACtB,OAAA,iBAA6B;UAAA;QAC7B;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAPA;QAAA,GAAA;QAAA,KAAA,EAQA,SAAA,YAAA,YAAA,EAAA;UACA,gBAAsB,IAAA,CAAA,SAAA,GAAA,YAAA,CAAA,KAAA,EAAA;UACtB,OAAA,iBAA6B;UAAA;QAC7B;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,gBAAA,WAAA,EAAA;UACA,gBAAsB,IAAA,CAAA,YAAA,GAAA,WAAA;UACtB,OAAA,iBAA6B;UAAA;QAC7B;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,aAAA,IAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA,WAAA,EAAA;YACA,OAAA,IAAA,CAAA,WAAA,CAAA,OAAA,CAAA,IAAA,CAAA;UACA;UACA;UACA;UACA;UACA;UACA,IAAA,KAAA,GAAA,IAAA,CAAA,YAAA,KAAA,YAAA,IAAA,IAAA,CAAA,UAAA,KAAA,KAAA,GACA,IAAA,CAAA,cAAA,CAAA,KAAA,EAAA,CAAA,OAAA,EAAA,GAAA,IAAA,CAAA,cAAA;UACA,OAAA,SAAA,CAAA,KAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,WAAA;YAAA,OAAA,WAAA,CAAA,IAAA,KAAA,IAAA;UAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,YAAA,EAAA;UACA,OAAA,IAAA,CAAA,eAAA,CAAA,IAAA,GAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAPA;QAAA,GAAA;QAAA,KAAA,EAQA,SAAA,UAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,YAAA,EAAA;UACA;UACA,IAAA,IAAA,CAAA,eAAA,IAAA,CAAA,IAAA,CAAA,2BAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA;YACA;UACA;UACA;UACA,IAAA,QAAA,GAAA,IAAA,CAAA,cAAA;UACA;UACA,IAAA,QAAA,GAAA,IAAA,CAAA,gCAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,YAAA,CAAA;UACA,IAAA,QAAA,KAAA,CAAA,CAAA,IAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA;YACA;UACA;UACA;UACA,IAAA,YAAA,GAAA,IAAA,CAAA,YAAA,KAAA,YAAA;UACA;UACA,IAAA,YAAA,GAAA,SAAA,CAAA,QAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,WAAA;YAAA,OAAA,WAAA,CAAA,IAAA,KAAA,IAAA;UAAA,EAAA;UACA;UACA,IAAA,oBAAA,GAAA,QAAA,CAAA,QAAA,CAAA;UACA;UACA,IAAA,eAAA,GAAA,QAAA,CAAA,YAAA,CAAA,CAAA,UAAA;UACA;UACA,IAAA,WAAA,GAAA,oBAAA,CAAA,UAAA;UACA;UACA,IAAA,KAAA,GAAA,YAAA,GAAA,QAAA,GAAA,CAAA,GAAA,CAAA,CAAA;UACA,IAAA,CAAA,aAAA,CAAA,IAAA,GAAA,oBAAA,CAAA,IAAA;UACA,IAAA,CAAA,aAAA,CAAA,KAAA,GAAA,YAAA,GAAA,YAAA,CAAA,CAAA,GAAA,YAAA,CAAA,CAAA;UACA;UACA;UACA,IAAA,UAAA,GAAA,IAAA,CAAA,gBAAA,CAAA,eAAA,EAAA,WAAA,EAAA,KAAA,CAAA;UACA;UACA;UACA,IAAA,aAAA,GAAA,IAAA,CAAA,mBAAA,CAAA,YAAA,EAAA,QAAA,EAAA,KAAA,CAAA;UACA;UACA;UACA;UACA,IAAA,QAAA,GAAA,QAAA,CAAA,KAAA,EAAA;UACA;UACA,eAAA,CAAA,QAAA,EAAA,YAAA,EAAA,QAAA,CAAA;UACA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA;YACA,aAAA,EAAA,YAAA;YACA,YAAA,EAAA,QAAA;YACA,SAAA,EAAA,IAAA;YACA,IAAA,EAAA;UACA,CAAS,CAAA;UACT,QAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;AACA;UACA,UAAA,OAAA,EAAA,KAAA,EAAA;YACA;YACA,IAAA,QAAA,CAAA,KAAA,CAAA,KAAA,OAAA,EAAA;cACA;YACA;YACA;YACA,IAAA,aAAA,GAAA,OAAA,CAAA,IAAA,KAAA,IAAA;YACA;YACA,IAAA,MAAA,GAAA,aAAA,GAAA,UAAA,GAAA,aAAA;YACA;YACA,IAAA,eAAA,GAAA,aAAA,GAAA,IAAA,CAAA,qBAAA,EAAA,GACA,OAAA,CAAA,IAAA,CAAA,cAAA,EAAA;YACA;YACA,OAAA,CAAA,MAAA,IAAA,MAAA;YACA;YACA;YACA;YACA;YACA,IAAA,YAAA,EAAA;cACA;cACA;cACA,eAAA,CAAA,KAAA,CAAA,SAAA,kBAAA,MAAA,CAAiE,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,cAA2B;cAC5F,gBAAA,CAAA,OAAA,CAAA,UAAA,EAAA,CAAA,EAAA,MAAA,CAAA;YACA,CAAA,MACA;cACA,eAAA,CAAA,KAAA,CAAA,SAAA,qBAAA,MAAA,CAAoE,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,WAA2B;cAC/F,gBAAA,CAAA,OAAA,CAAA,UAAA,EAAA,MAAA,EAAA,CAAA,CAAA;YACA;UACA,CAAS,CAAA;QACT;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,2BAAA,QAAA,EAAA,QAAA,EAAA;UACA,IAAA,IAAA,CAAA,kBAAA,EAAA;YACA;UACA;UACA;UACA,IAAA,UAAA;UACA;UACA,IAAA,uBAAA,GAAA,CAAA,CAAA;UACA;UACA,IAAA,yBAAA,GAAA,CAAA,CAAA;UACA;UACA,IAAA,IAAA,CAAA,2BAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA;YACA;YACA,IAAA,OAAA,GAA4B,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,IAAA,CAAA,OAAA,CAAA;YAAA,IAAA,qBAAA,GAEzC,0BAAA,CAAA,OAAA,EAAA,IAAA,CAAA,WAAA,EAAA,QAAA,EAAA,QAAA,CAAA;YAAA,IAAA,sBAAA,GAAA,cAAA,CAAA,qBAAA;YADA,uBAAA,GAAA,sBAAA;YAAA,yBAAA,GAAA,sBAAA;YAEA,IAAA,uBAAA,IAAA,yBAAA,EAAA;cACA,UAAA,GAAA,OAAA;YACA;UACA;UACA;UACA;UACA,IAAA,IAAA,CAAA,cAAA,IAAA,CAAA,uBAAA,IAAA,CAAA,yBAAA,EAAA;YACA,IAAA,qBAAA,GAAmC,IAAA,CAAA,cAAA,CAAA,eAAA,EAAA;cAAhB,KAAA,GAAA,qBAAA,CAAA,KAAA;cAAA,MAAA,GAAA,qBAAA,CAAA,MAAA;YACnB;YACA,IAAA,UAAA,GAAA;cAAgC,KAAA,EAAA,KAAA;cAAA,MAAA,EAAA,MAAA;cAAA,GAAA,EAAA,CAAA;cAAA,KAAA,EAAA,KAAA;cAAA,MAAA,EAAA,MAAA;cAAA,IAAA,EAAA;YAAA,CAAA;YAChC,uBAAA,GAAA,0BAAA,CAAA,UAAA,EAAA,QAAA,CAAA;YACA,yBAAA,GAAA,4BAAA,CAAA,UAAA,EAAA,QAAA,CAAA;YACA,UAAA,GAAA,MAAA;UACA;UACA,IAAA,UAAA,KAAA,uBAAA,KAAA,IAAA,CAAA,wBAAA,IACA,yBAAA,KAAA,IAAA,CAAA,0BAAA,IACA,UAAA,KAAA,IAAA,CAAA,WAAA,CAAA,EAAA;YACA,IAAA,CAAA,wBAAA,GAAA,uBAAA;YACA,IAAA,CAAA,0BAAA,GAAA,yBAAA;YACA,IAAA,CAAA,WAAA,GAAA,UAAA;YACA,IAAA,CAAA,uBAAA,IAAA,yBAAA,KAAA,UAAA,EAAA;cACA;cACA,IAAA,IAAA,CAAA,OAAA,EAAA;gBACA,IAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,oBAAA,CAAA;cACA,CAAA,MACA;gBACA,IAAA,CAAA,oBAAA,EAAA;cACA;YACA,CAAA,MACA;cACA,IAAA,CAAA,cAAA,EAAA;YACA;UACA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,eAAA,EAAA;UACA,IAAA,CAAA,iBAAA,CAAA,IAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,kBAAA,EAAA;UACA;UACA,IAAA,OAAA,GAAwB,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,IAAA,CAAA,OAAA,CAAA;UACrC,IAAA,CAAA,WAAA,GAAA,oBAAA,CAAA,OAAA,CAAA;UACA,IAAA,CAAA,eAAA,GAAA;YAAgC,GAAA,EAAA,OAAA,CAAA,SAAA;YAAA,IAAA,EAAA,OAAA,CAAA;UAAA,CAAA;QAChC;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,oBAAA,EAAA;UAAA,IAAA,OAAA;UACA;UACA,IAAA,YAAA,GAAA,IAAA,CAAA,YAAA,KAAA,YAAA;UACA,IAAA,CAAA,cAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,GAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,IAAA,EAAA;YACA;YACA,IAAA,gBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,IAAA,CAAA;YACA;YACA;YACA,IAAA,CAAA,qBAAA,EAAA,GACA,IAAA,CAAA,cAAA,EAAA;YACA,OAAA;cAAoB,IAAA,EAAA,IAAA;cAAA,MAAA,EAAA,CAAA;cAAA,UAAA,EAAA,oBAAA,CAAA,gBAAA;YAAA,CAAA;UACpB,CAAS,CAAA,CAAA,IAAA;UAAA;AACT;AACA;AACA;AACA;UACA,UAAA,CAAA,EAAA,CAAA,EAAA;YACA,OAAA,YAAA,GAAA,CAAA,CAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA,UAAA,CAAA,IAAA,GACA,CAAA,CAAA,UAAA,CAAA,GAAA,GAAA,CAAA,CAAA,UAAA,CAAA,GAAA;UACA,CAAS,CAAA;QACT;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,OAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,WAAA,GAAA,KAAA;UACA;UACA,IAAA,CAAA,iBAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,IAAA;YAAA,OAAA,IAAA,CAAA,cAAA,EAAA,CAAA,KAAA,CAAA,SAAA,GAAA,EAAA;UAAA,EAAA;UACA,IAAA,CAAA,SAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,OAAA;YAAA,OAAA,OAAA,CAAA,cAAA,CAAA,OAAA,CAAA;UAAA,EAAA;UACA,IAAA,CAAA,iBAAA,GAAA,EAAA;UACA,IAAA,CAAA,cAAA,GAAA,EAAA;UACA,IAAA,CAAA,aAAA,CAAA,IAAA,GAAA,IAAA;UACA,IAAA,CAAA,aAAA,CAAA,KAAA,GAAA,CAAA;UACA,IAAA,CAAA,cAAA,EAAA;UACA,IAAA,CAAA,gBAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAPA;QAAA,GAAA;QAAA,KAAA,EAQA,SAAA,oBAAA,YAAA,EAAA,QAAA,EAAA,KAAA,EAAA;UACA;UACA,IAAA,YAAA,GAAA,IAAA,CAAA,YAAA,KAAA,YAAA;UACA;UACA,IAAA,eAAA,GAAA,QAAA,CAAA,YAAA,CAAA,CAAA,UAAA;UACA;UACA,IAAA,gBAAA,GAAA,QAAA,CAAA,YAAA,GAAA,KAAA,GAAA,CAAA,CAAA,CAAA;UACA;UACA,IAAA,aAAA,GAAA,eAAA,CAAA,YAAA,GAAA,OAAA,GAAA,QAAA,CAAA,GAAA,KAAA;UACA,IAAA,gBAAA,EAAA;YACA;YACA,IAAA,KAAA,GAAA,YAAA,GAAA,MAAA,GAAA,KAAA;YACA;YACA,IAAA,GAAA,GAAA,YAAA,GAAA,OAAA,GAAA,QAAA;YACA;YACA;YACA;YACA;YACA,IAAA,KAAA,KAAA,CAAA,CAAA,EAAA;cACA,aAAA,IAAA,gBAAA,CAAA,UAAA,CAAA,KAAA,CAAA,GAAA,eAAA,CAAA,GAAA,CAAA;YACA,CAAA,MACA;cACA,aAAA,IAAA,eAAA,CAAA,KAAA,CAAA,GAAA,gBAAA,CAAA,UAAA,CAAA,GAAA,CAAA;YACA;UACA;UACA,OAAA,aAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,4BAAA,QAAA,EAAA,QAAA,EAAA;UACA,IAAA,iBAAA,GAAyD,IAAA,CAAA,WAAA;YAA1C,GAAA,GAAA,iBAAA,CAAA,GAAA;YAAA,KAAA,GAAA,iBAAA,CAAA,KAAA;YAAA,MAAA,GAAA,iBAAA,CAAA,MAAA;YAAA,IAAA,GAAA,iBAAA,CAAA,IAAA;YAAA,KAAA,GAAA,iBAAA,CAAA,KAAA;YAAA,MAAA,GAAA,iBAAA,CAAA,MAAA;UACf;UACA,IAAA,UAAA,GAAA,KAAA,GAAA,wBAAA;UACA;UACA,IAAA,UAAA,GAAA,MAAA,GAAA,wBAAA;UACA,OAAA,QAAA,GAAA,GAAA,GAAA,UAAA,IAAA,QAAA,GAAA,MAAA,GAAA,UAAA,IACA,QAAA,GAAA,IAAA,GAAA,UAAA,IAAA,QAAA,GAAA,KAAA,GAAA,UAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAPA;QAAA,GAAA;QAAA,KAAA,EAQA,SAAA,iBAAA,eAAA,EAAA,WAAA,EAAA,KAAA,EAAA;UACA;UACA,IAAA,YAAA,GAAA,IAAA,CAAA,YAAA,KAAA,YAAA;UACA;UACA,IAAA,UAAA,GAAA,YAAA,GAAA,WAAA,CAAA,IAAA,GAAA,eAAA,CAAA,IAAA,GACA,WAAA,CAAA,GAAA,GAAA,eAAA,CAAA,GAAA;UACA;UACA,IAAA,KAAA,KAAA,CAAA,CAAA,EAAA;YACA,UAAA,IAAA,YAAA,GAAA,WAAA,CAAA,KAAA,GAAA,eAAA,CAAA,KAAA,GACA,WAAA,CAAA,MAAA,GAAA,eAAA,CAAA,MAAA;UACA;UACA,OAAA,UAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MARA;QAAA,GAAA;QAAA,KAAA,EASA,SAAA,iCAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,KAAA,EAAA;UAAA,IAAA,OAAA;UACA;UACA,IAAA,YAAA,GAAA,IAAA,CAAA,YAAA,KAAA,YAAA;UACA,OAAA,SAAA,CAAA,IAAA,CAAA,cAAA;UAAA;AACA;AACA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAA6B,CAAA,EAAA,KAAA,EAAA;YAAA,IAAnB,IAAA,GAAA,KAAA,CAAA,IAAA;cAAA,UAAA,GAAA,KAAA,CAAA,UAAA;YACV,IAAA,IAAA,KAAA,IAAA,EAAA;cACA;cACA;cACA,OAAA,KAAA,CAAA,MAAA,GAAA,CAAA;YACA;YACA,IAAA,KAAA,EAAA;cACA;cACA,IAAA,SAAA,GAAA,YAAA,GAAA,KAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA;cACA;cACA;cACA,IAAA,IAAA,KAAA,OAAA,CAAA,aAAA,CAAA,IAAA,IAAA,SAAA,KAAA,OAAA,CAAA,aAAA,CAAA,KAAA,EAAA;gBACA,OAAA,KAAA;cACA;YACA;YACA,OAAA,YAAA;YACA;YACA;YACA,QAAA,IAAA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA,IAAA,CAAA,IAAA,QAAA,IAAA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,GACA,QAAA,IAAA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA,GAAA,CAAA,IAAA,QAAA,IAAA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA,MAAA,CAAA;UACA,CAAS,CAAA;QACT;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,iBAAA,GAAA,IAAA,CAAA,WAAA,CAAA,KAAA,EAAA;UACA,IAAA,CAAA,mBAAA,EAAA;UACA,IAAA,CAAA,iBAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAVA;QAAA,GAAA;QAAA,KAAA,EAWA,SAAA,mBAAA,cAAA,EAAA,MAAA,EAAA,OAAA,EAAA,eAAA,EAAA;UAAA,IAAA,OAAA;UACA;UACA,IAAA,aAAA,GAAA,cAAA,CAAA,GAAA,GAAA,MAAA;UACA;UACA,IAAA,cAAA,GAAA,cAAA,CAAA,IAAA,GAAA,OAAA;UACA,IAAA,eAAA,EAAA;YACA,gBAAA,CAAA,eAAA,EAAA,aAAA,EAAA,cAAA,CAAA;UACA;UACA;UACA;UACA;UACA,IAAA,CAAA,cAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAuB;YAAA,IAAb,UAAA,GAAA,KAAA,CAAA,UAAA;YACV,gBAAA,CAAA,UAAA,EAAA,aAAA,EAAA,cAAA,CAAA;UACA,CAAS,CAAA;UACT;UACA;UACA,IAAA,CAAA,cAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAiB;YAAA,IAAP,IAAA,GAAA,KAAA,CAAA,IAAA;YACV,IAAA,OAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,IAAA,CAAA,EAAA;cACA;cACA;cACA,IAAA,CAAA,4BAAA,EAAA;YACA;UACA,CAAS,CAAA;UACT,cAAA,CAAA,GAAA,GAAA,MAAA;UACA,cAAA,CAAA,IAAA,GAAA,OAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,iBAAA,EAAA;UACQ,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,mBAAA,CAAA,QAAA,EAAA,IAAA,CAAA,aAAA,CAAA;UACrB,IAAA,CAAA,2BAAA,CAAA,WAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,iBAAA,CAAA,EAAA,CAAA,EAAA;UACA,OAAA,kBAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAPA;QAAA,GAAA;QAAA,KAAA,EAQA,SAAA,iCAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA;UACA,OAAA,IAAA,CAAA,SAAA,CAAA,IAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,OAAA;YAAA,OAAA,OAAA,CAAA,WAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,CAAA;UAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,YAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,IAAA,EAAA,IAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA;YACA,OAAA,KAAA;UACA;UACA;UACA,IAAA,gBAAA,GAAA,gBAA+C,IAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,CAAA,CAAA;UAC/C;UACA;UACA,IAAA,CAAA,gBAAA,EAAA;YACA,OAAA,KAAA;UACA;UACA;UACA,IAAA,aAAA,GAA8B,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,IAAA,CAAA,OAAA,CAAA;UAC3C;UACA;UACA;UACA;UACA;UACA;UACA,OAAA,gBAAA,KAAA,aAAA,IAAA,aAAA,CAAA,QAAA,CAAA,gBAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,gBAAA,OAAA,EAAA;UACA;UACA,IAAA,cAAA,GAAA,IAAA,CAAA,eAAA;UACA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,OAAA,CAAA,EAAA;YACA,cAAA,CAAA,GAAA,CAAA,OAAA,CAAA;YACA,IAAA,CAAA,iBAAA,EAAA;YACA,IAAA,CAAA,qBAAA,EAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,eAAA,OAAA,EAAA;UACA,IAAA,CAAA,eAAA,UAAA,CAAA,OAAA,CAAA;UACA,IAAA,CAAA,2BAAA,CAAA,WAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,sBAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,uBAAA,GAAA,gBAAqD,IAAA,CAAA,cAAA,CAAA,yBAAA,EAAA;UACrD,IAAA,CAAA,2BAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,SAAA;UAAA;AACA;AACA;UACA,YAAA;YACA,IAAA,OAAA,CAAA,UAAA,EAAA,EAAA;cACA;cACA,IAAA,WAAA,GAAA,gBAAkD,OAAA,CAAA,cAAA,CAAA,yBAAA,EAAA;cAClD,OAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,uBAAA,EAAA,WAAA,CAAA,GAAA,EAAA,WAAA,CAAA,IAAA,EAAA,OAAA,CAAA,WAAA,CAAA;YACA,CAAA,MACA,IAAA,OAAA,CAAA,WAAA,EAAA,EAAA;cACA,OAAA,CAAA,iBAAA,EAAA;YACA;UACA,CAAS,CAAA;QACT;MAAA;MAAA,OAAA,WAAA;IAAA;IAEA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,gBAAA,CAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA;MACA,UAAA,CAAA,GAAA,IAAA,GAAA;MACA,UAAA,CAAA,MAAA,GAAA,UAAA,CAAA,GAAA,GAAA,UAAA,CAAA,MAAA;MACA,UAAA,CAAA,IAAA,IAAA,IAAA;MACA,UAAA,CAAA,KAAA,GAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,KAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,SAAA,CAAA,KAAA,EAAA,SAAA,EAAA;MACA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAmB,CAAA,GAAA,KAAA,CAAA,MAAA,EAAkB,CAAA,EAAA,EAAA;QACrC,IAAA,SAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA;UACA,OAAA,CAAA;QACA;MACA;MACA,OAAA,CAAA,CAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,kBAAA,CAAA,UAAA,EAAA,CAAA,EAAA,CAAA,EAAA;MACA,IAAW,GAAA,GAA2B,UAAA,CAA3B,GAAA;QAAA,MAAA,GAA2B,UAAA,CAA3B,MAAA;QAAA,IAAA,GAA2B,UAAA,CAA3B,IAAA;QAAA,KAAA,GAA2B,UAAA,CAA3B,KAAA;MACX,OAAA,CAAA,IAAA,GAAA,IAAA,CAAA,IAAA,MAAA,IAAA,CAAA,IAAA,IAAA,IAAA,CAAA,IAAA,KAAA;IACA;IACA;AACA;AACA;AACA;AACA;IACA,SAAA,oBAAA,CAAA,OAAA,EAAA;MACA;MACA,IAAA,UAAA,GAAA,OAAA,CAAA,qBAAA,EAAA;MACA;MACA;MACA;MACA;MACA,OAAA;QACA,GAAA,EAAA,UAAA,CAAA,GAAA;QACA,KAAA,EAAA,UAAA,CAAA,KAAA;QACA,MAAA,EAAA,UAAA,CAAA,MAAA;QACA,IAAA,EAAA,UAAA,CAAA,IAAA;QACA,KAAA,EAAA,UAAA,CAAA,KAAA;QACA,MAAA,EAAA,UAAA,CAAA;MACA,CAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,uBAAA,CAAA,IAAA,EAAA,MAAA,EAAA;MACA,IAAA,IAAA,KAAA,MAAA,EAAA;QACA,gBAAuB,IAAA,CAAA,QAAA,CAAA,CAAA,EAAA,MAAA,CAAA;MACvB,CAAA,MACA;QACA;QACA,gBAAuB,IAAA,CAAA,SAAA,IAAA,MAAA;MACvB;IACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,yBAAA,CAAA,IAAA,EAAA,MAAA,EAAA;MACA,IAAA,IAAA,KAAA,MAAA,EAAA;QACA,gBAAuB,IAAA,CAAA,QAAA,CAAA,MAAA,EAAA,CAAA,CAAA;MACvB,CAAA,MACA;QACA;QACA,gBAAuB,IAAA,CAAA,UAAA,IAAA,MAAA;MACvB;IACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,0BAAA,CAAA,UAAA,EAAA,QAAA,EAAA;MACA,IAAW,GAAA,GAAsB,UAAA,CAAtB,GAAA;QAAA,MAAA,GAAsB,UAAA,CAAtB,MAAA;QAAA,MAAA,GAAsB,UAAA,CAAtB,MAAA;MACX;MACA,IAAA,UAAA,GAAA,MAAA,GAAA,0BAAA;MACA,IAAA,QAAA,IAAA,GAAA,GAAA,UAAA,IAAA,QAAA,IAAA,GAAA,GAAA,UAAA,EAAA;QACA,OAAA,CAAA,CAAA;MACA,CAAA,MACA,IAAA,QAAA,IAAA,MAAA,GAAA,UAAA,IAAA,QAAA,IAAA,MAAA,GAAA,UAAA,EAAA;QACA,OAAA,CAAA,CAAA;MACA;;MACA,OAAA,CAAA,CAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,4BAAA,CAAA,UAAA,EAAA,QAAA,EAAA;MACA,IAAW,IAAA,GAAqB,UAAA,CAArB,IAAA;QAAA,KAAA,GAAqB,UAAA,CAArB,KAAA;QAAA,KAAA,GAAqB,UAAA,CAArB,KAAA;MACX;MACA,IAAA,UAAA,GAAA,KAAA,GAAA,0BAAA;MACA,IAAA,QAAA,IAAA,IAAA,GAAA,UAAA,IAAA,QAAA,IAAA,IAAA,GAAA,UAAA,EAAA;QACA,OAAA,CAAA,CAAA;MACA,CAAA,MACA,IAAA,QAAA,IAAA,KAAA,GAAA,UAAA,IAAA,QAAA,IAAA,KAAA,GAAA,UAAA,EAAA;QACA,OAAA,CAAA,CAAA;MACA;;MACA,OAAA,CAAA,CAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,0BAAA,CAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,QAAA,EAAA;MACA;MACA,IAAA,gBAAA,GAAA,0BAAA,CAAA,UAAA,EAAA,QAAA,CAAA;MACA;MACA,IAAA,kBAAA,GAAA,4BAAA,CAAA,UAAA,EAAA,QAAA,CAAA;MACA;MACA,IAAA,uBAAA,GAAA,CAAA,CAAA;MACA;MACA,IAAA,yBAAA,GAAA,CAAA,CAAA;MACA;MACA;MACA;MACA;MACA,IAAA,gBAAA,EAAA;QACA;QACA,IAAA,SAAA,GAAA,OAAA,CAAA,SAAA;QACA,IAAA,gBAAA,KAAA,CAAA,CAAA,UAAA;UACA,IAAA,SAAA,GAAA,CAAA,EAAA;YACA,uBAAA,GAAA,CAAA,CAAA;UACA;QACA,CAAA,MACA,IAAA,OAAA,CAAA,YAAA,GAAA,SAAA,GAAA,OAAA,CAAA,YAAA,EAAA;UACA,uBAAA,GAAA,CAAA,CAAA;QACA;MACA;;MACA,IAAA,kBAAA,EAAA;QACA;QACA,IAAA,UAAA,GAAA,OAAA,CAAA,UAAA;QACA,IAAA,kBAAA,KAAA,CAAA,CAAA,YAAA;UACA,IAAA,UAAA,GAAA,CAAA,EAAA;YACA,yBAAA,GAAA,CAAA,CAAA;UACA;QACA,CAAA,MACA,IAAA,OAAA,CAAA,WAAA,GAAA,UAAA,GAAA,OAAA,CAAA,WAAA,EAAA;UACA,yBAAA,GAAA,CAAA,CAAA;QACA;MACA;;MACA,OAAA,CAAA,uBAAA,EAAA,yBAAA,CAAA;IACA;IACA;AACA;AACA;AACA;AACA;IACA,SAAA,aAAA,CAAA,OAAA,EAAA;MACA,IAAQ,MAAA,CAAA,kDAAA,CAAA,oBAAA,CAAA,CAAkB,EAAA,EAAA;QAC1B;QACA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,GAAA,OAAA,CAAA,WAAA,EAAA,GAAA,IAAA;QACA,IAAA,QAAA,YAAA,UAAA,EAAA;UACA,OAAA,QAAA;QACA;MACA;MACA,OAAA,IAAA;IACA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IACA,IAAA,2BAAA,GAAoC,MAAA,CAAA,kDAAA,CAAA,iCAAA,CAAA,CAA+B,CAAA;MACnE,OAAA,EAAA,KAAA;MACA,OAAA,EAAA;IACA,CAAC,CAAA;IACD;AACA;AACA;AACA;AACA;AACA;IACA;IACA;IACA;IAAA,IACA,gBAAA;MACA;AACA;AACA;AACA;MACA,SAAA,iBAAA,OAAA,EAAA,SAAA,EAAA;QAAA,IAAA,OAAA;QAAA,eAAA,OAAA,gBAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,cAAA,GAAA,IAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,cAAA,GAAA,IAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,oBAAA,GAAA,IAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,gBAAA,GAAA,IAAA,GAAA,EAAA;QACA;AACA;AACA;AACA;QACA,IAAA,CAAA,WAAA,GAAA,IAA+B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACtC;AACA;AACA;AACA;QACA,IAAA,CAAA,SAAA,GAAA,IAA6B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACpC;AACA;AACA;QACA,IAAA,CAAA,MAAA,GAAA,IAA0B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACjC;AACA;AACA;AACA;QACA,IAAA,CAAA,4BAAA;QAAA;AACA;AACA;AACA;QACA,UAAA,KAAA,EAAA;UACA,IAAA,OAAA,CAAA,oBAAA,CAAA,IAAA,EAAA;YACA,KAAA,CAAA,cAAA,EAAA;UACA;QACA,CAAS;QACT,IAAA,CAAA,SAAA,GAAA,SAAA;MACA;MACA;AACA;AACA;AACA;AACA;MAJA,YAAA,CAAA,gBAAA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,sBAAA,IAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA;YACA,IAAA,IAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA;cACA,MAAA,KAAA,4BAAA,MAAA,CAAsD,IAAA,CAAA,EAAA,qCAAQ;YAC9D;YACA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,IAAA,CAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,iBAAA,IAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,IAAA,CAAA;UACA;UACA;UACA;UACA,IAAA,IAAA,CAAA,cAAA,CAAA,IAAA,KAAA,CAAA,EAAA;YACA,IAAA,CAAA,OAAA,CAAA,iBAAA;YAAA;AACA;AACA;YACA,YAAA;cACA;cACA;cACA,OAAA,CAAA,SAAA,CAAA,gBAAA,CAAA,WAAA,EAAA,OAAA,CAAA,4BAAA,EAAA,2BAAA,CAAA;YACA,CAAa,CAAA;UACb;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,oBAAA,IAAA,EAAA;UACA,IAAA,CAAA,cAAA,UAAA,CAAA,IAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,eAAA,IAAA,EAAA;UACA,IAAA,CAAA,cAAA,UAAA,CAAA,IAAA,CAAA;UACA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA;UACA,IAAA,IAAA,CAAA,cAAA,CAAA,IAAA,KAAA,CAAA,EAAA;YACA,IAAA,CAAA,SAAA,CAAA,mBAAA,CAAA,WAAA,EAAA,IAAA,CAAA,4BAAA,EAAA,2BAAA,CAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,cAAA,IAAA,EAAA,KAAA,EAAA;UAAA,IAAA,OAAA;UACA;UACA,IAAA,IAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA;YACA;UACA;UACA,IAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,IAAA,CAAA;UACA,IAAA,IAAA,CAAA,oBAAA,CAAA,IAAA,KAAA,CAAA,EAAA;YACA;YACA,IAAA,aAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,OAAA,CAAA;YACA;YACA,IAAA,SAAA,GAAA,aAAA,GAAA,WAAA,GAAA,WAAA;YACA;YACA,IAAA,OAAA,GAAA,aAAA,GAAA,UAAA,GAAA,SAAA;YACA;YACA;YACA;YACA,IAAA,CAAA,gBAAA,CACA,GAAA,CAAA,SAAA,EAAA;cACA,OAAA;cAAA;AACA;AACA;AACA;cACA,SAAA,QAAA,CAAA;gBAAA,OAAA,OAAA,CAAA,WAAA,CAAA,IAAA,EAAA,gBAA2D,CAAA,CAAA;cAAA,CAAA;cAC3D,OAAA,EAAA;YACA,CAAa,CAAA,CACb,GAAA,CAAA,OAAA,EAAA;cACA,OAAA;cAAA;AACA;AACA;AACA;cACA,SAAA,QAAA,CAAA;gBAAA,OAAA,OAAA,CAAA,SAAA,CAAA,IAAA,EAAA,gBAAyD,CAAA,CAAA;cAAA,CAAA;cACzD,OAAA,EAAA;YACA,CAAa,CAAA,CACb,GAAA,CAAA,QAAA,EAAA;cACA,OAAA;cAAA;AACA;AACA;AACA;cACA,SAAA,QAAA,CAAA;gBAAA,OAAA,OAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA;cAAA,CAAA;cACA;cACA;cACA,OAAA,EAAA;YACA,CAAa;YACb;YACA;YACA;YACA;YAAA,CACA,GAAA,CAAA,aAAA,EAAA;cACA,OAAA,EAAA,IAAA,CAAA,4BAAA;cACA,OAAA,EAAA;YACA,CAAa,CAAA;YACb,IAAA,CAAA,OAAA,CAAA,iBAAA;YAAA;AACA;AACA;YACA,YAAA;cACA,OAAA,CAAA,gBAAA,CAAA,OAAA;cAAA;AACA;AACA;AACA;AACA;cACA,UAAA,MAAA,EAAA,IAAA,EAAA;gBACA,OAAA,CAAA,SAAA,CAAA,gBAAA,CAAA,IAAA,EAAA,MAAA,CAAA,OAAA,EAAA,MAAA,CAAA,OAAA,CAAA;cACA,CAAiB,CAAA;YACjB,CAAa,CAAA;UACb;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,aAAA,IAAA,EAAA;UACA,IAAA,CAAA,oBAAA,UAAA,CAAA,IAAA,CAAA;UACA,IAAA,IAAA,CAAA,oBAAA,CAAA,IAAA,KAAA,CAAA,EAAA;YACA,IAAA,CAAA,qBAAA,EAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,WAAA,IAAA,EAAA;UACA,OAAA,IAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,IAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,iBAAA,EAAA,EAAA;UACA,OAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,CAAA,IAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,QAAA;YAAA,OAAA,QAAA,CAAA,EAAA,KAAA,EAAA;UAAA,EAAA;QACA;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,cAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,QAAA;YAAA,OAAA,OAAA,CAAA,cAAA,CAAA,QAAA,CAAA;UAAA,EAAA;UACA,IAAA,CAAA,cAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,QAAA;YAAA,OAAA,OAAA,CAAA,mBAAA,CAAA,QAAA,CAAA;UAAA,EAAA;UACA,IAAA,CAAA,qBAAA,EAAA;UACA,IAAA,CAAA,WAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,SAAA,CAAA,QAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,sBAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,gBAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;AACA;UACA,UAAA,MAAA,EAAA,IAAA,EAAA;YACA,OAAA,CAAA,SAAA,CAAA,mBAAA,CAAA,IAAA,EAAA,MAAA,CAAA,OAAA,EAAA,MAAA,CAAA,OAAA,CAAA;UACA,CAAS,CAAA;UACT,IAAA,CAAA,gBAAA,CAAA,KAAA,EAAA;QACA;MAAA;MAAA,OAAA,gBAAA;IAAA;IAEA,gBAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,YAAA,CAAU;MAAA,IAAA,EAAA,CAAA;QAAU,UAAA,EAAA;MAAA,CAAqB;IAAA,CAAI,CACzD;IACA;IACA,gBAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAO,0CAAA,CAAA,QAAA;MAAM,CAAE,EACpB;QAAK,IAAA,EAAA,SAAA;QAAA,UAAA,EAAA,CAAA;UAAgC,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;UAAA,IAAA,EAAA,CAAS,4CAAA,CAAA,UAAA,CAAQ;QAAA,CAAI;MAAA,CAAA,CACvE;IAAA;IACA;IAAA,gBAAA,CAAA,eAAA,GAAsD,MAAA,CAAA,0CAAA,CAAA,oBAAA,CAAA,CAAkB,CAAA;MAAE,OAAA,EAAA,SAAA,wBAAA,CAAA,EAAA;QAA+C,OAAA,IAAA,gBAAA,CAA6B,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAC,0CAAA,CAAA,QAAA,CAAM,CAAA,EAAG,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAC,4CAAA,CAAA,UAAA,CAAQ,CAAA,CAAA;MAAG,CAAE;MAAA,KAAA,EAAA,gBAAA;MAAA,UAAA,EAAA;IAAA,CAA+C,CAAA;;IAE7O;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IACA,IAAA,cAAA,GAAA;MACA,kBAAA,EAAA,CAAA;MACA,+BAAA,EAAA;IACA,CAAA;IACA;AACA;AACA;IAFA,IAGA,QAAA;MACA;AACA;AACA;AACA;AACA;AACA;MACA,SAAA,SAAA,SAAA,EAAA,OAAA,EAAA,cAAA,EAAA,iBAAA,EAAA;QAAA,eAAA,OAAA,QAAA;QACA,IAAA,CAAA,SAAA,GAAA,SAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA;QACA,IAAA,CAAA,cAAA,GAAA,cAAA;QACA,IAAA,CAAA,iBAAA,GAAA,iBAAA;MACA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA,YAAA,CAAA,QAAA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,WAAA,OAAA,EAAA;UAAA,IAAA,MAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAA,cAAA;UACA,OAAA,IAAA,OAAA,CAAA,OAAA,EAAA,MAAA,EAAA,IAAA,CAAA,SAAA,EAAA,IAAA,CAAA,OAAA,EAAA,IAAA,CAAA,cAAA,EAAA,IAAA,CAAA,iBAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,eAAA,OAAA,EAAA;UACA,OAAA,IAAA,WAAA,CAAA,OAAA,EAAA,IAAA,CAAA,iBAAA,EAAA,IAAA,CAAA,SAAA,EAAA,IAAA,CAAA,OAAA,EAAA,IAAA,CAAA,cAAA,CAAA;QACA;MAAA;MAAA,OAAA,QAAA;IAAA;IAEA,QAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,YAAA,CAAU;MAAA,IAAA,EAAA,CAAA;QAAU,UAAA,EAAA;MAAA,CAAqB;IAAA,CAAI,CACzD;IACA;IACA,QAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAA,SAAA;QAAA,UAAA,EAAA,CAAA;UAAgC,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;UAAA,IAAA,EAAA,CAAS,4CAAA,CAAA,UAAA,CAAQ;QAAA,CAAI;MAAA,CAAG,EAC1E;QAAK,IAAA,EAAO,0CAAA,CAAA,QAAA;MAAM,CAAE,EACpB;QAAK,IAAA,EAAO,mDAAA,CAAA,eAAA;MAAa,CAAE,EAC3B;QAAK,IAAA,EAAA;MAAA,CAAA,CACL;IAAA;IACA;IAAA,QAAA,CAAA,eAAA,GAA8C,MAAA,CAAA,0CAAA,CAAA,oBAAA,CAAA,CAAkB,CAAA;MAAE,OAAA,EAAA,SAAA,gBAAA,CAAA,EAAA;QAAuC,OAAA,IAAA,QAAA,CAAqB,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAC,4CAAA,CAAA,UAAA,CAAQ,CAAA,EAAG,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAC,0CAAA,CAAA,QAAA,CAAM,CAAA,EAAG,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAC,mDAAA,CAAA,eAAA,CAAa,CAAA,EAAG,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAA,gBAAA,CAAA,CAAA;MAAoB,CAAE;MAAA,KAAA,EAAA,QAAA;MAAA,UAAA,EAAA;IAAA,CAAuC,CAAA;;IAElQ;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;IACA,IAAA,aAAA,GAAA,IAA0B,0CAAA,CAAA,gBAAA,CAAc,CAAA,eAAA,CAAA;IACxC;AACA;AACA;AACA;AACA;AACA;AACA;IACA,IAAA,uBAAA,GAAA,aAAA;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,IAAA,eAAA,GAAA,IAA4B,0CAAA,CAAA,gBAAA,CAAc,CAAA,iBAAA,CAAA;;IAE1C;AACA;AACA;AACA;IACA;AACA;AACA;IAFA,IAGA,aAAA;MACA;AACA;AACA;AACA;MACA,SAAA,cAAA,OAAA,EAAA,UAAA,EAAA;QAAA,eAAA,OAAA,aAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,aAAA,GAAA,IAAiC,iCAAA,CAAA,SAAA,CAAO,EAAA;QACxC,IAAA,CAAA,SAAA,GAAA,KAAA;QACA,IAAA,CAAA,WAAA,GAAA,UAAA;QACA,4BAAA,CAAA,OAAA,CAAA,aAAA,EAAA,KAAA,CAAA;MACA;MACA;AACA;AACA;AACA;MAHA,YAAA,CAAA,aAAA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UAAoB,OAAA,IAAA,CAAA,SAAA;QAAuB;QAC3C;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,KAAA,EAAA;UACA,IAAA,CAAA,SAAA,GAAyB,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAqB,CAAA,KAAA,CAAA;UAC9C,IAAA,CAAA,aAAA,CAAA,IAAA,CAAA,IAAA,CAAA;QACA;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,aAAA,CAAA,QAAA,EAAA;QACA;MAAA;MAAA,OAAA,aAAA;IAAA;IAEA,aAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;MAAA,IAAA,EAAA,CAAA;QACrB,QAAA,EAAA,iBAAA;QACA,IAAA,EAAA;UACA,OAAA,EAAA;QACA;MACA,CAAa;IAAA,CAAI,CACjB;IACA;IACA,aAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAO,0CAAA,CAAA,YAAA;MAAU,CAAE,EACxB;QAAK,IAAA,EAAA,SAAA;QAAA,UAAA,EAAA,CAAA;UAAgC,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;UAAA,IAAA,EAAA,CAAA,eAAA;QAAA,CAA4B,EAAA;UAAG,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE;MAAA,CAAA,CAClG;IAAA;IACA,aAAA,CAAA,cAAA,GAAA;MACA,QAAA,EAAA,CAAA;QAAgB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,uBAAA;MAAA,CAAoC;IAChE,CAAA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;IAJA,IAKA,kBAAA,gBAAA,YAAA;IACA;AACA;AACA;IACA,SAAA,mBAAA,WAAA,EAAA;MAAA,eAAA,OAAA,kBAAA;MACA,IAAA,CAAA,WAAA,GAAA,WAAA;IACA,CAAA;IAEA,kBAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;MAAA,IAAA,EAAA,CAAA;QACrB,QAAA,EAAA;MACA,CAAa;IAAA,CAAI,CACjB;IACA;IACA,kBAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAO,0CAAA,CAAA,aAAA;MAAW,CAAA,CACvB;IAAA;IACA,kBAAA,CAAA,cAAA,GAAA;MACA,IAAA,EAAA,CAAA;QAAY,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE;IAC1B,CAAA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;IAJA,IAKA,cAAA,gBAAA,YAAA;IACA;AACA;AACA;IACA,SAAA,eAAA,WAAA,EAAA;MAAA,eAAA,OAAA,cAAA;MACA,IAAA,CAAA,WAAA,GAAA,WAAA;IACA,CAAA;IAEA,cAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;MAAA,IAAA,EAAA,CAAA;QACrB,QAAA,EAAA;MACA,CAAa;IAAA,CAAI,CACjB;IACA;IACA,cAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAO,0CAAA,CAAA,aAAA;MAAW,CAAA,CACvB;IAAA;IACA,cAAA,CAAA,cAAA,GAAA;MACA,IAAA,EAAA,CAAA;QAAY,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE;IAC1B,CAAA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IACA,IAAA,eAAA,GAAA,IAA4B,0CAAA,CAAA,gBAAA,CAAc,CAAA,iBAAA,EAAA;MAC1C,UAAA,EAAA,MAAA;MACA,OAAA,EAAA;IACA,CAAC,CAAA;IACD;AACA;AACA;AACA;IACA,SAAA,uBAAA,CAAA,EAAA;MACA,OAAA;QAAY,kBAAA,EAAA,CAAA;QAAA,+BAAA,EAAA;MAAA,CAAA;IACZ;IACA;AACA;AACA;AACA;IAHA,IAIA,OAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA,SAAA,QAAA,OAAA,EAAA,aAAA,EAAA,SAAA,EAAA,OAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,IAAA,EAAA,QAAA,EAAA,kBAAA,EAAA;QAAA,IAAA,OAAA;QAAA,eAAA,OAAA,OAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA;QACA,IAAA,CAAA,aAAA,GAAA,aAAA;QACA,IAAA,CAAA,SAAA,GAAA,SAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA;QACA,IAAA,CAAA,iBAAA,GAAA,iBAAA;QACA,IAAA,CAAA,IAAA,GAAA,IAAA;QACA,IAAA,CAAA,kBAAA,GAAA,kBAAA;QACA,IAAA,CAAA,UAAA,GAAA,IAA8B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACrC;AACA;AACA;AACA;QACA,IAAA,CAAA,cAAA,GAAA,CAAA;QACA,IAAA,CAAA,SAAA,GAAA,KAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAA2B,0CAAA,CAAA,cAAA,CAAY,EAAA;QACvC;AACA;AACA;QACA,IAAA,CAAA,QAAA,GAAA,IAA4B,0CAAA,CAAA,cAAA,CAAY,EAAA;QACxC;AACA;AACA;QACA,IAAA,CAAA,KAAA,GAAA,IAAyB,0CAAA,CAAA,cAAA,CAAY,EAAA;QACrC;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAA2B,0CAAA,CAAA,cAAA,CAAY,EAAA;QACvC;AACA;AACA;QACA,IAAA,CAAA,MAAA,GAAA,IAA0B,0CAAA,CAAA,cAAA,CAAY,EAAA;QACtC;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAA2B,0CAAA,CAAA,cAAA,CAAY,EAAA;QACvC;AACA;AACA;AACA;QACA,IAAA,CAAA,KAAA,GAAA,IAAyB,iCAAA,CAAA,YAAA,CAAU;QAAA;AACnC;AACA;AACA;QACA,UAAA,QAAA,EAAA;UACA;UACA,IAAA,YAAA,GAAA,OAAA,CAAA,QAAA,CAAA,KAAA,CAAA,IAAA,CAA0D,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAG;UAAA;AAC7D;AACA;AACA;UACA,UAAA,UAAA;YAAA,OAAA;cACA,MAAA,EAAA,OAAA;cACA,eAAA,EAAA,UAAA,CAAA,eAAA;cACA,KAAA,EAAA,UAAA,CAAA,KAAA;cACA,KAAA,EAAA,UAAA,CAAA,KAAA;cACA,QAAA,EAAA,UAAA,CAAA;YACA,CAAa;UAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,QAAA,CAAA;UACb;YAAA;AACA;AACA;YACA,YAAA;cACA,YAAA,CAAA,WAAA,EAAA;YACA;UAAa;QACb,CAAS,CAAA;QACT,IAAA,CAAA,QAAA,GAAA,QAAA,CAAA,UAAA,CAAA,OAAA,EAAA,MAAA,CAAA;QACA,IAAA,CAAA,QAAA,CAAA,IAAA,GAAA,IAAA;QACA,IAAA,CAAA,WAAA,CAAA,IAAA,CAAA,QAAA,CAAA;QACA,IAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA;MACA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAPA,YAAA,CAAA,OAAA;QAAA,GAAA;QAAA,GAAA,EAQA,SAAA,IAAA,EAAA;UACA,OAAA,OAAA,IAAA,CAAA,eAAA,KAAA,QAAA,GAAA,IAAA,CAAA,eAAA,GAAA,gBAA+F,SAAA;QAC/F;QACA;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,QAAA,EAAA;UACA,IAAA,CAAA,eAAA,GAAA,QAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UACA,OAAA,IAAA,CAAA,SAAA,IAAA,IAAA,CAAA,aAAA,IAAA,IAAA,CAAA,aAAA,CAAA,QAAA;QACA;QACA;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,KAAA,EAAA;UACA,IAAA,CAAA,SAAA,GAAyB,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAqB,CAAA,KAAA,CAAA;UAC9C,IAAA,CAAA,QAAA,CAAA,QAAA,GAAA,IAAA,CAAA,SAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,sBAAA,EAAA;UACA,OAAA,IAAA,CAAA,QAAA,CAAA,qBAAA,EAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,eAAA,EAAA;UACA,OAAA,IAAA,CAAA,QAAA,CAAA,cAAA,EAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,MAAA,EAAA;UACA,IAAA,CAAA,QAAA,CAAA,KAAA,EAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,oBAAA,EAAA;UACA,OAAA,IAAA,CAAA,QAAA,CAAA,mBAAA,EAAA;QACA;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,gBAAA,EAAA;UAAA,IAAA,OAAA;UACA;UACA;UACA;UACA;UACA,IAAA,CAAA,OAAA,CAAA,QAAA,CAAA,YAAA,EAAA,CACA,IAAA,CAAkB,MAAA,CAAA,2CAAA,CAAA,MAAA,CAAA,CAAI,CAAA,CAAA,CAAA,EAAK,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CACpC,SAAA;UAAA;AACA;AACA;UACA,YAAA;YACA,OAAA,CAAA,kBAAA,EAAA;YACA;YACA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,IAAA,CAAuC,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,OAAA,CAAA,QAAA,CAAA;YAChD;YACY,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAG;YAAA;AACf;AACA;AACA;YACA,UAAA,OAAA,EAAA;cACA;cACA,IAAA,mBAAA,GAAA,OAAA,CACA,MAAA;cAAA;AACA;AACA;AACA;cACA,UAAA,MAAA;gBAAA,OAAA,MAAA,CAAA,WAAA,KAAA,OAAA;cAAA,EAAA,CACA,GAAA;cAAA;AACA;AACA;AACA;cACA,UAAA,MAAA;gBAAA,OAAA,MAAA,CAAA,OAAA;cAAA,EAAA;cACA,OAAA,CAAA,QAAA,CAAA,WAAA,CAAA,mBAAA,CAAA;YACA,CAAa,CAAA;YACb;YACY,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS;YAAA;AACrB;AACA;AACA;YACA,UAAA,OAAA,EAAA;cACA,OAAuB,MAAA,CAAA,iCAAA,CAAA,OAAA,CAAA,CAAK,CAAA,KAAA,SAAA,kBAAA,CAAA,OAAA,CAAA,GAAA;cAAA;AAC5B;AACA;AACA;cACA,UAAA,IAAA;gBAAA,OAAA,IAAA,CAAA,aAAA;cAAA,EAAA,EAAA;YACA,CAAa,CAAA,EAAI,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA,CAAA,SAAA;YAAA;AAC1B;AACA;AACA;YACA,UAAA,cAAA,EAAA;cACA;cACA;cACA,IAAA,OAAA,GAAA,OAAA,CAAA,QAAA;cACA;cACA,IAAA,MAAA,GAAA,cAAA,CAAA,OAAA,CAAA,aAAA;cACA,cAAA,CAAA,QAAA,GAAA,OAAA,CAAA,aAAA,CAAA,MAAA,CAAA,GAAA,OAAA,CAAA,YAAA,CAAA,MAAA,CAAA;YACA,CAAa,CAAA;YACb,IAAA,OAAA,CAAA,gBAAA,EAAA;cACA,OAAA,CAAA,QAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA;YACA;UACA,CAAS,CAAA;QACT;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,YAAA,OAAA,EAAA;UACA;UACA,IAAA,kBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;UACA;UACA,IAAA,cAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;UACA;UACA;UACA,IAAA,kBAAA,IAAA,CAAA,kBAAA,CAAA,WAAA,EAAA;YACA,IAAA,CAAA,kBAAA,EAAA;UACA;UACA;UACA,IAAA,cAAA,IAAA,CAAA,cAAA,CAAA,WAAA,IAAA,IAAA,CAAA,gBAAA,EAAA;YACA,IAAA,CAAA,QAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,gBAAA,CAAA;UACA;QACA;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,UAAA,CAAA,IAAA,EAAA;UACA,IAAA,CAAA,UAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,QAAA,CAAA,OAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,mBAAA,EAAA;UACA;UACA,IAAA,OAAA,GAAA,IAAA,CAAA,OAAA,CAAA,aAAA;UACA;UACA,IAAA,WAAA,GAAA,IAAA,CAAA,mBAAA,GACA,0BAAA,CAAA,OAAA,EAAA,IAAA,CAAA,mBAAA,CAAA,GAAA,OAAA;UACA,IAAA,WAAA,IAAA,WAAA,CAAA,QAAA,KAAA,IAAA,CAAA,SAAA,CAAA,YAAA,EAAA;YACA,MAAA,KAAA,CAAA,6EAAA,MAAA,CAC0C,WAAA,CAAA,QAAA,QAAqB,CAAA;UAC/D;UACA,IAAA,CAAA,QAAA,CAAA,eAAA,CAAA,WAAA,IAAA,OAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,oBAAA,EAAA;UACA;UACA,IAAA,QAAA,GAAA,IAAA,CAAA,eAAA;UACA,IAAA,CAAA,QAAA,EAAA;YACA,OAAA,IAAA;UACA;UACA,IAAA,OAAA,QAAA,KAAA,QAAA,EAAA;YACA,OAAA,0BAAA,CAAA,IAAA,CAAA,OAAA,CAAA,aAAA,EAAA,QAAA,CAAA;UACA;UACA;UACA,IAAA,OAAA,GAAwB,MAAA,CAAA,kDAAA,CAAA,eAAA,CAAA,CAAa,CAAA,QAAA,CAAA;UACrC,IAAY,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAS,EAAA,IAAA,CAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA,CAAA,aAAA,CAAA,EAAA;YACrB,MAAA,KAAA,CAAA,0EAAA,CAAA;UACA;UACA,OAAA,OAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,YAAA,GAAA,EAAA;UAAA,IAAA,OAAA;UACA,GAAA,CAAA,aAAA,CAAA,SAAA;UAAA;AACA;AACA;UACA,YAAA;YACA,IAAA,CAAA,GAAA,CAAA,UAAA,EAAA,EAAA;cACA;cACA,IAAA,GAAA,GAAA,OAAA,CAAA,IAAA;cACA;cACA,IAAA,WAAA,GAAA,OAAA,CAAA,oBAAA,GAAA;gBACA,QAAA,EAAA,OAAA,CAAA,oBAAA,CAAA,WAAA;gBACA,OAAA,EAAA,OAAA,CAAA,oBAAA,CAAA,IAAA;gBACA,aAAA,EAAA,OAAA,CAAA;cACA,CAAiB,GAAA,IAAA;cACjB;cACA,IAAA,OAAA,GAAA,OAAA,CAAA,gBAAA,GAAA;gBACA,QAAA,EAAA,OAAA,CAAA,gBAAA,CAAA,WAAA;gBACA,OAAA,EAAA,OAAA,CAAA,gBAAA,CAAA,IAAA;gBACA,aAAA,EAAA,OAAA,CAAA;cACA,CAAiB,GAAA,IAAA;cACjB,GAAA,CAAA,QAAA,GAAA,OAAA,CAAA,QAAA;cACA,GAAA,CAAA,QAAA,GAAA,OAAA,CAAA,QAAA;cACA,GAAA,CAAA,cAAA,GAAqC,MAAA,CAAA,kDAAA,CAAA,sBAAA,CAAA,CAAoB,CAAA,OAAA,CAAA,cAAA,CAAA;cACzD,GAAA,CAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA;cACA,GAAA,CACA,mBAAA,CAAA,OAAA,CAAA,mBAAA,EAAA,CAAA,CACA,uBAAA,CAAA,WAAA,CAAA,CACA,mBAAA,CAAA,OAAA,CAAA;cACA,IAAA,GAAA,EAAA;gBACA,GAAA,CAAA,aAAA,CAAA,GAAA,CAAA,KAAA,CAAA;cACA;YACA;UACA,CAAS,CAAA;QACT;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,cAAA,GAAA,EAAA;UAAA,IAAA,OAAA;UACA,GAAA,CAAA,OAAA,CAAA,SAAA;UAAA;AACA;AACA;UACA,YAAA;YACA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA;cAA+B,MAAA,EAAA;YAAA,CAAe,CAAA;YAC9C;YACA;YACA,OAAA,CAAA,kBAAA,CAAA,YAAA,EAAA;UACA,CAAS,CAAA;UACT,GAAA,CAAA,QAAA,CAAA,SAAA;UAAA;AACA;AACA;UACA,YAAA;YACA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA;cAAgC,MAAA,EAAA;YAAA,CAAe,CAAA;UAC/C,CAAS,CAAA;UACT,GAAA,CAAA,KAAA,CAAA,SAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAA;YACA,OAAA,CAAA,KAAA,CAAA,IAAA,CAAA;cAA6B,MAAA,EAAA,OAAA;cAAA,QAAA,EAAA,KAAA,CAAA;YAAA,CAAyC,CAAA;YACtE;YACA;YACA,OAAA,CAAA,kBAAA,CAAA,YAAA,EAAA;UACA,CAAS,CAAA;UACT,GAAA,CAAA,OAAA,CAAA,SAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAA;YACA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA;cACA,SAAA,EAAA,KAAA,CAAA,SAAA,CAAA,IAAA;cACA,IAAA,EAAA,OAAA;cACA,YAAA,EAAA,KAAA,CAAA;YACA,CAAa,CAAA;UACb,CAAS,CAAA;UACT,GAAA,CAAA,MAAA,CAAA,SAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAA;YACA,OAAA,CAAA,MAAA,CAAA,IAAA,CAAA;cACA,SAAA,EAAA,KAAA,CAAA,SAAA,CAAA,IAAA;cACA,IAAA,EAAA;YACA,CAAa,CAAA;UACb,CAAS,CAAA;UACT,GAAA,CAAA,OAAA,CAAA,SAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAA;YACA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA;cACA,aAAA,EAAA,KAAA,CAAA,aAAA;cACA,YAAA,EAAA,KAAA,CAAA,YAAA;cACA,iBAAA,EAAA,KAAA,CAAA,iBAAA,CAAA,IAAA;cACA,SAAA,EAAA,KAAA,CAAA,SAAA,CAAA,IAAA;cACA,sBAAA,EAAA,KAAA,CAAA,sBAAA;cACA,IAAA,EAAA,OAAA;cACA,QAAA,EAAA,KAAA,CAAA;YACA,CAAa,CAAA;UACb,CAAS,CAAA;QACT;MAAA;MAAA,OAAA,OAAA;IAAA;IAEA,OAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;MAAA,IAAA,EAAA,CAAA;QACrB,QAAA,EAAA,WAAA;QACA,QAAA,EAAA,SAAA;QACA,IAAA,EAAA;UACA,OAAA,EAAA,UAAA;UACA,2BAAA,EAAA,UAAA;UACA,2BAAA,EAAA;QACA,CAAiB;QACjB,SAAA,EAAA,CAAA;UAA6B,OAAA,EAAA,eAAA;UAAA,WAAA,EAAA;QAAA,CAAiD;MAC9E,CAAa;IAAA,CAAI,CACjB;IACA;IACA,OAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAO,0CAAA,CAAA,YAAA;MAAU,CAAE,EACxB;QAAK,IAAA,EAAA,SAAA;QAAA,UAAA,EAAA,CAAA;UAAgC,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;UAAA,IAAA,EAAA,CAAA,aAAA;QAAA,CAA0B,EAAA;UAAG,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE,EAAA;UAAG,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE;MAAA,CAAG,EACvH;QAAK,IAAA,EAAA,SAAA;QAAA,UAAA,EAAA,CAAA;UAAgC,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;UAAA,IAAA,EAAA,CAAS,4CAAA,CAAA,UAAA,CAAQ;QAAA,CAAI;MAAA,CAAG,EAC1E;QAAK,IAAA,EAAO,0CAAA,CAAA,QAAA;MAAM,CAAE,EACpB;QAAK,IAAA,EAAO,0CAAA,CAAA,kBAAA;MAAgB,CAAE,EAC9B;QAAK,IAAA,EAAA,SAAA;QAAA,UAAA,EAAA,CAAA;UAAgC,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;UAAA,IAAA,EAAA,CAAA,eAAA;QAAA,CAA4B;MAAA,CAAG,EACjF;QAAK,IAAA,EAAO,8CAAA,CAAA,gBAAA,CAAc;QAAA,UAAA,EAAA,CAAA;UAAgB,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE;MAAA,CAAG,EAC9D;QAAK,IAAA,EAAA;MAAA,CAAiB,EACtB;QAAK,IAAA,EAAO,0CAAA,CAAA,mBAAA;MAAiB,CAAA,CAC7B;IAAA;IACA,OAAA,CAAA,cAAA,GAAA;MACA,QAAA,EAAA,CAAA;QAAgB,IAAA,EAAO,0CAAA,CAAA,iBAAA,CAAe;QAAA,IAAA,EAAA,CAAA,aAAA,EAAA;UAAyB,WAAA,EAAA;QAAA,CAAoB;MAAA,CAAI,CAAA;MACvF,gBAAA,EAAA,CAAA;QAAwB,IAAA,EAAO,0CAAA,CAAA,cAAA,CAAY;QAAA,IAAA,EAAA,CAAA,cAAA,EAAA;UAA0B,UAAA;QAAA,CAAgB;MAAA,CAAI,CAAA;MACzF,oBAAA,EAAA,CAAA;QAA4B,IAAA,EAAO,0CAAA,CAAA,cAAA,CAAY;QAAA,IAAA,EAAA,CAAA,kBAAA,EAAA;UAA8B,UAAA;QAAA,CAAgB;MAAA,CAAI,CAAA;MACjG,IAAA,EAAA,CAAA;QAAY,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,aAAA;MAAA,CAA0B,CAAA;MAClD,QAAA,EAAA,CAAA;QAAgB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,iBAAA;MAAA,CAA8B,CAAA;MAC1D,mBAAA,EAAA,CAAA;QAA2B,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,oBAAA;MAAA,CAAiC,CAAA;MACxE,eAAA,EAAA,CAAA;QAAuB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,iBAAA;MAAA,CAA8B,CAAA;MACjE,cAAA,EAAA,CAAA;QAAsB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,mBAAA;MAAA,CAAgC,CAAA;MAClE,gBAAA,EAAA,CAAA;QAAwB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,yBAAA;MAAA,CAAsC,CAAA;MAC1E,QAAA,EAAA,CAAA;QAAgB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,iBAAA;MAAA,CAA8B,CAAA;MAC1D,iBAAA,EAAA,CAAA;QAAyB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,0BAAA;MAAA,CAAuC,CAAA;MAC5E,OAAA,EAAA,CAAA;QAAe,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,gBAAA;MAAA,CAA6B,CAAA;MACzD,QAAA,EAAA,CAAA;QAAgB,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,iBAAA;MAAA,CAA8B,CAAA;MAC3D,KAAA,EAAA,CAAA;QAAa,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,cAAA;MAAA,CAA2B,CAAA;MACrD,OAAA,EAAA,CAAA;QAAe,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,gBAAA;MAAA,CAA6B,CAAA;MACzD,MAAA,EAAA,CAAA;QAAc,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,eAAA;MAAA,CAA4B,CAAA;MACvD,OAAA,EAAA,CAAA;QAAe,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,gBAAA;MAAA,CAA6B,CAAA;MACzD,KAAA,EAAA,CAAA;QAAa,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,cAAA;MAAA,CAA2B;IACrD,CAAA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,0BAAA,CAAA,OAAA,EAAA,QAAA,EAAA;MACA;MACA,IAAA,cAAA,GAAA,gBAAuC,OAAA,CAAA,aAAA;MACvC,OAAA,cAAA,EAAA;QACA;QACA,IAAA,cAAA,CAAA,OAAA,GAAA,cAAA,CAAA,OAAA,CAAA,QAAA,CAAA,GACA,gBAA2B,cAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,EAAA;UAC3B,OAAA,cAAA;QACA;QACA,cAAA,GAAA,cAAA,CAAA,aAAA;MACA;MACA,OAAA,IAAA;IACA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IANA,IAOA,gBAAA;MACA,SAAA,iBAAA,EAAA;QAAA,eAAA,OAAA,gBAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,MAAA,GAAA,IAAA,GAAA,EAAA;QACA,IAAA,CAAA,SAAA,GAAA,KAAA;MACA;MACA;AACA;AACA;AACA;MAHA,YAAA,CAAA,gBAAA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UAAoB,OAAA,IAAA,CAAA,SAAA;QAAuB;QAC3C;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,KAAA,EAAA;UACA,IAAA,CAAA,SAAA,GAAyB,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAqB,CAAA,KAAA,CAAA;QAC9C;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA;QACA;MAAA;MAAA,OAAA,gBAAA;IAAA;IAEA,gBAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;MAAA,IAAA,EAAA,CAAA;QACrB,QAAA,EAAA,oBAAA;QACA,QAAA,EAAA;MACA,CAAa;IAAA,CAAI,CACjB;IACA,gBAAA,CAAA,cAAA,GAAA;MACA,QAAA,EAAA,CAAA;QAAgB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,0BAAA;MAAA,CAAuC;IACnE,CAAA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IACA,IAAA,kBAAA,GAAA,CAAA;IACA,IAAA,EAAA,GAAA,SAAA;IACA;IACA;IACA;IACA;AACA;AACA;AACA;IAHA,IAIA,WAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA,SAAA,YAAA,OAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,IAAA,EAAA,MAAA,EAAA;QAAA,IAAA,OAAA;QAAA,eAAA,OAAA,WAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA;QACA,IAAA,CAAA,kBAAA,GAAA,kBAAA;QACA,IAAA,CAAA,IAAA,GAAA,IAAA;QACA,IAAA,CAAA,MAAA,GAAA,MAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,UAAA,GAAA,IAA8B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACrC;AACA;AACA;AACA;AACA;QACA,IAAA,CAAA,WAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,WAAA,GAAA,UAAA;QACA;AACA;AACA;AACA;QACA,IAAA,CAAA,EAAA,oBAAA,MAAA,CAAmC,kBAAA,EAAA,CAAqB;QACxD,IAAA,CAAA,SAAA,GAAA,KAAA;QACA,IAAA,CAAA,gBAAA,GAAA,KAAA;QACA;AACA;AACA;AACA;QACA,IAAA,CAAA,cAAA;QAAA;AACA;AACA;QACA;UAAA,OAAA,IAAA;QAAA,CAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,kBAAA,GAAA,KAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAA2B,0CAAA,CAAA,cAAA,CAAY,EAAA;QACvC;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAA2B,0CAAA,CAAA,cAAA,CAAY,EAAA;QACvC;AACA;AACA;AACA;QACA,IAAA,CAAA,MAAA,GAAA,IAA0B,0CAAA,CAAA,cAAA,CAAY,EAAA;QACtC;AACA;AACA;QACA,IAAA,CAAA,MAAA,GAAA,IAA0B,0CAAA,CAAA,cAAA,CAAY,EAAA;QACtC,IAAA,CAAA,YAAA,GAAA,QAAA,CAAA,cAAA,CAAA,OAAA,CAAA;QACA,IAAA,CAAA,YAAA,CAAA,IAAA,GAAA,IAAA;QACA,IAAA,CAAA,YAAA,CAAA,cAAA;QAAA;AACA;AACA;AACA;AACA;QACA,UAAA,IAAA,EAAA,IAAA,EAAA;UACA,OAAA,OAAA,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA,IAAA,CAAA;QACA,CAAS;QACT,IAAA,CAAA,WAAA,CAAA,IAAA,CAAA,YAAA,CAAA;QACA,IAAA,CAAA,aAAA,CAAA,IAAA,CAAA,YAAA,CAAA;QACA,WAAA,CAAA,UAAA,CAAA,IAAA,CAAA,IAAA,CAAA;QACA,IAAA,MAAA,EAAA;UACA,MAAA,CAAA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA;QACA;MACA;MACA;AACA;AACA;AACA;MAHA,YAAA,CAAA,WAAA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UACA,OAAA,IAAA,CAAA,SAAA,IAAA,CAAA,CAAA,IAAA,CAAA,MAAA,IAAA,IAAA,CAAA,MAAA,CAAA,QAAA;QACA;QACA;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,KAAA,EAAA;UACA,IAAA,CAAA,SAAA,GAAyB,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAqB,CAAA,KAAA,CAAA;QAC9C;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UAA2B,OAAA,IAAA,CAAA,gBAAA;QAA8B;QACzD;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,KAAA,EAAA;UACA,IAAA,CAAA,gBAAA,GAAgC,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAqB,CAAA,KAAA,CAAA;QACrD;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,mBAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,WAAA,CAAA,OAAA,CACA,IAAA,CAAkB,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,IAAA,CAAA,WAAA,CAAA,EAAoB,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CACxD,SAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAA;YACA,OAAA,CAAA,YAAA,CAAA,SAAA,CAAA,KAAA,CAAA,GAAA;YAAA;AACA;AACA;AACA;YACA,UAAA,IAAA;ciBAAA,EAAA,sBAAA,EAAA;UACA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,CAAA,QAAA,EAAA,YAAA,EAAA,gBAA2E,iBAAA,CAAA,YAAA,EAAA,sBAAA,CAAA;QAC3E;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,MAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA;UACA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,IAAA,CAAA,QAAA,EAAA,QAAA,EAAA,QAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,KAAA,IAAA,EAAA;UACA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,aAAA,IAAA,EAAA;UACA,OAAA,IAAA,CAAA,YAAA,CAAA,YAAA,CAAA,IAAA,CAAA,QAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAPA;QAAA,GAAA;QAAA,KAAA,EAQA,SAAA,UAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,YAAA,EAAA;UACA,OAAA,IAAA,CAAA,YAAA,CAAA,SAAA,CAAA,IAAA,CAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,YAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAPA;QAAA,GAAA;QAAA,KAAA,EAQA,SAAA,iCAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA;UACA;UACA,IAAA,MAAA,GAAA,IAAA,CAAA,YAAA,CAAA,gCAAA,CAAA,IAAA,CAAA,QAAA,EAAA,CAAA,EAAA,CAAA,CAAA;UACA,OAAA,MAAA,GAAA,MAAA,CAAA,IAAA,GAAA,IAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,iBAAA,CAAA,EAAA,CAAA,EAAA;UACA,OAAA,IAAA,CAAA,YAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,CAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,YAAA,GAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,IAAA,CAAA,IAAA,EAAA;YACA,IAAA,CAAA,IAAA,CAAA,MAAA,CACA,IAAA,CAAsB,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,EAAmB,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CAC3D,SAAA;YAAA;AACA;AACA;AACA;YACA,UAAA,KAAA;cAAA,OAAA,GAAA,CAAA,aAAA,CAAA,KAAA,CAAA;YAAA,EAAA;UACA;UACA,GAAA,CAAA,aAAA,CAAA,SAAA;UAAA;AACA;AACA;UACA,YAAA;YACA;YACA,IAAA,QAAA,GAA6B,MAAA,CAAA,kDAAA,CAAA,aAAA,CAAA,CAAW,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA,GAAA;YAAA;AACxC;AACA;AACA;YACA,UAAA,IAAA,EAAA;cACA,OAAA,OAAA,IAAA,KAAA,QAAA,GACA,gBAAkC,WAAA,CAAA,UAAA,CAAA,IAAA;cAAA;AAClC;AACA;AACA;cACA,UAAA,IAAA;gBAAA,OAAA,IAAA,CAAA,EAAA,KAAA,IAAA;cAAA,EAAA,GAAA,IAAA;YACA,CAAa,CAAA;YACb,IAAA,OAAA,CAAA,MAAA,EAAA;cACA,OAAA,CAAA,MAAA,CAAA,MAAA,CAAA,OAAA;cAAA;AACA;AACA;AACA;cACA,UAAA,IAAA,EAAA;gBACA,IAAA,QAAA,CAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAA;kBACA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;gBACA;cACA,CAAiB,CAAA;YACjB;YACA,GAAA,CAAA,QAAA,GAAA,OAAA,CAAA,QAAA;YACA,GAAA,CAAA,QAAA,GAAA,OAAA,CAAA,QAAA;YACA,GAAA,CAAA,eAAA,GAAA,OAAA,CAAA,eAAA;YACA,GAAA,CAAA,kBAAA,GAAA,OAAA,CAAA,kBAAA;YACA,GAAA,CACA,WAAA,CAAA,QAAA,CAAA,MAAA;YAAA;AACA;AACA;AACA;YACA,UAAA,IAAA;cAAA,OAAA,IAAA,IAAA,IAAA,KAAA,OAAA;YAAA,EAAA,CAAA,GAAA;YAAA;AACA;AACA;AACA;YACA,UAAA,IAAA;cAAA,OAAA,IAAA,CAAA,YAAA;YAAA,EAAA,CAAA,CACA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA;UACA,CAAS,CAAA;QACT;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,cAAA,GAAA,EAAA;UAAA,IAAA,OAAA;UACA,GAAA,CAAA,aAAA,CAAA,SAAA;UAAA;AACA;AACA;UACA,YAAA;YACA,OAAA,CAAA,kBAAA,CAAA,YAAA,EAAA;UACA,CAAS,CAAA;UACT,GAAA,CAAA,OAAA,CAAA,SAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAA;YACA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA;cACA,SAAA,EAAA,OAAA;cACA,IAAA,EAAA,KAAA,CAAA,IAAA,CAAA,IAAA;cACA,YAAA,EAAA,KAAA,CAAA;YACA,CAAa,CAAA;UACb,CAAS,CAAA;UACT,GAAA,CAAA,MAAA,CAAA,SAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAA;YACA,OAAA,CAAA,MAAA,CAAA,IAAA,CAAA;cACA,SAAA,EAAA,OAAA;cACA,IAAA,EAAA,KAAA,CAAA,IAAA,CAAA;YACA,CAAa,CAAA;YACb,OAAA,CAAA,kBAAA,CAAA,YAAA,EAAA;UACA,CAAS,CAAA;UACT,GAAA,CAAA,MAAA,CAAA,SAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAA;YACA,OAAA,CAAA,MAAA,CAAA,IAAA,CAAA;cACA,aAAA,EAAA,KAAA,CAAA,aAAA;cACA,YAAA,EAAA,KAAA,CAAA,YAAA;cACA,SAAA,EAAA,OAAA;cACA,IAAA,EAAA,KAAA,CAAA,IAAA,CAAA;YACA,CAAa,CAAA;UACb,CAAS,CAAA;UACT,GAAA,CAAA,OAAA,CAAA,SAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAA;YACA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA;cACA,aAAA,EAAA,KAAA,CAAA,aAAA;cACA,YAAA,EAAA,KAAA,CAAA,YAAA;cACA,iBAAA,EAAA,KAAA,CAAA,iBAAA,CAAA,IAAA;cACA,SAAA,EAAA,KAAA,CAAA,SAAA,CAAA,IAAA;cACA,IAAA,EAAA,KAAA,CAAA,IAAA,CAAA,IAAA;cACA,sBAAA,EAAA,KAAA,CAAA,sBAAA;cACA,QAAA,EAAA,KAAA,CAAA;YACA,CAAa,CAAA;YACb;YACA;YACA,OAAA,CAAA,kBAAA,CAAA,YAAA,EAAA;UACA,CAAS,CAAA;QACT;MAAA;MAAA,OAAA,WAAA;IAAA;IAEA;AACA;AACA;IACA,WAAA,CAAA,UAAA,GAAA,EAAA;IACA,WAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;MAAA,IAAA,EAAA,CAAA;QACrB,QAAA,EAAA,8BAAA;QACA,QAAA,EAAA,aAAA;QACA,SAAA,EAAA;QACA;QACA;UAAqB,OAAA,EAAA,gBAAA;UAAA,QAAA,EAAA;QAAA,CAA0C,EAC/D;UAAqB,OAAA,EAAA,uBAAA;UAAA,WAAA,EAAA;QAAA,CAA6D,CAClF;QACA,IAAA,EAAA;UACA,OAAA,EAAA,eAAA;UACA,MAAA,EAAA,IAAA;UACA,gCAAA,EAAA,UAAA;UACA,gCAAA,EAAA,2BAAA;UACA,iCAAA,EAAA;QACA;MACA,CAAa;IAAA,CAAI,CACjB;IACA;IACA,WAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAO,0CAAA,CAAA,YAAA;MAAU,CAAE,EACxB;QAAK,IAAA,EAAA;MAAA,CAAiB,EACtB;QAAK,IAAA,EAAO,0CAAA,CAAA,mBAAA;MAAiB,CAAE,EAC/B;QAAK,IAAA,EAAO,8CAAA,CAAA,gBAAA,CAAc;QAAA,UAAA,EAAA,CAAA;UAAgB,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE;MAAA,CAAG,EAC9D;QAAK,IAAA,EAAA,gBAAA;QAAA,UAAA,EAAA,CAAA;UAAuC,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE,EAAA;UAAG,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE;MAAA,CAAA,CACjF;IAAA;IACA,WAAA,CAAA,cAAA,GAAA;MACA,WAAA,EAAA,CAAA;QAAmB,IAAA,EAAO,0CAAA,CAAA,iBAAA,CAAe;QAAA,IAAA,EAAA,CAAS,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAU;QAAA;AAC5D;AACA;QACA;UAAA,OAAA,OAAA;QAAA,EAAA,EAAA;UACA;UACA;UACA,WAAA,EAAA;QACA,CAAiB;MAAA,CAAI,CAAA;MACrB,WAAA,EAAA,CAAA;QAAmB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,wBAAA;MAAA,CAAqC,CAAA;MACpE,IAAA,EAAA,CAAA;QAAY,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,iBAAA;MAAA,CAA8B,CAAA;MACtD,WAAA,EAAA,CAAA;QAAmB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,wBAAA;MAAA,CAAqC,CAAA;MACpE,EAAA,EAAA,CAAA;QAAU,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE,CAAA;MACxB,QAAA,EAAA,CAAA;QAAgB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,qBAAA;MAAA,CAAkC,CAAA;MAC9D,QAAA,EAAA,CAAA;QAAgB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,qBAAA;MAAA,CAAkC,CAAA;MAC9D,eAAA,EAAA,CAAA;QAAuB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,4BAAA;MAAA,CAAyC,CAAA;MAC5E,cAAA,EAAA,CAAA;QAAsB,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,2BAAA;MAAA,CAAwC,CAAA;MAC1E,kBAAA,EAAA,CAAA;QAA0B,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAK;QAAA,IAAA,EAAA,CAAA,+BAAA;MAAA,CAA4C,CAAA;MAClF,OAAA,EAAA,CAAA;QAAe,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,oBAAA;MAAA,CAAiC,CAAA;MAC7D,OAAA,EAAA,CAAA;QAAe,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,oBAAA;MAAA,CAAiC,CAAA;MAC7D,MAAA,EAAA,CAAA;QAAc,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,mBAAA;MAAA,CAAgC,CAAA;MAC3D,MAAA,EAAA,CAAA;QAAc,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;QAAA,IAAA,EAAA,CAAA,mBAAA;MAAA,CAAgC;IAC3D,CAAA;;IAEA;AACA;AACA;AACA;IAHA,IAIA,cAAA,gBAAA,YAAA,UAAA,eAAA;MAAA,eAAA,OAAA,cAAA;IAAA;IAEA,cAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,UAAA,CAAQ;MAAA,IAAA,EAAA,CAAA;QACpB,YAAA,EAAA,CACA,WAAA,EACA,gBAAA,EACA,OAAA,EACA,aAAA,EACA,cAAA,EACA,kBAAA,CACA;QACA,OAAA,EAAA,CACA,WAAA,EACA,gBAAA,EACA,OAAA,EACA,aAAA,EACA,cAAA,EACA,kBAAA,CACA;QACA,SAAA,EAAA,CACA,QAAA;MAEA,CAAa;IAAA,CAAI,CACjB;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;;IAGA;;;;;;;;;;;;;;IC77HA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,UAAA,EAAA,YAAA;MAAA,OAAA,QAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gBAAA,EAAA,YAAA;MAAA,OAAA,cAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,wBAAA,EAAA,YAAA;MAAA,OAAA,sBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,+BAAA,EAAA,YAAA;MAAA,OAAA,6BAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,iCAAA,EAAA,YAAA;MAAA,OAAA,+BAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,wBAAA,EAAA,YAAA;MAAA,OAAA,sBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,sBAAA,EAAA,YAAA;MAAA,OAAA,oBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,mBAAA,EAAA,YAAA;MAAA,OAAA,iBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,oBAAA,EAAA,YAAA;MAAA,OAAA,kBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,IAAA,0CAAA,GAAA,mBAAA,EAAA,oBAAA,+CAAA,CAAA;IAAA;IAAA,IAAA,4CAAA,GAAA,mBAAA,EAAA,sBAAA,mDAAA,CAAA;IAAA;AACA;AACA;AACA;AACA;AACA;AACA;;IAIA;AACA;AACA;AACA;IACA;IACA;IACA;IACA,IAAA,kBAAA;IACA;IACA;IACA;IACA;IACA;IACA,IAAA;MACA,kBAAA,GAAA,OAAA,IAAA,KAAA,WAAA,IAAA,gBAAwE,IAAA,CAAA,eAAA;IACxE,CAAA,CACA,OAAA,EAAA,EAAA;MACA,kBAAA,GAAA,KAAA;IACA;IACA;AACA;AACA;AACA;IAHA,IAIA,QAAA,gBAAA,YAAA;IACA;AACA;AACA;AACA;IACA,SAAA,SAAA,WAAA,EAAA;MAAA,eAAA,OAAA,QAAA;MACA,IAAA,CAAA,WAAA,GAAA,WAAA;MACA;AACA;AACA;AACA;AACA;AACA;MACA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA,WAAA,GACY,MAAA,CAAA,4CAAA,CAAA,mBAAA,CAAA,CAAiB,CAAA,IAAA,CAAA,WAAA,CAAA,GAAA,OAAA,QAAA,KAAA,QAAA,IAAA,CAAA,CAAA,QAAA;MAC7B;AACA;AACA;MACA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA,SAAA,IAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA;MACA;AACA;AACA;MACA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA,SAAA,IAAA,iBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA;MACA;AACA;AACA;MACA;MACA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,SAAA,IAAA,CAAA,EAAA,CAAA,gBAA0D,MAAA,CAAA,MAAA,IAAA,kBAAA,CAAA,IAC1D,OAAA,GAAA,KAAA,WAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA,IAAA,CAAA,OAAA;MACA;AACA;AACA;MACA;MACA;MACA,IAAA,CAAA,MAAA,GAAA,IAAA,CAAA,SAAA,IACA,cAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA,IAAA,CAAA,OAAA;MACA;AACA;AACA;MACA,IAAA,CAAA,GAAA,GAAA,IAAA,CAAA,SAAA,IAAA,kBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,IACA,EAAA,UAAA,IAAA,MAAA,CAAA;MACA;AACA;AACA;MACA;MACA;MACA;MACA;MACA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA,SAAA,IAAA,sBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA;MACA;AACA;AACA;MACA;MACA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA,SAAA,IAAA,UAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA;MACA;AACA;AACA;MACA;MACA;MACA;MACA,IAAA,CAAA,MAAA,GAAA,IAAA,CAAA,SAAA,IAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,IAAA,IAAA,CAAA,MAAA;IACA,CAAA;IAEA,QAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,YAAA,CAAU;MAAA,IAAA,EAAA,CAAA;QAAU,UAAA,EAAA;MAAA,CAAqB;IAAA,CAAI,CACzD;IACA;IACA,QAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAA,MAAA;QAAA,UAAA,EAAA,CAAA;UAA6B,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE,EAAA;UAAG,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;UAAA,IAAA,EAAA,CAAS,0CAAA,CAAA,aAAA,CAAW;QAAA,CAAI;MAAA,CAAA,CAC3F;IAAA;IACA;IAAA,QAAA,CAAA,eAAA,GAA8C,MAAA,CAAA,0CAAA,CAAA,oBAAA,CAAA,CAAkB,CAAA;MAAE,OAAA,EAAA,SAAA,gBAAA,CAAA,EAAA;QAAuC,OAAA,IAAA,QAAA,CAAqB,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAC,0CAAA,CAAA,aAAA,CAAW,EAAA,CAAA,CAAA,CAAA;MAAM,CAAE;MAAA,KAAA,EAAA,QAAA;MAAA,UAAA,EAAA;IAAA,CAAuC,CAAA;;IAEjM;AACA;AACA;AACA;IAHA,IAIA,cAAA,gBAAA,YAAA,UAAA,eAAA;MAAA,eAAA,OAAA,cAAA;IAAA;IAEA,cAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,UAAA,CAAQ;MAAA,IAAA,EAAA,CAAA,CAAA,CAAW;IAAA,CAAI,CACnC;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;IACA,IAAA,mBAAA;IACA;AACA;AACA;AACA;IACA,IAAA,mBAAA,GAAA;IACA;IACA;IACA;IACA;IACA,OAAA,EACA,QAAA,EACA,UAAA,EACA,MAAA,EACA,gBAAA,EACA,OAAA,EACA,MAAA,EACA,QAAA,EACA,OAAA,EACA,OAAA,EACA,QAAA,EACA,UAAA,EACA,OAAA,EACA,OAAA,EACA,OAAA,EACA,QAAA,EACA,QAAA,EACA,KAAA,EACA,MAAA,EACA,MAAA,EACA,KAAA,EACA,MAAA,CACA;IACA;AACA;AACA;IACA,SAAA,sBAAA,CAAA,EAAA;MACA;MACA,IAAA,mBAAA,EAAA;QACA,OAAA,mBAAA;MACA;MACA;MACA;MACA;MACA,IAAA,OAAA,QAAA,KAAA,QAAA,IAAA,CAAA,QAAA,EAAA;QACA,mBAAA,GAAA,IAAA,GAAA,CAAA,mBAAA,CAAA;QACA,OAAA,mBAAA;MACA;MACA;MACA,IAAA,gBAAA,GAAA,QAAA,CAAA,aAAA,CAAA,OAAA,CAAA;MACA,mBAAA,GAAA,IAAA,GAAA,CAAA,mBAAA,CAAA,MAAA;MAAA;AACA;AACA;AACA;MACA,UAAA,KAAA,EAAA;QACA,gBAAA,CAAA,YAAA,CAAA,MAAA,EAAA,KAAA,CAAA;QACA,OAAA,gBAAA,CAAA,IAAA,KAAA,KAAA;MACA,CAAK,CAAA,CAAA;MACL,OAAA,mBAAA;IACA;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;IACA,IAAA,qBAAA;IACA;AACA;AACA;AACA;AACA;IACA,SAAA,6BAAA,CAAA,EAAA;MACA,IAAA,qBAAA,IAAA,IAAA,IAAA,OAAA,MAAA,KAAA,WAAA,EAAA;QACA,IAAA;UACA,MAAA,CAAA,gBAAA,CAAA,MAAA,EAAA,gBAA0D,IAAA,EAAA,MAAA,CAAA,cAAA,CAAA,CAAA,CAAqC,EAAA,SAAA,EAAA;YAC/F,GAAA;YAAA;AACA;AACA;YACA,SAAA,IAAA;cAAA,OAAA,qBAAA,GAAA,IAAA;YAAA;UACA,CAAa,CAAA,CAAA;QACb,CAAA,SACA;UACA,qBAAA,GAAA,qBAAA,IAAA,KAAA;QACA;MACA;MACA,OAAA,qBAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,+BAAA,CAAA,OAAA,EAAA;MACA,OAAA,6BAAA,EAAA,GAAA,OAAA,GAAA,CAAA,CAAA,OAAA,CAAA,OAAA;IACA;;IAEA;AACA;AACA;AACA;;IAEA;IACA,IAAA,iBAAA,GAAA;MACA;AACA;AACA;AACA;MACA,MAAA,EAAA,CAAA;MACA;AACA;AACA;AACA;MACA,OAAA,EAAA,CAAA;MACA;AACA;AACA;AACA;MACA,QAAA,EAAA;IACA,CAAA;IACA,iBAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,QAAA;IACA,iBAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,GAAA,SAAA;IACA,iBAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,UAAA;IACA;AACA;AACA;AACA;IACA,IAAA,iBAAA;IACA;AACA;AACA;AACA;IACA,SAAA,sBAAA,CAAA,EAAA;MACA,OAAA,CAAA,EAAA,OAAA,QAAA,IAAA,QAAA,IAAA,gBAAA,IAAA,gBAA+E,QAAA,CAAA,eAAA,CAAA,KAAA,CAAA;IAC/E;IACA;AACA;AACA;AACA;AACA;IACA,SAAA,oBAAA,CAAA,EAAA;MACA;MACA,IAAA,OAAA,QAAA,KAAA,QAAA,IAAA,CAAA,QAAA,EAAA;QACA,OAAA,iBAAA,CAAA,MAAA;MACA;MACA,IAAA,CAAA,iBAAA,EAAA;QACA;QACA;QACA,IAAA,eAAA,GAAA,QAAA,CAAA,aAAA,CAAA,KAAA,CAAA;QACA;QACA,IAAA,cAAA,GAAA,eAAA,CAAA,KAAA;QACA,eAAA,CAAA,GAAA,GAAA,KAAA;QACA,cAAA,CAAA,MAAA,GAAA,KAAA;QACA,cAAA,CAAA,KAAA,GAAA,KAAA;QACA,cAAA,CAAA,QAAA,GAAA,MAAA;QACA,cAAA,CAAA,UAAA,GAAA,QAAA;QACA,cAAA,CAAA,aAAA,GAAA,MAAA;QACA,cAAA,CAAA,QAAA,GAAA,UAAA;QACA;QACA,IAAA,OAAA,GAAA,QAAA,CAAA,aAAA,CAAA,KAAA,CAAA;QACA;QACA,IAAA,YAAA,GAAA,OAAA,CAAA,KAAA;QACA,YAAA,CAAA,KAAA,GAAA,KAAA;QACA,YAAA,CAAA,MAAA,GAAA,KAAA;QACA,eAAA,CAAA,WAAA,CAAA,OAAA,CAAA;QACA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA,eAAA,CAAA;QACA,iBAAA,GAAA,iBAAA,CAAA,MAAA;QACA;QACA;QACA;QACA,IAAA,eAAA,CAAA,UAAA,KAAA,CAAA,EAAA;UACA;UACA;UACA;UACA;UACA,eAAA,CAAA,UAAA,GAAA,CAAA;UACA,iBAAA,GACA,eAAA,CAAA,UAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,OAAA,GAAA,iBAAA,CAAA,QAAA;QACA;QACA,gBAAsB,eAAA,CAAA,UAAA,CAAA,WAAA,CAAA,eAAA,CAAA;MACtB;MACA,OAAA,iBAAA;IACA;;IAEA;AACA;AACA;AACA;;IAEA;IACA,IAAA,oBAAA;IACA;AACA;AACA;AACA;IACA,SAAA,kBAAA,CAAA,EAAA;MACA,IAAA,oBAAA,IAAA,IAAA,EAAA;QACA;QACA,IAAA,IAAA,GAAA,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,CAAA,IAAA,GAAA,IAAA;QACA,oBAAA,GAAA,CAAA,EAAA,IAAA,KAAA,CAAA,gBAA0D,IAAA,CAAA,gBAAA,IAAA,IAAA,CAAA,YAAA,CAAA,CAAA;MAC1D;MACA,OAAA,oBAAA;IACA;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;;IAGA;;;;;;;;;;;;;;ICzVA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,wCAAA,EAAA,YAAA;MAAA,OAAA,sCAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gCAAA,EAAA,YAAA;MAAA,OAAA,8BAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,2BAAA,EAAA,YAAA;MAAA,OAAA,yBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,oCAAA,EAAA,YAAA;MAAA,OAAA,kCAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,qBAAA,EAAA,YAAA;MAAA,OAAA,mBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,kBAAA,EAAA,YAAA;MAAA,OAAA,gBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,4BAAA,EAAA,YAAA;MAAA,OAAA,0BAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,YAAA;MAAA,OAAA,aAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,iBAAA,EAAA,YAAA;MAAA,OAAA,eAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,sBAAA,EAAA,YAAA;MAAA,OAAA,oBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,iCAAA,EAAA,YAAA;MAAA,OAAA,+BAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,qBAAA,EAAA,YAAA;MAAA,OAAA,mBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,YAAA;MAAA,OAAA,aAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,yBAAA,EAAA,YAAA;MAAA,OAAA,uBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,iBAAA,EAAA,YAAA;MAAA,OAAA,eAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,yBAAA,EAAA,YAAA;MAAA,OAAA,uBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,0BAAA,EAAA,YAAA;MAAA,OAAA,wBAAA;IAAA,CAAA,CAAA;IAAA;IAAA,IAAA,0CAAA,GAAA,mBAAA,EAAA,oBAAA,+CAAA,CAAA;IAAA;IAAA,IAAA,kDAAA,GAAA,mBAAA,EAAA,4BAAA,iDAAA,CAAA;IAAA;IAAA,IAAA,iCAAA,GAAA,mBAAA,EAAA,WAAA,uCAAA,CAAA;IAAA;IAAA,IAAA,2CAAA,GAAA,mBAAA,EAAA,qBAAA,iDAAA,CAAA;IAAA;IAAA,IAAA,kDAAA,GAAA,mBAAA,EAAA,4BAAA,iDAAA,CAAA;IAAA;IAAA,IAAA,8CAAA,GAAA,mBAAA,EAAA,wBAAA,6CAAA,CAAA;IAAA;IAAA,IAAA,qDAAA,GAAA,mBAAA,EAAA,+BAAA,oDAAA,CAAA;IAAA;AACA;AACA;AACA;AACA;AACA;AACA;;IASA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IACA,IAAA,uBAAA,GAAA,IAAoC,0CAAA,CAAA,gBAAA,CAAc,CAAA,yBAAA,CAAA;;IAElD;AACA;AACA;AACA;IACA;AACA;AACA;IAFA,IAGA,8BAAA;MACA;AACA;AACA;AACA;AACA;MACA,SAAA,+BAAA,QAAA,EAAA,WAAA,EAAA,WAAA,EAAA;QAAA,eAAA,OAAA,8BAAA;QACA,IAAA,CAAA,oBAAA,GAAA,IAAwC,iCAAA,CAAA,SAAA,CAAO,EAAA;QAC/C;AACA;AACA;QACA,IAAA,CAAA,mBAAA,GAAA,IAAA,CAAA,oBAAA,CAAA,IAAA,CAAkE,MAAA,CAAA,2CAAA,CAAA,sBAAA,CAAA,CAAoB,EAAA,CAAA;QACtF;AACA;AACA;QACA,IAAA,CAAA,SAAA,GAAA,IAAA;QACA,IAAA,CAAA,SAAA,GAAA,QAAA;QACA,IAAA,CAAA,YAAA,GAAA,WAAA;QACA,IAAA,CAAA,YAAA,GAAA,WAAA;MACA;MACA;AACA;AACA;AACA;AACA;MAJA,YAAA,CAAA,8BAAA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,OAAA,QAAA,EAAA;UACA,IAAA,CAAA,SAAA,GAAA,QAAA;UACA,IAAA,CAAA,uBAAA,EAAA;UACA,IAAA,CAAA,oBAAA,EAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,OAAA,EAAA;UACA,IAAA,CAAA,oBAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,SAAA,GAAA,IAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,wBAAA,QAAA,EAAA,WAAA,EAAA,WAAA,EAAA;UACA,IAAA,WAAA,GAAA,WAAA,EAAA;YACA,MAAA,KAAA,CAAA,8EAAA,CAAA;UACA;UACA,IAAA,CAAA,SAAA,GAAA,QAAA;UACA,IAAA,CAAA,YAAA,GAAA,WAAA;UACA,IAAA,CAAA,YAAA,GAAA,WAAA;UACA,IAAA,CAAA,uBAAA,EAAA;UACA,IAAA,CAAA,oBAAA,EAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,kBAAA,EAAA;UACA,IAAA,CAAA,oBAAA,EAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,oBAAA,EAAA;UACA,IAAA,CAAA,uBAAA,EAAA;UACA,IAAA,CAAA,oBAAA,EAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,kBAAA,EAAA,CAAyB;QACzB;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,wBAAA,EAAA,CAA+B;QAC/B;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,cAAA,KAAA,EAAA,QAAA,EAAA;UACA,IAAA,IAAA,CAAA,SAAA,EAAA;YACA,IAAA,CAAA,SAAA,CAAA,cAAA,CAAA,KAAA,GAAA,IAAA,CAAA,SAAA,EAAA,QAAA,CAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,wBAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA,SAAA,EAAA;YACA;UACA;UACA,IAAA,CAAA,SAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,aAAA,EAAA,GAAA,IAAA,CAAA,SAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,qBAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA,SAAA,EAAA;YACA;UACA;UACA;UACA,IAAA,YAAA,GAAA,IAAA,CAAA,SAAA,CAAA,mBAAA,EAAA;UACA;UACA,IAAA,iBAAA,GAAA,YAAA,GAAA,IAAA,CAAA,SAAA;UACA;UACA,IAAA,aAAA,GAAA,IAAA,CAAA,SAAA,CAAA,gBAAA,EAAA;UACA;UACA,IAAA,QAAA,GAAA;YAA0B,KAAA,EAAA,aAAA,CAAA,KAAA;YAAA,GAAA,EAAA,aAAA,CAAA;UAAA,CAAA;UAC1B;UACA,IAAA,YAAA,GAAA,IAAA,CAAA,SAAA,CAAA,eAAA,EAAA;UACA;UACA,IAAA,UAAA,GAAA,IAAA,CAAA,SAAA,CAAA,aAAA,EAAA;UACA;UACA,IAAA,WAAA,GAAA,YAAA,GAAA,QAAA,CAAA,KAAA,GAAA,IAAA,CAAA,SAAA;UACA,IAAA,WAAA,GAAA,IAAA,CAAA,YAAA,IAAA,QAAA,CAAA,KAAA,IAAA,CAAA,EAAA;YACA;YACA,IAAA,WAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,YAAA,GAAA,WAAA,IAAA,IAAA,CAAA,SAAA,CAAA;YACA,QAAA,CAAA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,QAAA,CAAA,KAAA,GAAA,WAAA,CAAA;YACA,QAAA,CAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,UAAA,EAAA,IAAA,CAAA,IAAA,CAAA,iBAAA,GAAA,CAAA,YAAA,GAAA,IAAA,CAAA,YAAA,IAAA,IAAA,CAAA,SAAA,CAAA,CAAA;UACA,CAAA,MACA;YACA;YACA,IAAA,SAAA,GAAA,QAAA,CAAA,GAAA,GAAA,IAAA,CAAA,SAAA,IAAA,YAAA,GAAA,YAAA,CAAA;YACA,IAAA,SAAA,GAAA,IAAA,CAAA,YAAA,IAAA,QAAA,CAAA,GAAA,IAAA,UAAA,EAAA;cACA;cACA,IAAA,SAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,YAAA,GAAA,SAAA,IAAA,IAAA,CAAA,SAAA,CAAA;cACA,IAAA,SAAA,GAAA,CAAA,EAAA;gBACA,QAAA,CAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,UAAA,EAAA,QAAA,CAAA,GAAA,GAAA,SAAA,CAAA;gBACA,QAAA,CAAA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,GAAA,IAAA,CAAA,YAAA,GAAA,IAAA,CAAA,SAAA,CAAA,CAAA;cACA;YACA;UACA;UACA,IAAA,CAAA,SAAA,CAAA,gBAAA,CAAA,QAAA,CAAA;UACA,IAAA,CAAA,SAAA,CAAA,wBAAA,CAAA,IAAA,CAAA,SAAA,GAAA,QAAA,CAAA,KAAA,CAAA;UACA,IAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,CAAA;QACA;MAAA;MAAA,OAAA,8BAAA;IAAA;IAEA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,sCAAA,CAAA,YAAA,EAAA;MACA,OAAA,YAAA,CAAA,eAAA;IACA;IACA;AACA;AACA;IAFA,IAGA,yBAAA;MACA,SAAA,0BAAA,EAAA;QAAA,eAAA,OAAA,yBAAA;QACA,IAAA,CAAA,SAAA,GAAA,EAAA;QACA,IAAA,CAAA,YAAA,GAAA,GAAA;QACA,IAAA,CAAA,YAAA,GAAA,GAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,eAAA,GAAA,IAAA,8BAAA,CAAA,IAAA,CAAA,QAAA,EAAA,IAAA,CAAA,WAAA,EAAA,IAAA,CAAA,WAAA,CAAA;MACA;MACA;AACA;AACA;AACA;MAHA,YAAA,CAAA,yBAAA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UAAoB,OAAA,IAAA,CAAA,SAAA;QAAuB;QAC3C;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,KAAA,EAAA;UAAyB,IAAA,CAAA,SAAA,GAAkB,MAAA,CAAA,kDAAA,CAAA,sBAAA,CAAA,CAAoB,CAAA,KAAA,CAAA;QAAQ;QACvE;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,GAAA,EAKA,SAAA,IAAA,EAAA;UAAuB,OAAA,IAAA,CAAA,YAAA;QAA0B;QACjD;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,KAAA,EAAA;UAA4B,IAAA,CAAA,YAAA,GAAqB,MAAA,CAAA,kDAAA,CAAA,sBAAA,CAAA,CAAoB,CAAA,KAAA,CAAA;QAAQ;QAC7E;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UAAuB,OAAA,IAAA,CAAA,YAAA;QAA0B;QACjD;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,KAAA,EAAA;UAA4B,IAAA,CAAA,YAAA,GAAqB,MAAA,CAAA,kDAAA,CAAA,sBAAA,CAAA,CAAoB,CAAA,KAAA,CAAA;QAAQ;QAC7E;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,eAAA,CAAA,uBAAA,CAAA,IAAA,CAAA,QAAA,EAAA,IAAA,CAAA,WAAA,EAAA,IAAA,CAAA,WAAA,CAAA;QACA;MAAA;MAAA,OAAA,yBAAA;IAAA;IAEA,yBAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;MAAA,IAAA,EAAA,CAAA;QACrB,QAAA,EAAA,uCAAA;QACA,SAAA,EAAA,CAAA;UACA,OAAA,EAAA,uBAAA;UACA,UAAA,EAAA,sCAAA;UACA,IAAA,EAAA,CAA+B,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAU;UAAA;AACzC;AACA;UACA;YAAA,OAAA,yBAAA;UAAA,EAAA;QACA,CAAqB;MACrB,CAAa;IAAA,CAAI,CACjB;IACA,yBAAA,CAAA,cAAA,GAAA;MACA,QAAA,EAAA,CAAA;QAAgB,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE,CAAA;MAC9B,WAAA,EAAA,CAAA;QAAmB,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE,CAAA;MACjC,WAAA,EAAA,CAAA;QAAmB,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE;IACjC,CAAA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IACA,IAAA,mBAAA,GAAA,EAAA;IACA;AACA;AACA;AACA;IAHA,IAIA,gBAAA;MACA;AACA;AACA;AACA;MACA,SAAA,iBAAA,OAAA,EAAA,SAAA,EAAA;QAAA,eAAA,OAAA,gBAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA;QACA,IAAA,CAAA,SAAA,GAAA,SAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,SAAA,GAAA,IAA6B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACpC;AACA;AACA;QACA,IAAA,CAAA,mBAAA,GAAA,IAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,cAAA,GAAA,CAAA;QACA;AACA;AACA;AACA;QACA,IAAA,CAAA,gBAAA,GAAA,IAAA,GAAA,EAAA;MACA;MACA;AACA;AACA;AACA;AACA;AACA;MALA,YAAA,CAAA,gBAAA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,SAAA,UAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA;YACA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,UAAA,EAAA,UAAA,CAAA,eAAA,EAAA,CACA,SAAA;YAAA;AACA;AACA;YACA;cAAA,OAAA,OAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA;YAAA,EAAA,CAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,WAAA,UAAA,EAAA;UACA;UACA,IAAA,mBAAA,GAAA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,UAAA,CAAA;UACA,IAAA,mBAAA,EAAA;YACA,mBAAA,CAAA,WAAA,EAAA;YACA,IAAA,CAAA,gBAAA,UAAA,CAAA,UAAA,CAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAXA;QAAA,GAAA;QAAA,KAAA,EAYA,SAAA,SAAA,EAAA;UAAA,IAAA,OAAA;UAAA,IAAA,aAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAA,mBAAA;UACA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,EAAA;YACA,OAAmB,MAAA,CAAA,iCAAA,CAAA,IAAA,CAAA,CAAE,EAAA;UACrB;UACA,OAAA,IAAmB,iCAAA,CAAA,YAAA,CAAU;UAAA;AAC7B;AACA;AACA;UACA,UAAA,QAAA,EAAA;YACA,IAAA,CAAA,OAAA,CAAA,mBAAA,EAAA;cACA,OAAA,CAAA,kBAAA,EAAA;YACA;YACA;YACA;YACA;YACA,IAAA,YAAA,GAAA,aAAA,GAAA,CAAA,GACA,OAAA,CAAA,SAAA,CAAA,IAAA,CAAoC,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,aAAA,CAAA,CAAA,CAAA,SAAA,CAAA,QAAA,CAAA,GAC7C,OAAA,CAAA,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA;YACA,OAAA,CAAA,cAAA,EAAA;YACA;cAAA;AACA;AACA;cACA,YAAA;gBACA,YAAA,CAAA,WAAA,EAAA;gBACA,OAAA,CAAA,cAAA,EAAA;gBACA,IAAA,CAAA,OAAA,CAAA,cAAA,EAAA;kBACA,OAAA,CAAA,qBAAA,EAAA;gBACA;cACA;YAAa;UACb,CAAS,CAAA;QACT;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,qBAAA,EAAA;UACA,IAAA,CAAA,gBAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;AACA;UACA,UAAA,CAAA,EAAA,SAAA;YAAA,OAAA,OAAA,CAAA,UAAA,CAAA,SAAA,CAAA;UAAA,EAAA;UACA,IAAA,CAAA,SAAA,CAAA,QAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,iBAAA,UAAA,EAAA,aAAA,EAAA;UACA;UACA,IAAA,SAAA,GAAA,IAAA,CAAA,2BAAA,CAAA,UAAA,CAAA;UACA,OAAA,IAAA,CAAA,QAAA,CAAA,aAAA,CAAA,CAAA,IAAA,CAAiD,MAAA,CAAA,2CAAA,CAAA,QAAA,CAAA,CAAM;UAAA;AACvD;AACA;AACA;UACA,UAAA,MAAA,EAAA;YACA,OAAA,CAAA,MAAA,IAAA,SAAA,CAAA,OAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA;UACA,CAAS,CAAA,CAAA;QACT;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,4BAAA,UAAA,EAAA;UAAA,IAAA,OAAA;UACA;UACA,IAAA,mBAAA,GAAA,EAAA;UACA,IAAA,CAAA,gBAAA,CAAA,OAAA;UAAA;AACA;AACA;AACA;AACA;UACA,UAAA,aAAA,EAAA,UAAA,EAAA;YACA,IAAA,OAAA,CAAA,0BAAA,CAAA,UAAA,EAAA,UAAA,CAAA,EAAA;cACA,mBAAA,CAAA,IAAA,CAAA,UAAA,CAAA;YACA;UACA,CAAS,CAAA;UACT,OAAA,mBAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,2BAAA,UAAA,EAAA,UAAA,EAAA;UACA;UACA,IAAA,OAAA,GAAA,UAAA,CAAA,aAAA;UACA;UACA,IAAA,iBAAA,GAAA,UAAA,CAAA,aAAA,EAAA,CAAA,aAAA;UACA;UACA;UACA,GAAA;YACA,IAAA,OAAA,IAAA,iBAAA,EAAA;cACA,OAAA,IAAA;YACA;UACA,CAAS,QAAA,OAAA,GAAA,gBAAgC,OAAA,CAAA,aAAA;UACzC,OAAA,KAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,mBAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,mBAAA,GAAA,IAAA,CAAA,OAAA,CAAA,iBAAA;UAAA;AACA;AACA;UACA,YAAA;YACA,OAAmB,MAAA,CAAA,iCAAA,CAAA,WAAA,CAAA,CAAS,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,CAAA,SAAA;YAAA;AAC5B;AACA;YACA;cAAA,OAAA,OAAA,CAAA,SAAA,CAAA,IAAA,EAAA;YAAA,EAAA;UACA,CAAS,CAAA;QACT;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,sBAAA,EAAA;UACA,IAAA,IAAA,CAAA,mBAAA,EAAA;YACA,IAAA,CAAA,mBAAA,CAAA,WAAA,EAAA;YACA,IAAA,CAAA,mBAAA,GAAA,IAAA;UACA;QACA;MAAA;MAAA,OAAA,gBAAA;IAAA;IAEA,gBAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,YAAA,CAAU;MAAA,IAAA,EAAA,CAAA;QAAU,UAAA,EAAA;MAAA,CAAqB;IAAA,CAAI,CACzD;IACA;IACA,gBAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAO,0CAAA,CAAA,QAAA;MAAM,CAAE,EACpB;QAAK,IAAA,EAAO,kDAAA,CAAA,UAAA;MAAQ,CAAA,CACpB;IAAA;IACA;IAAA,gBAAA,CAAA,eAAA,GAAsD,MAAA,CAAA,0CAAA,CAAA,oBAAA,CAAA,CAAkB,CAAA;MAAE,OAAA,EAAA,SAAA,wBAAA,CAAA,EAAA;QAA+C,OAAA,IAAA,gBAAA,CAA6B,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAC,0CAAA,CAAA,QAAA,CAAM,CAAA,EAAG,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAC,kDAAA,CAAA,UAAA,CAAQ,CAAA,CAAA;MAAG,CAAE;MAAA,KAAA,EAAA,gBAAA;MAAA,UAAA,EAAA;IAAA,CAA+C,CAAA;IAC7O;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,kCAAA,CAAA,gBAAA,EAAA,MAAA,EAAA,QAAA,EAAA;MACA,OAAA,gBAAA,IAAA,IAAA,gBAAA,CAAA,MAAA,EAAA,QAAA,CAAA;IACA;IACA;AACA;AACA;AACA;IACA,IAAA,0BAAA,GAAA;MACA;MACA,OAAA,EAAA,gBAAA;MACA,IAAA,EAAA,CAAA,CAAA,IAAgB,0CAAA,CAAA,UAAA,CAAQ,EAAA,EAAA,IAAQ,0CAAA,CAAA,UAAA,CAAQ,EAAA,EAAA,gBAAA,CAAA,EAAuB,0CAAA,CAAA,QAAA,CAAM,EAAE,kDAAA,CAAA,UAAA,CAAQ,CAAA;MAC/E,UAAA,EAAA;IACA,CAAA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;IAJA,IAKA,aAAA;MACA;AACA;AACA;AACA;AACA;AACA;MACA,SAAA,cAAA,UAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,GAAA,EAAA;QAAA,IAAA,OAAA;QAAA,eAAA,OAAA,aAAA;QACA,IAAA,CAAA,UAAA,GAAA,UAAA;QACA,IAAA,CAAA,gBAAA,GAAA,gBAAA;QACA,IAAA,CAAA,MAAA,GAAA,MAAA;QACA,IAAA,CAAA,GAAA,GAAA,GAAA;QACA,IAAA,CAAA,UAAA,GAAA,IAA8B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACrC,IAAA,CAAA,gBAAA,GAAA,IAAoC,iCAAA,CAAA,YAAA,CAAU;QAAA;AAC9C;AACA;AACA;QACA,UAAA,QAAA;UAAA,OAAA,OAAA,CAAA,MAAA,CAAA,iBAAA;UAAA;AACA;AACA;UACA;YAAA,OAAc,MAAA,CAAA,iCAAA,CAAA,WAAA,CAAA,CAAS,CAAA,OAAA,CAAA,UAAA,CAAA,aAAA,EAAA,QAAA,CAAA,CAAA,IAAA,CAA+C,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA,CAC/E,SAAA,CAAA,QAAA,CAAA;UAAA,EAAA;QAAA,EAAA;MACA;MACA;AACA;AACA;MAFA,YAAA,CAAA,aAAA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,SAAA,EAAA;UACA,IAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,IAAA,CAAA;QACA;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,IAAA,CAAA;UACA,IAAA,CAAA,UAAA,CAAA,IAAA,EAAA;UACA,IAAA,CAAA,UAAA,CAAA,QAAA,EAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,gBAAA,EAAA;UACA,OAAA,IAAA,CAAA,gBAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,cAAA,EAAA;UACA,OAAA,IAAA,CAAA,UAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MARA;QAAA,GAAA;QAAA,KAAA,EASA,SAAA,SAAA,OAAA,EAAA;UACA;UACA,IAAA,EAAA,GAAA,IAAA,CAAA,UAAA,CAAA,aAAA;UACA;UACA,IAAA,KAAA,GAAA,IAAA,CAAA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,KAAA,IAAA,KAAA;UACA;UACA,OAAA,CAAA,IAAA,GAAA,OAAA,CAAA,IAAA,IAAA,IAAA,GAAA,KAAA,GAAA,OAAA,CAAA,GAAA,GAAA,OAAA,CAAA,KAAA,GAAA,OAAA,CAAA,IAAA;UACA,OAAA,CAAA,KAAA,GAAA,OAAA,CAAA,KAAA,IAAA,IAAA,GAAA,KAAA,GAAA,OAAA,CAAA,KAAA,GAAA,OAAA,CAAA,GAAA,GAAA,OAAA,CAAA,KAAA;UACA;UACA,IAAA,OAAA,CAAA,MAAA,IAAA,IAAA,EAAA;YACA,gBAA2B,OAAA,CAAA,GAAA,GAC3B,EAAA,CAAA,YAAA,GAAA,EAAA,CAAA,YAAA,GAAA,OAAA,CAAA,MAAA;UACA;UACA;UACA,IAAA,KAAA,IAAqB,MAAA,CAAA,kDAAA,CAAA,sBAAA,CAAA,CAAoB,EAAA,IAAM,kDAAA,CAAA,mBAAA,CAAiB,CAAA,MAAA,EAAA;YAChE,IAAA,OAAA,CAAA,IAAA,IAAA,IAAA,EAAA;cACA,gBAA+B,OAAA,CAAA,KAAA,GAC/B,EAAA,CAAA,WAAA,GAAA,EAAA,CAAA,WAAA,GAAA,OAAA,CAAA,IAAA;YACA;YACA,IAAgB,MAAA,CAAA,kDAAA,CAAA,sBAAA,CAAA,CAAoB,EAAA,IAAM,kDAAA,CAAA,mBAAA,CAAiB,CAAA,QAAA,EAAA;cAC3D,OAAA,CAAA,IAAA,GAAA,OAAA,CAAA,KAAA;YACA,CAAA,MACA,IAAqB,MAAA,CAAA,kDAAA,CAAA,sBAAA,CAAA,CAAoB,EAAA,IAAM,kDAAA,CAAA,mBAAA,CAAiB,CAAA,OAAA,EAAA;cAChE,OAAA,CAAA,IAAA,GAAA,OAAA,CAAA,KAAA,GAAA,CAAA,OAAA,CAAA,KAAA,GAAA,OAAA,CAAA,KAAA;YACA;UACA,CAAA,MACA;YACA,IAAA,OAAA,CAAA,KAAA,IAAA,IAAA,EAAA;cACA,gBAA+B,OAAA,CAAA,IAAA,GAC/B,EAAA,CAAA,WAAA,GAAA,EAAA,CAAA,WAAA,GAAA,OAAA,CAAA,KAAA;YACA;UACA;UACA,IAAA,CAAA,qBAAA,CAAA,OAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,sBAAA,OAAA,EAAA;UACA;UACA,IAAA,EAAA,GAAA,IAAA,CAAA,UAAA,CAAA,aAAA;UACA,IAAY,MAAA,CAAA,kDAAA,CAAA,wBAAA,CAAA,CAAsB,EAAA,EAAA;YAClC,EAAA,CAAA,QAAA,CAAA,OAAA,CAAA;UACA,CAAA,MACA;YACA,IAAA,OAAA,CAAA,GAAA,IAAA,IAAA,EAAA;cACA,EAAA,CAAA,SAAA,GAAA,OAAA,CAAA,GAAA;YACA;YACA,IAAA,OAAA,CAAA,IAAA,IAAA,IAAA,EAAA;cACA,EAAA,CAAA,UAAA,GAAA,OAAA,CAAA,IAAA;YACA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MATA;QAAA,GAAA;QAAA,KAAA,EAUA,SAAA,oBAAA,IAAA,EAAA;UACA;UACA,IAAA,IAAA,GAAA,MAAA;UACA;UACA,IAAA,KAAA,GAAA,OAAA;UACA;UACA,IAAA,EAAA,GAAA,IAAA,CAAA,UAAA,CAAA,aAAA;UACA,IAAA,IAAA,IAAA,KAAA,EAAA;YACA,OAAA,EAAA,CAAA,SAAA;UACA;UACA,IAAA,IAAA,IAAA,QAAA,EAAA;YACA,OAAA,EAAA,CAAA,YAAA,GAAA,EAAA,CAAA,YAAA,GAAA,EAAA,CAAA,SAAA;UACA;UACA;UACA;UACA,IAAA,KAAA,GAAA,IAAA,CAAA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,KAAA,IAAA,KAAA;UACA,IAAA,IAAA,IAAA,OAAA,EAAA;YACA,IAAA,GAAA,KAAA,GAAA,KAAA,GAAA,IAAA;UACA,CAAA,MACA,IAAA,IAAA,IAAA,KAAA,EAAA;YACA,IAAA,GAAA,KAAA,GAAA,IAAA,GAAA,KAAA;UACA;UACA,IAAA,KAAA,IAAqB,MAAA,CAAA,kDAAA,CAAA,sBAAA,CAAA,CAAoB,EAAA,IAAM,kDAAA,CAAA,mBAAA,CAAiB,CAAA,QAAA,EAAA;YAChE;YACA;YACA,IAAA,IAAA,IAAA,IAAA,EAAA;cACA,OAAA,EAAA,CAAA,WAAA,GAAA,EAAA,CAAA,WAAA,GAAA,EAAA,CAAA,UAAA;YACA,CAAA,MACA;cACA,OAAA,EAAA,CAAA,UAAA;YACA;UACA,CAAA,MACA,IAAA,KAAA,IAA0B,MAAA,CAAA,kDAAA,CAAA,sBAAA,CAAA,CAAoB,EAAA,IAAM,kDAAA,CAAA,mBAAA,CAAiB,CAAA,OAAA,EAAA;YACrE;YACA;YACA,IAAA,IAAA,IAAA,IAAA,EAAA;cACA,OAAA,EAAA,CAAA,UAAA,GAAA,EAAA,CAAA,WAAA,GAAA,EAAA,CAAA,WAAA;YACA,CAAA,MACA;cACA,OAAA,CAAA,EAAA,CAAA,UAAA;YACA;UACA,CAAA,MACA;YACA;YACA;YACA,IAAA,IAAA,IAAA,IAAA,EAAA;cACA,OAAA,EAAA,CAAA,UAAA;YACA,CAAA,MACA;cACA,OAAA,EAAA,CAAA,WAAA,GAAA,EAAA,CAAA,WAAA,GAAA,EAAA,CAAA,UAAA;YACA;UACA;QACA;MAAA;MAAA,OAAA,aAAA;IAAA;IAEA,aAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;MAAA,IAAA,EAAA,CAAA;QACrB,QAAA,EAAA;MACA,CAAa;IAAA,CAAI,CACjB;IACA;IACA,aAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAO,0CAAA,CAAA,YAAA;MAAU,CAAE,EACxB;QAAK,IAAA,EAAA;MAAA,CAAyB,EAC9B;QAAK,IAAA,EAAO,0CAAA,CAAA,QAAA;MAAM,CAAE,EACpB;QAAK,IAAA,EAAO,8CAAA,CAAA,gBAAA,CAAc;QAAA,UAAA,EAAA,CAAA;UAAgB,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE;MAAA,CAAA,CAC3D;IAAA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,WAAA,CAAA,EAAA,EAAA,EAAA,EAAA;MACA,OAAA,EAAA,CAAA,KAAA,IAAA,EAAA,CAAA,KAAA,IAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA,GAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,IAAA,gBAAA,GAAA,OAAA,qBAAA,KAAA,WAAA,GAAwE,iCAAA,CAAA,yBAAA,CAAuB,GAAG,iCAAA,CAAA,eAAA,CAAa;IAC/G;AACA;AACA;IAFA,IAGA,wBAAA,0BAAA,cAAA;MAAA,SAAA,CAAA,wBAAA,EAAA,cAAA;MAAA,IAAA,OAAA,GAAA,YAAA,CAAA,wBAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA,SAAA,yBAAA,UAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,eAAA,EAAA,GAAA,EAAA,gBAAA,EAAA;QAAA,IAAA,OAAA;QAAA,eAAA,OAAA,wBAAA;QACA,OAAA,GAAA,OAAA,CAAA,IAAA,OAAA,UAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,GAAA;QACA,OAAA,CAAA,UAAA,GAAA,UAAA;QACA,OAAA,CAAA,kBAAA,GAAA,kBAAA;QACA,OAAA,CAAA,eAAA,GAAA,eAAA;QACA;AACA;AACA;QACA,OAAA,CAAA,gBAAA,GAAA,IAAoC,iCAAA,CAAA,SAAA,CAAO,EAAA;QAC3C;AACA;AACA;QACA,OAAA,CAAA,qBAAA,GAAA,IAAyC,iCAAA,CAAA,SAAA,CAAO,EAAA;QAChD,OAAA,CAAA,YAAA,GAAA,UAAA;QACA;QACA;QACA;QACA;QACA;AACA;AACA;QACA,OAAA,CAAA,mBAAA,GAAA,IAAuC,iCAAA,CAAA,YAAA,CAAU;QAAA;AACjD;AACA;AACA;QACA,UAAA,QAAA;UAAA,OAAA,OAAA,CAAA,eAAA,CAAA,mBAAA,CAAA,SAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,KAAA;YAAA,OAAA,OAAA,CAAA,OAAA,EAAA,CAAA,IAAA;YAAA;AACA;AACA;YACA;cAAA,OAAA,OAAA,CAAA,MAAA,CAAA,GAAA;cAAA;AACA;AACA;cACA;gBAAA,OAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA;cAAA,EAAA;YAAA,EAAA;UAAA,EAAA;QAAA,EAAA;QACA;AACA;AACA;QACA,OAAA,CAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA,YAAA,EAAA;QACA;AACA;AACA;QACA,OAAA,CAAA,iBAAA,GAAA,CAAA;QACA;AACA;AACA;QACA,OAAA,CAAA,kBAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,OAAA,CAAA,mBAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,OAAA,CAAA,cAAA,GAAA;UAA+B,KAAA,EAAA,CAAA;UAAA,GAAA,EAAA;QAAA,CAAA;QAC/B;AACA;AACA;QACA,OAAA,CAAA,WAAA,GAAA,CAAA;QACA;AACA;AACA;QACA,OAAA,CAAA,aAAA,GAAA,CAAA;QACA;AACA;AACA;QACA,OAAA,CAAA,sBAAA,GAAA,CAAA;QACA;AACA;AACA;AACA;QACA,OAAA,CAAA,kCAAA,GAAA,KAAA;QACA;AACA;AACA;QACA,OAAA,CAAA,yBAAA,GAAA,KAAA;QACA;AACA;AACA;QACA,OAAA,CAAA,wBAAA,GAAA,EAAA;QACA,IAAA,CAAA,eAAA,EAAA;UACA,MAAA,KAAA,CAAA,gFAAA,CAAA;QACA;QAAA,OAAA,OAAA;MACA;MACA;AACA;AACA;AACA;MAHA,YAAA,CAAA,wBAAA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UACA,OAAA,IAAA,CAAA,YAAA;QACA;QACA;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,WAAA,EAAA;UACA,IAAA,IAAA,CAAA,YAAA,KAAA,WAAA,EAAA;YACA,IAAA,CAAA,YAAA,GAAA,WAAA;YACA,IAAA,CAAA,oBAAA,EAAA;UACA;QACA;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,SAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,eAAA,CAAA,wBAAA,CAAA,SAAA,qBAAA,IAAA;UACA;UACA;UACA;UACA;UACA,IAAA,CAAA,MAAA,CAAA,iBAAA;UAAA;AACA;AACA;UACA;YAAA,OAAA,OAAA,CAAA,OAAA,EAAA,CAAA,IAAA;YAAA;AACA;AACA;YACA,YAAA;cACA,OAAA,CAAA,oBAAA,EAAA;cACA,OAAA,CAAA,eAAA,CAAA,MAAA,CAAA,OAAA,CAAA;cACA,OAAA,CAAA,eAAA,EAAA,CACA,IAAA;cACA;cACY,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,EAAA,gBAAe,IAAA,CAAA;cACpC;cACA;cACA;cACY,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,CAAA,EAAA,gBAAA,CAAA,CAAA,CACrB,SAAA;cAAA;AACA;AACA;cACA;gBAAA,OAAA,OAAA,CAAA,eAAA,CAAA,iBAAA,EAAA;cAAA,EAAA;cACA,OAAA,CAAA,0BAAA,EAAA;YACA,CAAS,CAAA;UAAA,EAAA;QACT;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,MAAA,EAAA;UACA,IAAA,CAAA,eAAA,CAAA,MAAA,EAAA;UACA;UACA,IAAA,CAAA,qBAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,gBAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,eAAA,CAAA,wBAAA,CAAA,SAAA,wBAAA,IAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,OAAA,KAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,IAAA,CAAA,MAAA,EAAA;YACA,MAAA,KAAA,CAAA,+CAAA,CAAA;UACA;UACA;UACA;UACA;UACA,IAAA,CAAA,MAAA,CAAA,iBAAA;UAAA;AACA;AACA;UACA,YAAA;YACA,OAAA,CAAA,MAAA,GAAA,KAAA;YACA,OAAA,CAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAwC,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA,CAAA,SAAA;YAAA;AACjD;AACA;AACA;YACA,UAAA,IAAA,EAAA;cACA;cACA,IAAA,SAAA,GAAA,IAAA,CAAA,MAAA;cACA,IAAA,SAAA,KAAA,OAAA,CAAA,WAAA,EAAA;gBACA,OAAA,CAAA,WAAA,GAAA,SAAA;gBACA,OAAA,CAAA,eAAA,CAAA,mBAAA,EAAA;cACA;cACA,OAAA,CAAA,kBAAA,EAAA;YACA,CAAa,CAAA;UACb,CAAS,CAAA;QACT;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,OAAA,EAAA;UACA,IAAA,CAAA,MAAA,GAAA,IAAA;UACA,IAAA,CAAA,gBAAA,CAAA,IAAA,EAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,cAAA,EAAA;UACA,OAAA,IAAA,CAAA,WAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,gBAAA,EAAA;UACA,OAAA,IAAA,CAAA,aAAA;QACA;QACA;QACA;QACA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,iBAAA,EAAA;UACA,OAAA,IAAA,CAAA,cAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,oBAAA,IAAA,EAAA;UACA,IAAA,IAAA,CAAA,iBAAA,KAAA,IAAA,EAAA;YACA,IAAA,CAAA,iBAAA,GAAA,IAAA;YACA,IAAA,CAAA,oBAAA,EAAA;YACA,IAAA,CAAA,0BAAA,EAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,iBAAA,KAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,WAAA,CAAA,IAAA,CAAA,cAAA,EAAA,KAAA,CAAA,EAAA;YACA,IAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,cAAA,GAAA,KAAA,CAAA;YACA,IAAA,CAAA,0BAAA;YAAA;AACA;AACA;YACA;cAAA,OAAA,OAAA,CAAA,eAAA,CAAA,iBAAA,EAAA;YAAA,EAAA;UACA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,gCAAA,EAAA;UACA,OAAA,IAAA,CAAA,kCAAA,GAAA,IAAA,GAAA,IAAA,CAAA,sBAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,yBAAA,MAAA,EAAA;UAAA,IAAA,OAAA;UAAA,IAAA,EAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAA,UAAA;UACA;UACA;UACA;UACA,IAAA,KAAA,GAAA,IAAA,CAAA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,KAAA,IAAA,KAAA;UACA;UACA,IAAA,YAAA,GAAA,IAAA,CAAA,WAAA,IAAA,YAAA;UACA;UACA,IAAA,IAAA,GAAA,YAAA,GAAA,GAAA,GAAA,GAAA;UACA;UACA,IAAA,aAAA,GAAA,YAAA,IAAA,KAAA,GAAA,CAAA,CAAA,GAAA,CAAA;UACA;UACA,IAAA,SAAA,eAAA,MAAA,CAAoC,IAAA,OAAA,MAAA,CAAQ,MAAA,CAAA,aAAA,GAAA,MAAA,CAAA,QAA+B;UAC3E,IAAA,CAAA,sBAAA,GAAA,MAAA;UACA,IAAA,EAAA,KAAA,QAAA,EAAA;YACA,SAAA,iBAAA,MAAA,CAAsC,IAAA,YAAK;YAC3C;YACA;YACA;YACA,IAAA,CAAA,kCAAA,GAAA,IAAA;UACA;UACA,IAAA,IAAA,CAAA,yBAAA,IAAA,SAAA,EAAA;YACA;YACA;YACA,IAAA,CAAA,yBAAA,GAAA,SAAA;YACA,IAAA,CAAA,0BAAA;YAAA;AACA;AACA;YACA,YAAA;cACA,IAAA,OAAA,CAAA,kCAAA,EAAA;gBACA,OAAA,CAAA,sBAAA,IAAA,OAAA,CAAA,0BAAA,EAAA;gBACA,OAAA,CAAA,kCAAA,GAAA,KAAA;gBACA,OAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,sBAAA,CAAA;cACA,CAAA,MACA;gBACA,OAAA,CAAA,eAAA,CAAA,uBAAA,EAAA;cACA;YACA,CAAa,CAAA;UACb;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAPA;QAAA,GAAA;QAAA,KAAA,EAQA,SAAA,eAAA,MAAA,EAAA;UAAA,IAAA,QAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAA,MAAA;UACA;UACA,IAAA,OAAA,GAAA;YAAyB,QAAA,EAAA;UAAA,CAAA;UACzB,IAAA,IAAA,CAAA,WAAA,KAAA,YAAA,EAAA;YACA,OAAA,CAAA,KAAA,GAAA,MAAA;UACA,CAAA,MACA;YACA,OAAA,CAAA,GAAA,GAAA,MAAA;UACA;UACA,IAAA,CAAA,QAAA,CAAA,OAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,cAAA,KAAA,EAAA;UAAA,IAAA,QAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAA,MAAA;UACA,IAAA,CAAA,eAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,oBAAA,IAAA,EAAA;UACA,OAAA,IAAA,CAAA,eAAA,CAAA,wBAAA,CAAA,SAAA,gCAAA,IAAA,OAAA,IAAA,GAAA,IAAA,GAAA,IAAA,CAAA,WAAA,KAAA,YAAA,GAAA,OAAA,GAAA,KAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,2BAAA,EAAA;UACA;UACA,IAAA,SAAA,GAAA,IAAA,CAAA,eAAA,CAAA,aAAA;UACA,OAAA,IAAA,CAAA,WAAA,KAAA,YAAA,GAAA,SAAA,CAAA,WAAA,GAAA,SAAA,CAAA,YAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,iBAAA,KAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA,MAAA,EAAA;YACA,OAAA,CAAA;UACA;UACA,OAAA,IAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,KAAA,EAAA,IAAA,CAAA,WAAA,CAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,kBAAA,EAAA;UACA;UACA,IAAA,CAAA,oBAAA,EAAA;UACA,IAAA,CAAA,eAAA,CAAA,mBAAA,EAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,qBAAA,EAAA;UACA;UACA,IAAA,UAAA,GAAA,IAAA,CAAA,UAAA,CAAA,aAAA;UACA,IAAA,CAAA,aAAA,GAAA,IAAA,CAAA,WAAA,KAAA,YAAA,GACA,UAAA,CAAA,WAAA,GAAA,UAAA,CAAA,YAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,2BAAA,QAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,QAAA,EAAA;YACA,IAAA,CAAA,wBAAA,CAAA,IAAA,CAAA,QAAA,CAAA;UACA;UACA;UACA;UACA,IAAA,CAAA,IAAA,CAAA,yBAAA,EAAA;YACA,IAAA,CAAA,yBAAA,GAAA,IAAA;YACA,IAAA,CAAA,MAAA,CAAA,iBAAA;YAAA;AACA;AACA;YACA;cAAA,OAAA,OAAA,CAAA,OAAA,EAAA,CAAA,IAAA;cAAA;AACA;AACA;cACA,YAAA;gBACA,OAAA,CAAA,kBAAA,EAAA;cACA,CAAa,CAAA;YAAA,EAAA;UACb;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,mBAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,yBAAA,GAAA,KAAA;UACA;UACA;UACA;UACA,IAAA,CAAA,MAAA,CAAA,GAAA;UAAA;AACA;AACA;UACA;YAAA,OAAA,OAAA,CAAA,kBAAA,CAAA,YAAA,EAAA;UAAA,EAAA;UACA;UACA;UACA;UACA;UACA,IAAA,CAAA,eAAA,CAAA,aAAA,CAAA,KAAA,CAAA,SAAA,GAAA,IAAA,CAAA,yBAAA;UACA;UACA,IAAA,uBAAA,GAAA,IAAA,CAAA,wBAAA;UACA,IAAA,CAAA,wBAAA,GAAA,EAAA;UAAA,IAAA,UAAA,GAAA,0BAAA,CACA,uBAAA;YAAA,MAAA;UAAA;YAAA,KAAA,UAAA,CAAA,CAAA,MAAA,MAAA,GAAA,UAAA,CAAA,CAAA,IAAA,IAAA,GAAA;cAAA,IAAA,EAAA,GAAA,MAAA,CAAA,KAAA;cACA,EAAA,EAAA;YACA;UAAA,SAAA,GAAA;YAAA,UAAA,CAAA,CAAA,CAAA,GAAA;UAAA;YAAA,UAAA,CAAA,CAAA;UAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,qBAAA,EAAA;UACA,IAAA,CAAA,mBAAA,GACA,IAAA,CAAA,WAAA,KAAA,YAAA,GAAA,EAAA,MAAA,MAAA,CAAwD,IAAA,CAAA,iBAAA,OAAuB;UAC/E,IAAA,CAAA,kBAAA,GACA,IAAA,CAAA,WAAA,KAAA,YAAA,MAAA,MAAA,CAAmD,IAAA,CAAA,iBAAA,UAAuB,EAAA;QAC1E;MAAA;MAAA,OAAA,wBAAA;IAAA,EAxbA,aAAA;IA0bA,wBAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;MAAA,IAAA,EAAA,CAAA;QAAU,QAAA,EAAA,6BAAA;QAC/B,QAAA,EAAA,8NAAA;QACA,MAAA,EAAA,CAAA,qsDAA6tD,CAAA;QAC7tD,IAAA,EAAA;UACA,OAAA,EAAA,6BAAA;UACA,mDAAA,EAAA,8BAAA;UACA,iDAAA,EAAA;QACA,CAAiB;QACjB,aAAA,EAA+B,0CAAA,CAAA,mBAAA,CAAiB,CAAA,IAAA;QAChD,eAAA,EAAiC,0CAAA,CAAA,yBAAA,CAAuB,CAAA,MAAA;QACxD,SAAA,EAAA,CAAA;UACA,OAAA,EAAA,aAAA;UACA,WAAA,EAAA;QACA,CAAqB;MACrB,CAAa;IAAA,CAAI,CACjB;IACA;IACA,wBAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAO,0CAAA,CAAA,YAAA;MAAU,CAAE,EACxB;QAAK,IAAA,EAAO,0CAAA,CAAA,mBAAA;MAAiB,CAAE,EAC/B;QAAK,IAAA,EAAO,0CAAA,CAAA,QAAA;MAAM,CAAE,EACpB;QAAK,IAAA,EAAA,SAAA;QAAA,UAAA,EAAA,CAAA;UAAgC,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE,EAAA;UAAG,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAM;UAAA,IAAA,EAAA,CAAA,uBAAA;QAAA,CAAoC;MAAA,CAAG,EAC7G;QAAK,IAAA,EAAO,8CAAA,CAAA,gBAAA,CAAc;QAAA,UAAA,EAAA,CAAA;UAAgB,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE;MAAA,CAAG,EAC9D;QAAK,IAAA,EAAA;MAAA,CAAA,CACL;IAAA;IACA,wBAAA,CAAA,cAAA,GAAA;MACA,WAAA,EAAA,CAAA;QAAmB,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE,CAAA;MACjC,mBAAA,EAAA,CAAA;QAA2B,IAAA,EAAO,0CAAA,CAAA,QAAA;MAAM,CAAE,CAAA;MAC1C,eAAA,EAAA,CAAA;QAAuB,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;QAAA,IAAA,EAAA,CAAA,gBAAA,EAAA;UAA4B,UAAA;QAAA,CAAe;MAAA,CAAI;IACtF,CAAA;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,OAAA,CAAA,WAAA,EAAA,IAAA,EAAA;MACA;MACA,IAAA,EAAA,GAAA,gBAA6B,IAAA;MAC7B,IAAA,CAAA,EAAA,CAAA,qBAAA,EAAA;QACA,OAAA,CAAA;MACA;MACA;MACA,IAAA,IAAA,GAAA,EAAA,CAAA,qBAAA,EAAA;MACA,OAAA,WAAA,IAAA,YAAA,GAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,MAAA;IACA;IACA;AACA;AACA;AACA;AACA;IAJA,IAKA,eAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA,SAAA,gBAAA,iBAAA,EAAA,SAAA,EAAA,QAAA,EAAA,SAAA,EAAA,MAAA,EAAA;QAAA,IAAA,OAAA;QAAA,eAAA,OAAA,eAAA;QACA,IAAA,CAAA,iBAAA,GAAA,iBAAA;QACA,IAAA,CAAA,SAAA,GAAA,SAAA;QACA,IAAA,CAAA,QAAA,GAAA,QAAA;QACA,IAAA,CAAA,SAAA,GAAA,SAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,UAAA,GAAA,IAA8B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACrC;AACA;AACA;QACA,IAAA,CAAA,kBAAA,GAAA,IAAsC,iCAAA,CAAA,SAAA,CAAO,EAAA;QAC7C;AACA;AACA;AACA;QACA,IAAA,CAAA,8BAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,UAAA,GAAA,IAAA,CAAA,kBAAA,CACA,IAAA;QACA;QACQ,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,EAAA,gBAAe,IAAA,CAAA;QAChC;QACQ,MAAA,CAAA,2CAAA,CAAA,UAAA,CAAA,CAAQ,EAAA;QAChB;QACA;QACA;QACQ,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS;QAAA;AACjB;AACA;AACA;QACA,UAAA,KAAA;UAAA,IAAA,KAAA,GAAA,cAAA,CAAA,KAAA;YAAA,IAAA,GAAA,KAAA;YAAA,GAAA,GAAA,KAAA;UAAA,OAAA,OAAA,CAAA,iBAAA,CAAA,IAAA,EAAA,GAAA,CAAA;QAAA,EAAA;QACA;QACQ,MAAA,CAAA,2CAAA,CAAA,aAAA,CAAA,CAAW,CAAA,CAAA,CAAA,CAAA;QACnB;AACA;AACA;QACA,IAAA,CAAA,OAAA,GAAA,IAAA;QACA;AACA;AACA;AACA;AACA;QACA,IAAA,CAAA,cAAA,GAAA,EAAA;QACA;AACA;AACA;QACA,IAAA,CAAA,YAAA,GAAA,KAAA;QACA,IAAA,CAAA,UAAA,GAAA,IAA8B,iCAAA,CAAA,SAAA,CAAO,EAAA;QACrC,IAAA,CAAA,UAAA,CAAA,SAAA;QAAA;AACA;AACA;AACA;QACA,UAAA,IAAA,EAAA;UACA,OAAA,CAAA,KAAA,GAAA,IAAA;UACA,OAAA,CAAA,qBAAA,EAAA;QACA,CAAS,CAAA;QACT,IAAA,CAAA,SAAA,CAAA,mBAAA,CAAA,IAAA,CAAgD,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA,SAAA;QAAA;AACzD;AACA;AACA;QACA,UAAA,KAAA,EAAA;UACA,OAAA,CAAA,cAAA,GAAA,KAAA;UACA,MAAA,CAAA,GAAA;UAAA;AACA;AACA;UACA;YAAA,OAAA,OAAA,CAAA,UAAA,CAAA,IAAA,CAAA,OAAA,CAAA,cAAA,CAAA;UAAA,EAAA;UACA,OAAA,CAAA,qBAAA,EAAA;QACA,CAAS,CAAA;QACT,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA;MACA;MACA;AACA;AACA;AACA;MAHA,YAAA,CAAA,eAAA;QAAA,GAAA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA;UACA,OAAA,IAAA,CAAA,gBAAA;QACA;QACA;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,KAAA,EAAA;UACA,IAAA,CAAA,gBAAA,GAAA,KAAA;UACA;UACA,IAAA,EAAA,GAAmB,MAAA,CAAA,qDAAA,CAAA,cAAA,CAAA,CAAY,CAAA,KAAA,CAAA,GAAA,KAAA;UAC/B;UACA,IAAgB,qDAAA,CAAA,iBAAA,CAAe,CAAA,KAAA,YAAkB,iCAAA,CAAA,YAAA,CAAU,GAAA,KAAA,GAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,IAAA,EAAA,CAAA,CAAA;UAC3D,IAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,EAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,GAAA,EAKA,SAAA,IAAA,EAAA;UACA,OAAA,IAAA,CAAA,qBAAA;QACA;QACA;AACA;AACA;AACA,WAHA;QAAA,GAAA,EAIA,SAAA,IAAA,EAAA,EAAA;UAAA,IAAA,OAAA;UACA,IAAA,CAAA,YAAA,GAAA,IAAA;UACA,IAAA,CAAA,qBAAA,GAAA,EAAA;UACA;AACA;AACA;AACA;AACA;UACA,UAAA,KAAA,EAAA,IAAA;YAAA,OAAA,EAAA,CAAA,KAAA,IAAA,OAAA,CAAA,cAAA,GAAA,OAAA,CAAA,cAAA,CAAA,KAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA;UAAA,IACA,SAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,GAAA,EAKA,SAAA,IAAA,KAAA,EAAA;UACA,IAAA,KAAA,EAAA;YACA,IAAA,CAAA,YAAA,GAAA,IAAA;YACA,IAAA,CAAA,SAAA,GAAA,KAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAPA;QAAA,GAAA;QAAA,KAAA,EAQA,SAAA,iBAAA,KAAA,EAAA,WAAA,EAAA;UACA,IAAA,KAAA,CAAA,KAAA,IAAA,KAAA,CAAA,GAAA,EAAA;YACA,OAAA,CAAA;UACA;UACA,IAAA,KAAA,CAAA,KAAA,GAAA,IAAA,CAAA,cAAA,CAAA,KAAA,IAAA,KAAA,CAAA,GAAA,GAAA,IAAA,CAAA,cAAA,CAAA,GAAA,EAAA;YACA,MAAA,KAAA,4DAAA;UACA;UACA;UACA;UACA,IAAA,kBAAA,GAAA,KAAA,CAAA,KAAA,GAAA,IAAA,CAAA,cAAA,CAAA,KAAA;UACA;UACA;UACA,IAAA,QAAA,GAAA,KAAA,CAAA,GAAA,GAAA,KAAA,CAAA,KAAA;UACA;UACA;UACA,IAAA,SAAA,GAAA,CAAA;UACA;UACA,IAAA,CAAA,GAAA,QAAA;UACA,OAAA,CAAA,EAAA,EAAA;YACA;YACA,IAAA,IAAA,GAAA,gBAAuC,IAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA,CAAA;YACvC;YACA,IAAA,CAAA,GAAA,IAAA,GAAA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA;YACA,OAAA,CAAA,EAAA,EAAA;cACA,SAAA,IAAA,OAAA,CAAA,WAAA,EAAA,gBAAgE,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;YAChE;UACA;UACA,OAAA,SAAA;QACA;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,UAAA,EAAA;UACA,IAAA,IAAA,CAAA,OAAA,IAAA,IAAA,CAAA,YAAA,EAAA;YACA;YACA;YACA;YACA;YACA,IAAA,OAAA,GAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA;YACA,IAAA,CAAA,OAAA,EAAA;cACA,IAAA,CAAA,cAAA,EAAA;YACA,CAAA,MACA;cACA,IAAA,CAAA,aAAA,CAAA,OAAA,CAAA;YACA;YACA,IAAA,CAAA,YAAA,GAAA,KAAA;UACA;QACA;QACA;AACA;AACA;MAFA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,SAAA,CAAA,MAAA,EAAA;UACA,IAAA,CAAA,kBAAA,CAAA,IAAA,EAAA;UACA,IAAA,CAAA,kBAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,UAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,UAAA,CAAA,IAAA,EAAA;UACA,IAAA,CAAA,UAAA,CAAA,QAAA,EAAA;UAAA,IAAA,UAAA,GAAA,0BAAA,CACA,IAAA,CAAA,cAAA;YAAA,MAAA;UAAA;YAAA,KAAA,UAAA,CAAA,CAAA,MAAA,MAAA,GAAA,UAAA,CAAA,CAAA,IAAA,IAAA,GAAA;cAAA,IAAA,IAAA,GAAA,MAAA,CAAA,KAAA;cACA,IAAA,CAAA,OAAA,EAAA;YACA;UAAA,SAAA,GAAA;YAAA,UAAA,CAAA,CAAA,CAAA,GAAA;UAAA;YAAA,UAAA,CAAA,CAAA;UAAA;QACA;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,sBAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA,cAAA,EAAA;YACA;UACA;UACA,IAAA,CAAA,cAAA,GAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,cAAA,CAAA,KAAA,EAAA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA;UACA,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA;YACA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,oBAAA,CAAA;UACA;UACA,IAAA,CAAA,YAAA,GAAA,IAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;MANA;QAAA,GAAA;QAAA,KAAA,EAOA,SAAA,kBAAA,KAAA,EAAA,KAAA,EAAA;UACA,IAAA,KAAA,EAAA;YACA,KAAA,CAAA,UAAA,CAAA,IAAA,CAAA;UACA;UACA,IAAA,CAAA,YAAA,GAAA,IAAA;UACA,OAAA,KAAA,GAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAA6C,MAAA,CAAA,iCAAA,CAAA,IAAA,CAAA,CAAE,EAAA;QAC/C;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,eAAA,EAAA;UACA;UACA,IAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,MAAA;UACA;UACA,IAAA,CAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,MAAA;UACA,OAAA,CAAA,EAAA,EAAA;YACA;YACA,IAAA,IAAA,GAAA,gBAAqC,IAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,CAAA;YACrC,IAAA,CAAA,OAAA,CAAA,KAAA,GAAA,IAAA,CAAA,cAAA,CAAA,KAAA,GAAA,CAAA;YACA,IAAA,CAAA,OAAA,CAAA,KAAA,GAAA,KAAA;YACA,IAAA,CAAA,gCAAA,CAAA,IAAA,CAAA,OAAA,CAAA;YACA,IAAA,CAAA,aAAA,EAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,cAAA,OAAA,EAAA;UAAA,IAAA,OAAA;UACA;UACA,OAAA,CAAA,gBAAA;UAAA;AACA;AACA;AACA;AACA;AACA;UACA,UAAA,MAAA,EAAA,qBAAA,EAAA,YAAA,EAAA;YACA,IAAA,MAAA,CAAA,aAAA,IAAA,IAAA,EAAA;cAA+C;cAC/C;cACA;cACA,IAAA,IAAA,GAAA,OAAA,CAAA,qBAAA,EAAA,gBAAsE,YAAA,CAAA;cACtE,IAAA,CAAA,OAAA,CAAA,SAAA,GAAA,MAAA,CAAA,IAAA;YACA,CAAA,MACA,IAAA,YAAA,IAAA,IAAA,EAAA;cAA4C;cAC5C,OAAA,CAAA,UAAA,CAAA,OAAA,CAAA,WAAA,EAAA,gBAA+D,qBAAA,CAAA,CAAA;YAC/D,CAAA,MACA;cAAkB;cAClB;cACA;cACA,IAAA,KAAA,GAAA,gBAA2C,OAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,gBAA8C,qBAAA,CAAA;cACzF,OAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,KAAA,EAAA,YAAA,CAAA;cACA,KAAA,CAAA,OAAA,CAAA,SAAA,GAAA,MAAA,CAAA,IAAA;YACA;UACA,CAAS,CAAA;UACT;UACA,OAAA,CAAA,qBAAA;UAAA;AACA;AACA;AACA;UACA,UAAA,MAAA,EAAA;YACA;YACA,IAAA,IAAA,GAAA,gBAAuC,OAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,gBAA8C,MAAA,CAAA,YAAA,CAAA;YACrF,IAAA,CAAA,OAAA,CAAA,SAAA,GAAA,MAAA,CAAA,IAAA;UACA,CAAS,CAAA;UACT;UACA;UACA,IAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,MAAA;UACA;UACA,IAAA,CAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,MAAA;UACA,OAAA,CAAA,EAAA,EAAA;YACA;YACA,IAAA,IAAA,GAAA,gBAAuC,IAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,CAAA;YACvC,IAAA,CAAA,OAAA,CAAA,KAAA,GAAA,IAAA,CAAA,cAAA,CAAA,KAAA,GAAA,CAAA;YACA,IAAA,CAAA,OAAA,CAAA,KAAA,GAAA,KAAA;YACA,IAAA,CAAA,gCAAA,CAAA,IAAA,CAAA,OAAA,CAAA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,WAAA,IAAA,EAAA;UACA,IAAA,IAAA,CAAA,cAAA,CAAA,MAAA,GAAA,IAAA,CAAA,8BAAA,EAAA;YACA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA,CAAA;UACA,CAAA,MACA;YACA;YACA,IAAA,KAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,IAAA,CAAA;YACA;YACA;YACA;YACA,IAAA,KAAA,KAAA,CAAA,CAAA,EAAA;cACA,IAAA,CAAA,OAAA,EAAA;YACA,CAAA,MACA;cACA,IAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,KAAA,CAAA;YACA;UACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,sBAAA,KAAA,EAAA;UACA,OAAA,IAAA,CAAA,oBAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,qBAAA,CAAA,KAAA,CAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,iCAAA,OAAA,EAAA;UACA,OAAA,CAAA,KAAA,GAAA,OAAA,CAAA,KAAA,KAAA,CAAA;UACA,OAAA,CAAA,IAAA,GAAA,OAAA,CAAA,KAAA,KAAA,OAAA,CAAA,KAAA,GAAA,CAAA;UACA,OAAA,CAAA,IAAA,GAAA,OAAA,CAAA,KAAA,GAAA,CAAA,KAAA,CAAA;UACA,OAAA,CAAA,GAAA,GAAA,CAAA,OAAA,CAAA,IAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,sBAAA,KAAA,EAAA;UACA;UACA;UACA;UACA;UACA,OAAA,IAAA,CAAA,iBAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,SAAA,EAAA;YACA,SAAA,EAAA,gBAAqC,IAAA;YACrC,eAAA,EAAA,IAAA,CAAA,gBAAA;YACA,KAAA,EAAA,CAAA,CAAA;YACA,KAAA,EAAA,CAAA,CAAA;YACA,KAAA,EAAA,KAAA;YACA,IAAA,EAAA,KAAA;YACA,GAAA,EAAA,KAAA;YACA,IAAA,EAAA;UACA,CAAS,EAAA,KAAA,CAAA;QACT;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,qBAAA,KAAA,EAAA;UACA;UACA,IAAA,UAAA,GAAA,IAAA,CAAA,cAAA,CAAA,GAAA,EAAA;UACA,IAAA,UAAA,EAAA;YACA,IAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,EAAA,KAAA,CAAA;UACA;UACA,OAAA,UAAA,IAAA,IAAA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;MALA;QAAA,GAAA;QAAA,KAAA,EAMA,SAAA,YAAA,KAAA,EAAA;UACA,OAAA,iBAA6B,IAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,KAAA;UAAA;QAC7B;MAAA;MAAA,OAAA,eAAA;IAAA;IAEA,eAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAS;MAAA,IAAA,EAAA,CAAA;QACrB,QAAA,EAAA;MACA,CAAa;IAAA,CAAI,CACjB;IACA;IACA,eAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAO,0CAAA,CAAA,kBAAA;MAAgB,CAAE,EAC9B;QAAK,IAAA,EAAO,0CAAA,CAAA,aAAA;MAAW,CAAE,EACzB;QAAK,IAAA,EAAO,0CAAA,CAAA,iBAAA;MAAe,CAAE,EAC7B;QAAK,IAAA,EAAA,wBAAA;QAAA,UAAA,EAAA,CAAA;UAA+C,IAAA,EAAO,0CAAA,CAAA,UAAA;QAAQ,CAAE;MAAA,CAAG,EACxE;QAAK,IAAA,EAAO,0CAAA,CAAA,QAAA;MAAM,CAAA,CAClB;IAAA;IACA,eAAA,CAAA,cAAA,GAAA;MACA,eAAA,EAAA,CAAA;QAAuB,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE,CAAA;MACrC,oBAAA,EAAA,CAAA;QAA4B,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE,CAAA;MAC1C,qBAAA,EAAA,CAAA;QAA6B,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE,CAAA;MAC3C,8BAAA,EAAA,CAAA;QAAsC,IAAA,EAAO,0CAAA,CAAA,OAAA;MAAK,CAAE;IACpD,CAAA;;IAEA;AACA;AACA;AACA;IAHA,IAIA,eAAA,gBAAA,YAAA,UAAA,gBAAA;MAAA,eAAA,OAAA,eAAA;IAAA;IAEA,eAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,UAAA,CAAQ;MAAA,IAAA,EAAA,CAAA;QACpB,OAAA,EAAA,CAA0B,8CAAA,CAAA,YAAA,CAAU,EAAE,kDAAA,CAAA,gBAAA,CAAc,CAAA;QACpD,OAAA,EAAA,CACoB,8CAAA,CAAA,YAAA,CAAU,EAC9B,yBAAA,EACA,aAAA,EACA,eAAA,EACA,wBAAA,CACA;QACA,YAAA,EAAA,CACA,yBAAA,EACA,aAAA,EACA,eAAA,EACA,wBAAA;MAEA,CAAa;IAAA,CAAI,CACjB;IACA;AACA;AACA;AACA;IAHA,IAIA,oBAAA,gBAAA,YAAA,UAAA,qBAAA;MAAA,eAAA,OAAA,oBAAA;IAAA;IAEA,oBAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,UAAA,CAAQ;MAAA,IAAA,EAAA,CAAA;QACpB,OAAA,EAAA,CAAA,eAAA,CAAA;QACA,OAAA,EAAA,CAAA,eAAA;MACA,CAAa;IAAA,CAAI,CACjB;;IAEA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;IACA,IAAA,mBAAA,GAAA,EAAA;IACA;AACA;AACA;AACA;IAHA,IAIA,aAAA;MACA;AACA;AACA;AACA;MACA,SAAA,cAAA,SAAA,EAAA,MAAA,EAAA;QAAA,IAAA,OAAA;QAAA,eAAA,OAAA,aAAA;QACA,IAAA,CAAA,SAAA,GAAA,SAAA;QACA,MAAA,CAAA,iBAAA;QAAA;AACA;AACA;QACA,YAAA;UACA,OAAA,CAAA,OAAA,GAAA,SAAA,CAAA,SAAA,GACgB,MAAA,CAAA,iCAAA,CAAA,OAAA,CAAA,CAAK,CAAC,MAAA,CAAA,iCAAA,CAAA,WAAA,CAAA,CAAS,CAAA,MAAA,EAAA,QAAA,CAAA,EAAoB,MAAA,CAAA,iCAAA,CAAA,WAAA,CAAA,CAAS,CAAA,MAAA,EAAA,mBAAA,CAAA,CAAA,GAC5C,MAAA,CAAA,iCAAA,CAAA,IAAA,CAAA,CAAE,EAAA;UAClB;UACA;UACA,OAAA,CAAA,gBAAA,GAAA,OAAA,CAAA,MAAA,EAAA,CAAA,SAAA;UAAA;AACA;AACA;UACA;YAAA,OAAA,OAAA,CAAA,mBAAA,EAAA;UAAA,EAAA;QACA,CAAS,CAAA;MACT;MACA;AACA;AACA;MAFA,YAAA,CAAA,aAAA;QAAA,GAAA;QAAA,KAAA,EAGA,SAAA,YAAA,EAAA;UACA,IAAA,CAAA,gBAAA,CAAA,WAAA,EAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,gBAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA,aAAA,EAAA;YACA,IAAA,CAAA,mBAAA,EAAA;UACA;UACA;UACA,IAAA,MAAA,GAAA;YAAwB,KAAA,EAAA,IAAA,CAAA,aAAA,CAAA,KAAA;YAAA,MAAA,EAAA,IAAA,CAAA,aAAA,CAAA;UAAA,CAAA;UACxB;UACA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,EAAA;YACA,IAAA,CAAA,aAAA,GAAA,gBAA+C,IAAA;UAC/C;UACA,OAAA,MAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,gBAAA,EAAA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,IAAA,cAAA,GAAA,IAAA,CAAA,yBAAA,EAAA;UACA,IAAA,qBAAA,GAA+B,IAAA,CAAA,eAAA,EAAA;YAAhB,KAAA,GAAA,qBAAA,CAAA,KAAA;YAAA,MAAA,GAAA,qBAAA,CAAA,MAAA;UACf,OAAA;YACA,GAAA,EAAA,cAAA,CAAA,GAAA;YACA,IAAA,EAAA,cAAA,CAAA,IAAA;YACA,MAAA,EAAA,cAAA,CAAA,GAAA,GAAA,MAAA;YACA,KAAA,EAAA,cAAA,CAAA,IAAA,GAAA,KAAA;YACA,MAAA,EAAA,MAAA;YACA,KAAA,EAAA;UACA,CAAA;QACA;QACA;AACA;AACA;AACA;MAHA;QAAA,GAAA;QAAA,KAAA,EAIA,SAAA,0BAAA,EAAA;UACA;UACA;UACA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,EAAA;YACA,OAAA;cAAoB,GAAA,EAAA,CAAA;cAAA,IAAA,EAAA;YAAA,CAAA;UACpB;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,IAAA,eAAA,GAAA,gBAA8C,QAAA,CAAA,eAAA;UAC9C;UACA,IAAA,YAAA,GAAA,eAAA,CAAA,qBAAA,EAAA;UACA;UACA,IAAA,GAAA,GAAA,CAAA,YAAA,CAAA,GAAA,IAAA,QAAA,CAAA,IAAA,CAAA,SAAA,IAAA,MAAA,CAAA,OAAA,IACA,eAAA,CAAA,SAAA,IAAA,CAAA;UACA;UACA,IAAA,IAAA,GAAA,CAAA,YAAA,CAAA,IAAA,IAAA,QAAA,CAAA,IAAA,CAAA,UAAA,IAAA,MAAA,CAAA,OAAA,IACA,eAAA,CAAA,UAAA,IAAA,CAAA;UACA,OAAA;YAAgB,GAAA,EAAA,GAAA;YAAA,IAAA,EAAA;UAAA,CAAA;QAChB;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,OAAA,EAAA;UAAA,IAAA,YAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAA,mBAAA;UACA,OAAA,YAAA,GAAA,CAAA,GAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAoD,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAS,CAAA,YAAA,CAAA,CAAA,GAAA,IAAA,CAAA,OAAA;QAC7D;QACA;AACA;AACA;AACA;AACA;MAJA;QAAA,GAAA;QAAA,KAAA,EAKA,SAAA,oBAAA,EAAA;UACA,IAAA,CAAA,aAAA,GAAA,IAAA,CAAA,SAAA,CAAA,SAAA,GACA;YAAa,KAAA,EAAA,MAAA,CAAA,UAAA;YAAA,MAAA,EAAA,MAAA,CAAA;UAAA,CAAuD,GACpE;YAAa,KAAA,EAAA,CAAA;YAAA,MAAA,EAAA;UAAA,CAAA;QACb;MAAA;MAAA,OAAA,aAAA;IAAA;IAEA,aAAA,CAAA,UAAA,GAAA,CACA;MAAK,IAAA,EAAO,0CAAA,CAAA,YAAA,CAAU;MAAA,IAAA,EAAA,CAAA;QAAU,UAAA,EAAA;MAAA,CAAqB;IAAA,CAAI,CACzD;IACA;IACA,aAAA,CAAA,cAAA,GAAA;MAAA,OAAA,CACA;QAAK,IAAA,EAAO,kDAAA,CAAA,UAAA;MAAQ,CAAE,EACtB;QAAK,IAAA,EAAO,0CAAA,CAAA,QAAA;MAAM,CAAA,CAClB;IAAA;IACA;IAAA,aAAA,CAAA,eAAA,GAAmD,MAAA,CAAA,0CAAA,CAAA,oBAAA,CAAA,CAAkB,CAAA;MAAE,OAAA,EAAA,SAAA,qBAAA,CAAA,EAAA;QAA4C,OAAA,IAAA,aAAA,CAA0B,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAC,kDAAA,CAAA,UAAA,CAAQ,CAAA,EAAG,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAQ,CAAC,0CAAA,CAAA,QAAA,CAAM,CAAA,CAAA;MAAG,CAAE;MAAA,KAAA,EAAA,aAAA;MAAA,UAAA,EAAA;IAAA,CAA4C,CAAA;IACjO;AACA;AACA;AACA;AACA;AACA;AACA;IACA,SAAA,+BAAA,CAAA,WAAA,EAAA,QAAA,EAAA,MAAA,EAAA;MACA,OAAA,WAAA,IAAA,IAAA,aAAA,CAAA,QAAA,EAAA,MAAA,CAAA;IACA;IACA;AACA;AACA;AACA;IACA,IAAA,uBAAA,GAAA;MACA;MACA,OAAA,EAAA,aAAA;MACA,IAAA,EAAA,CAAA,CAAA,IAAgB,0CAAA,CAAA,UAAA,CAAQ,EAAA,EAAA,IAAQ,0CAAA,CAAA,UAAA,CAAQ,EAAA,EAAA,aAAA,CAAA,EAAoB,kDAAA,CAAA,UAAA,CAAQ,EAAE,0CAAA,CAAA,QAAA,CAAM,CAAA;MAC5E,UAAA,EAAA;IACA,CAAA;;IAEA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;;IAGA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { inject, InjectionToken, EventEmitter, Inject, Injectable, Optional, Directive, Output, Input, NgModule, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * \\@docs-private\n * @type {?}\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    /**\n     * @param {?=} _document\n     */\n    constructor(_document) {\n        /**\n         * The current 'ltr' or 'rtl' value.\n         */\n        this.value = 'ltr';\n        /**\n         * Stream that emits whenever the 'ltr' / 'rtl' state changes.\n         */\n        this.change = new EventEmitter();\n        if (_document) {\n            // TODO: handle 'auto' value -\n            // We still need to account for dir=\"auto\".\n            // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n            // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n            /** @type {?} */\n            const bodyDir = _document.body ? _document.body.dir : null;\n            /** @type {?} */\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            /** @type {?} */\n            const value = bodyDir || htmlDir;\n            this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDirectionality.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nDirectionality.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DIR_DOCUMENT,] }] }\n];\n/** @nocollapse */ Directionality.ngInjectableDef = ɵɵdefineInjectable({ factory: function Directionality_Factory() { return new Directionality(ɵɵinject(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /**\n         * Normalized direction that accounts for invalid/unsupported values.\n         */\n        this._dir = 'ltr';\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Event emitted when the direction changes.\n         */\n        this.change = new EventEmitter();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    get dir() { return this._dir; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set dir(value) {\n        /** @type {?} */\n        const old = this._dir;\n        /** @type {?} */\n        const normalizedValue = value ? value.toLowerCase() : value;\n        this._rawDir = value;\n        this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\n        if (old !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /**\n     * Current layout direction of the element.\n     * @return {?}\n     */\n    get value() { return this.dir; }\n    /**\n     * Initialize once default value has been set.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDir.decorators = [\n    { type: Directive, args: [{\n                selector: '[dir]',\n                providers: [{ provide: Directionality, useExisting: Dir }],\n                host: { '[attr.dir]': '_rawDir' },\n                exportAs: 'dir',\n            },] },\n];\nDir.propDecorators = {\n    change: [{ type: Output, args: ['dirChange',] }],\n    dir: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BidiModule {\n}\nBidiModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [Dir],\n                declarations: [Dir],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Directionality, DIR_DOCUMENT, Dir, BidiModule, DIR_DOCUMENT_FACTORY as ɵa };\n//# sourceMappingURL=bidi.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat((/** @type {?} */ (value)))) && !isNaN(Number(value));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wraps the provided value in an array, unless the provided value is an array.\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Coerces a value to a CSS pixel value.\n * @param {?} value\n * @return {?}\n */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n * @template T\n * @param {?} elementOrRef\n * @return {?}\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { coerceBooleanProperty, coerceNumberProperty, _isNumberValue, coerceArray, coerceCssPixelValue, coerceElement };\n//# sourceMappingURL=coercion.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable, of, Subject } from 'rxjs';\nimport { Injectable, ɵɵdefineInjectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n * @template T\n */\nclass DataSource {\n}\n/**\n * Checks whether an object is a data source.\n * @param {?} value\n * @return {?}\n */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\nclass ArrayDataSource extends DataSource {\n    /**\n     * @param {?} _data\n     */\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    /**\n     * @return {?}\n     */\n    connect() {\n        return this._data instanceof Observable ? this._data : of(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nclass SelectionModel {\n    /**\n     * @param {?=} _multiple\n     * @param {?=} initiallySelectedValues\n     * @param {?=} _emitChanges\n     */\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected options that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.changed = new Subject();\n        /**\n         * Event emitted when the value has changed.\n         * @deprecated Use `changed` instead.\n         * \\@breaking-change 8.0.0 To be changed to `changed`\n         */\n        this.onChange = this.changed;\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                value => this._markSelected(value)));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selected values.\n     * @return {?}\n     */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._markSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._unmarkSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            (/** @type {?} */ (this._selected)).sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /**\n     * Selects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Deselects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Clears out the selected values.\n     * @private\n     * @return {?}\n     */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => this._unmarkSelected(value)));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return (/**\n         * @return {?}\n         */\n        () => {\n            this._listeners = this._listeners.filter((/**\n             * @param {?} registered\n             * @return {?}\n             */\n            (registered) => {\n                return listener !== registered;\n            }));\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { UniqueSelectionDispatcher, ArrayDataSource, isDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel };\n//# sourceMappingURL=collections.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { normalizePassiveListenerOptions, _supportsShadowDom } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subscription, Subject, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { startWith, takeUntil, take, map, switchMap, tap } from 'rxjs/operators';\nimport { Injectable, NgZone, Inject, InjectionToken, NgModule, ContentChildren, ElementRef, EventEmitter, forwardRef, Input, Output, Optional, Directive, ChangeDetectorRef, SkipSelf, ContentChild, ViewContainerRef, isDevMode, TemplateRef, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = (/** @type {?} */ (source[key]));\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * \\@docs-private\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being resized.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const pointerPosition = this._getPointerPositionOnPage(event);\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + (this.dragStartDelay || 0);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n            this._hasMoved = true;\n            event.preventDefault();\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\n                .change(10)\n                .subscribe((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeElement(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._nextSibling = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(position);\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeElement(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeElement(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        if (this._dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            // Grab the `nextSibling` before the preview and placeholder\n            // have been created so we don't get the preview by accident.\n            this._nextSibling = element.nextSibling;\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild((/** @type {?} */ (element.parentNode)).replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n        }\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        this._initialContainer = (/** @type {?} */ (this._dropContainer));\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview template, the element won't be visible anyway so we avoid the\n        // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n        this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n            { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        if (this._nextSibling) {\n            (/** @type {?} */ (this._nextSibling.parentNode)).insertBefore(this._rootElement, this._nextSibling);\n        }\n        else {\n            coerceElement(this._initialContainer.element).appendChild(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialContainer.getItemIndex(this),\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            preview.style.transform =\n                getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const elementRect = element.getBoundingClientRect();\n            preview = deepCloneNode(element);\n            preview.style.width = `${elementRect.width}px`;\n            preview.style.height = `${elementRect.height}px`;\n            preview.style.transform = getTransform(elementRect.left, elementRect.top);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(event) {\n        /** @type {?} */\n        const point = this._getPointerPositionOnPage(event);\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /**\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\n     * @private\n     * @return {?}\n     */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     * @private\n     * @return {?}\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        /** @type {?} */\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        /** @type {?} */\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        /** @type {?} */\n        const topOverflow = boundaryRect.top - elementRect.top;\n        /** @type {?} */\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param {?} element Element to be removed.\n * @return {?}\n */\nfunction removeElement(element) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n * @param {?} viewRef\n * @param {?} _document\n * @return {?}\n */\nfunction getRootNode(viewRef, _document) {\n    /** @type {?} */\n    const rootNode = viewRef.rootNodes[0];\n    if (rootNode.nodeType !== _document.ELEMENT_NODE) {\n        /** @type {?} */\n        const wrapper = _document.createElement('div');\n        wrapper.appendChild(rootNode);\n        return wrapper;\n    }\n    return (/** @type {?} */ (rootNode));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop refs.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * \\@docs-private\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?=} _ngZone\n     * @param {?=} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Unique ID for the drop list.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 8.0.0\n         */\n        this.id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the container's scroll position.\n         */\n        this._scrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the scroll position of the viewport.\n         */\n        this._viewportScrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Handles the container being scrolled. Has to be an arrow function to preserve the context.\n         */\n        this._handleScroll = (/**\n         * @return {?}\n         */\n        () => {\n            if (!this.isDragging()) {\n                return;\n            }\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            this._updateAfterScroll(this._scrollPosition, element.scrollTop, element.scrollLeft);\n        });\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        /** @type {?} */\n        const nativeNode = this.element = coerceElement(element);\n        this._shadowRoot = getShadowRoot(nativeNode) || _document;\n        _dragDropRegistry.registerDropContainer(this);\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this.beforeStarted.next();\n        this._isDragging = true;\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._removeListeners();\n        // @breaking-change 9.0.0 Remove check for _ngZone once it's marked as a required param.\n        if (this._ngZone) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => element.addEventListener('scroll', this._handleScroll)));\n        }\n        else {\n            element.addEventListener('scroll', this._handleScroll);\n        }\n        // @breaking-change 9.0.0 Remove check for _viewportRuler once it's marked as a required param.\n        if (this._viewportRuler) {\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n        if (newIndex === -1) {\n            // We use the coordinates of where the item entered the drop\n            // zone to figure out at which index it should be inserted.\n            newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * \\@breaking-change 9.0.0 `distance` parameter to become required.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?=} distance Distance the user has dragged since the start of the dragging sequence.\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance = { x: 0, y: 0 }) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex: previousContainer.getItemIndex(item),\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            (/** @type {?} */ (this))._cacheItems();\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling the container.\n        if (this._isPointerNearDropContainer(pointerX, pointerY)) {\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            [verticalScrollDirection, horizontalScrollDirection] =\n                getElementScrollDirections(element, this._clientRect, pointerX, pointerY);\n            if (verticalScrollDirection || horizontalScrollDirection) {\n                scrollNode = element;\n            }\n        }\n        // @breaking-change 9.0.0 Remove null check for _viewportRuler once it's a required parameter.\n        // Otherwise check if we can start scrolling the viewport.\n        if (this._viewportRuler && !verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                // @breaking-change 9.0.0 Remove null check for `_ngZone` once it is made required.\n                if (this._ngZone) {\n                    this._ngZone.runOutsideAngular(this._startScrollInterval);\n                }\n                else {\n                    this._startScrollInterval();\n                }\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    _cacheOwnPosition() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this._clientRect = getMutableClientRect(element);\n        this._scrollPosition = { top: element.scrollTop, left: element.scrollLeft };\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n                // If the element is being dragged, we have to measure the\n                // placeholder, because the element is hidden.\n                drag.getPlaceholderElement() :\n                drag.getRootElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item.getRootElement().style.transform = ''));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._removeListeners();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    _isPointerNearDropContainer(pointerX, pointerY) {\n        const { top, right, bottom, left, width, height } = this._clientRect;\n        /** @type {?} */\n        const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n        /** @type {?} */\n        const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheOwnPosition();\n    }\n    /**\n     * Updates the internal state of the container after a scroll event has happened.\n     * @private\n     * @param {?} scrollPosition Object that is keeping track of the scroll position.\n     * @param {?} newTop New top scroll position.\n     * @param {?} newLeft New left scroll position.\n     * @param {?=} extraClientRect Extra `ClientRect` object that should be updated, in addition to the\n     *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update\n     *  the `ClientRect` of the list.\n     * @return {?}\n     */\n    _updateAfterScroll(scrollPosition, newTop, newLeft, extraClientRect) {\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        if (extraClientRect) {\n            adjustClientRect(extraClientRect, topDifference, leftDifference);\n        }\n        // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n        // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n        // behavior where we might be measuring the element before its position has changed.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        }));\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n    }\n    /**\n     * Removes the event listeners associated with this drop list.\n     * @private\n     * @return {?}\n     */\n    _removeListeners() {\n        coerceElement(this.element).removeEventListener('scroll', this._handleScroll);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._shadowRoot.elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheOwnPosition();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     * @private\n     * @return {?}\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.isDragging()) {\n                /** @type {?} */\n                const newPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n                this._updateAfterScroll(this._viewportScrollPosition, newPosition.top, newPosition.left, this._clientRect);\n            }\n            else if (this.isReceiving()) {\n                this._cacheOwnPosition();\n            }\n        }));\n    }\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param {?} element Element for which we should calculate the scroll direction.\n * @param {?} clientRect Bounding client rectangle of the element.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    /** @type {?} */\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    /** @type {?} */\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    /** @type {?} */\n    let verticalScrollDirection = 0 /* NONE */;\n    /** @type {?} */\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        /** @type {?} */\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        /** @type {?} */\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n/**\n * Gets the shadow root of an element, if any.\n * @param {?} element\n * @return {?}\n */\nfunction getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        /** @type {?} */\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        if (rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            if (this.getDropContainer(drop.id)) {\n                throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n            }\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e)),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 8.0.0\n     * @param {?} id\n     * @return {?}\n     */\n    getDropContainer(id) {\n        return Array.from(this._dropInstances).find((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => instance.id === id));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ngInjectableDef = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ngInjectableDef = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * \\@breaking-change 8.0.0\n * @type {?}\n */\nconst CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            },] },\n];\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            },] },\n];\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPreview.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            },] },\n];\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the behavior of `CdkDrag`.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG', {\n    providedIn: 'root',\n    factory: CDK_DRAG_CONFIG_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, config);\n        this._dragRef.data = this;\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Selector that will be used to determine the element to which the draggable's position will\n     * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n     * element has been found\n     * @deprecated Use `boundaryElement` instead.\n     * \\@breaking-change 9.0.0\n     * @return {?}\n     */\n    get boundaryElementSelector() {\n        return typeof this.boundaryElement === 'string' ? this.boundaryElement : (/** @type {?} */ (undefined));\n    }\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    set boundaryElementSelector(selector) {\n        this.boundaryElement = selector;\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => item._stateChanges)));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = coerceNumberProperty(this.dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n}\nCdkDrag.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            },] },\n];\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview, { static: false },] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder, { static: false },] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n            },] },\n];\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter$1 = 0;\nconst ɵ0 = undefined;\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this.orientation = 'vertical';\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter$1++}`;\n        this._disabled = false;\n        this._sortingDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._syncInputs(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @return {?}\n     */\n    get sortingDisabled() { return this._sortingDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set sortingDisabled(value) {\n        this._sortingDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._draggables.changes\n            .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} items\n         * @return {?}\n         */\n        (items) => {\n            this._dropListRef.withItems(items.map((/**\n             * @param {?} drag\n             * @return {?}\n             */\n            drag => drag._dragRef)));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, ((/** @type {?} */ (previousContainer)))._dropListRef, isPointerOverContainer);\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        /** @type {?} */\n        const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n        return result ? result.data : null;\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return this._dropListRef._isOverContainer(x, y);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n}\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\nCdkDropList.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                }\n            },] },\n];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] }\n];\nCdkDropList.propDecorators = {\n    _draggables: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => CdkDrag)), {\n                    // Explicitly set to false since some of the logic below makes assumptions about it.\n                    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n                    descendants: false\n                },] }],\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DragDrop, DragRef, DropListRef, CdkDropList, CDK_DROP_LIST, CDK_DROP_LIST_CONTAINER, moveItemInArray, transferArrayItem, copyArrayItem, DragDropModule, DragDropRegistry, CdkDropListGroup, CDK_DRAG_CONFIG_FACTORY, CDK_DRAG_CONFIG, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder, CDK_DRAG_PARENT as ɵb };\n//# sourceMappingURL=drag-drop.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Inject, Injectable, Optional, PLATFORM_ID, NgModule, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\n/** @type {?} */\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = (typeof Intl !== 'undefined' && ((/** @type {?} */ (Intl))).v8BreakIterator);\n}\ncatch (_a) {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    /**\n     * \\@breaking-change 8.0.0 remove optional decorator\n     * @param {?=} _platformId\n     */\n    constructor(_platformId) {\n        this._platformId = _platformId;\n        /**\n         * Whether the Angular application is being rendered in the browser.\n         * We want to use the Angular platform check because if the Document is shimmed\n         * without the navigator, the following checks will fail. This is preferred because\n         * sometimes the Document may be shimmed without the user's knowledge or intention\n         */\n        this.isBrowser = this._platformId ?\n            isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n        /**\n         * Whether the current browser is Microsoft Edge.\n         */\n        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n        /**\n         * Whether the current rendering engine is Microsoft Trident.\n         */\n        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n        /**\n         * Whether the current rendering engine is Blink.\n         */\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n        this.BLINK = this.isBrowser && (!!(((/** @type {?} */ (window))).chrome || hasV8BreakIterator) &&\n            typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n        /**\n         * Whether the current rendering engine is WebKit.\n         */\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n        this.WEBKIT = this.isBrowser &&\n            /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n        /**\n         * Whether the current platform is Apple iOS.\n         */\n        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n            !('MSStream' in window);\n        /**\n         * Whether the current browser is Firefox.\n         */\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n        /**\n         * Whether the current platform is Android.\n         */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n        /**\n         * Whether the current browser is Safari.\n         */\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n}\nPlatform.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nPlatform.ctorParameters = () => [\n    { type: Object, decorators: [{ type: Optional }, { type: Inject, args: [PLATFORM_ID,] }] }\n];\n/** @nocollapse */ Platform.ngInjectableDef = ɵɵdefineInjectable({ factory: function Platform_Factory() { return new Platform(ɵɵinject(PLATFORM_ID, 8)); }, token: Platform, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PlatformModule {\n}\nPlatformModule.decorators = [\n    { type: NgModule, args: [{},] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Cached result Set of input types support by the current browser.\n * @type {?}\n */\nlet supportedInputTypes;\n/**\n * Types of `<input>` that *might* be supported.\n * @type {?}\n */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/**\n * @return {?} The input types supported by this browser.\n */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    /** @type {?} */\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter((/**\n     * @param {?} value\n     * @return {?}\n     */\n    value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    })));\n    return supportedInputTypes;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Cached result of whether the user's browser supports passive event listeners.\n * @type {?}\n */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n * @return {?}\n */\nfunction supportsPassiveEventListeners() {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', (/** @type {?} */ (null)), Object.defineProperty({}, 'passive', {\n                get: (/**\n                 * @return {?}\n                 */\n                () => supportsPassiveEvents = true)\n            }));\n        }\n        finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n    return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param {?} options Object to be normalized.\n * @return {?}\n */\nfunction normalizePassiveListenerOptions(options) {\n    return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {number} */\nconst RtlScrollAxisType = {\n    /**\n     * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n     * all the way right.\n     */\n    NORMAL: 0,\n    /**\n     * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n     * all the way right.\n     */\n    NEGATED: 1,\n    /**\n     * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n     * all the way right.\n     */\n    INVERTED: 2,\n};\nRtlScrollAxisType[RtlScrollAxisType.NORMAL] = 'NORMAL';\nRtlScrollAxisType[RtlScrollAxisType.NEGATED] = 'NEGATED';\nRtlScrollAxisType[RtlScrollAxisType.INVERTED] = 'INVERTED';\n/**\n * Cached result of the way the browser handles the horizontal scroll axis in RTL mode.\n * @type {?}\n */\nlet rtlScrollAxisType;\n/**\n * Check whether the browser supports scroll behaviors.\n * @return {?}\n */\nfunction supportsScrollBehavior() {\n    return !!(typeof document == 'object' && 'scrollBehavior' in (/** @type {?} */ (document.documentElement)).style);\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n * @return {?}\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return RtlScrollAxisType.NORMAL;\n    }\n    if (!rtlScrollAxisType) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        /** @type {?} */\n        const scrollContainer = document.createElement('div');\n        /** @type {?} */\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.height = '1px';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        /** @type {?} */\n        const content = document.createElement('div');\n        /** @type {?} */\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n        }\n        (/** @type {?} */ (scrollContainer.parentNode)).removeChild(scrollContainer);\n    }\n    return rtlScrollAxisType;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\nlet shadowDomIsSupported;\n/**\n * Checks whether the user's browser support Shadow DOM.\n * @return {?}\n */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        /** @type {?} */\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (((/** @type {?} */ (head))).createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Platform, PlatformModule, getSupportedInputTypes, supportsPassiveEventListeners, normalizePassiveListenerOptions, supportsScrollBehavior, getRtlScrollAxisType, RtlScrollAxisType, _supportsShadowDom };\n//# sourceMappingURL=platform.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, asapScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { ArrayDataSource, isDataSource } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token used to specify the virtual scrolling strategy.\n * @type {?}\n */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /**\n         * \\@docs-private Implemented as part of VirtualScrollStrategy.\n         */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /**\n         * The attached viewport.\n         */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentRendered() { }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @private\n     * @return {?}\n     */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @private\n     * @return {?}\n     */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        /** @type {?} */\n        const scrollOffset = this._viewport.measureScrollOffset();\n        /** @type {?} */\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        /** @type {?} */\n        const renderedRange = this._viewport.getRenderedRange();\n        /** @type {?} */\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        /** @type {?} */\n        const viewportSize = this._viewport.getViewportSize();\n        /** @type {?} */\n        const dataLength = this._viewport.getDataLength();\n        /** @type {?} */\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            /** @type {?} */\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            /** @type {?} */\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                /** @type {?} */\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /**\n         * The scroll strategy used by this directive.\n         */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n    get itemSize() { return this._itemSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef((/**\n                             * @return {?}\n                             */\n                            () => CdkFixedSizeVirtualScroll))],\n                    }],\n            },] },\n];\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the scrolling events by default.\n * @type {?}\n */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next(scrollable))));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    deregister(scrollable) {\n        /** @type {?} */\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            /** @type {?} */\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            });\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((/**\n         * @param {?} _\n         * @param {?} container\n         * @return {?}\n         */\n        (_, container) => this.deregister(container)));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        /** @type {?} */\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter((/**\n         * @param {?} target\n         * @return {?}\n         */\n        target => {\n            return !target || ancestors.indexOf(target) > -1;\n        })));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    getAncestorScrollContainers(elementRef) {\n        /** @type {?} */\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((/**\n         * @param {?} _subscription\n         * @param {?} scrollable\n         * @return {?}\n         */\n        (_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        }));\n        return scrollingContainers;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @private\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _scrollableContainsElement(scrollable, elementRef) {\n        /** @type {?} */\n        let element = elementRef.nativeElement;\n        /** @type {?} */\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = (/** @type {?} */ (element)).parentElement);\n        return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @private\n     * @return {?}\n     */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return fromEvent(window.document, 'scroll').subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next()));\n        }));\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @private\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform }\n];\n/** @nocollapse */ ScrollDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform)); }, token: ScrollDispatcher, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    scrollTo(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            ((/** @type {?} */ (options))).top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                ((/** @type {?} */ (options))).right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                ((/** @type {?} */ (options))).left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    _applyScrollToOptions(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        /** @type {?} */\n        const LEFT = 'left';\n        /** @type {?} */\n        const RIGHT = 'right';\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            },] },\n];\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n * @type {?}\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/**\n * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.\n */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     */\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /**\n         * Emits when the viewport is detached from a CdkVirtualForOf.\n         */\n        this._detachedSubject = new Subject();\n        /**\n         * Emits when the rendered range changes.\n         */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /**\n         * Emits when the index of the first element visible in the viewport changes.\n         */\n        this.scrolledIndexChange = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this._scrollStrategy.scrolledIndexChange.subscribe((/**\n         * @param {?} index\n         * @return {?}\n         */\n        index => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => this.ngZone.run((/**\n         * @return {?}\n         */\n        () => observer.next(index)))))))));\n        /**\n         * A stream that emits whenever the rendered range changes.\n         */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /**\n         * A string representing the `style.width` property value to be used for the spacer element.\n         */\n        this._totalContentWidth = '';\n        /**\n         * A string representing the `style.height` property value to be used for the spacer element.\n         */\n        this._totalContentHeight = '';\n        /**\n         * The currently rendered range of indices.\n         */\n        this._renderedRange = { start: 0, end: 0 };\n        /**\n         * The length of the data bound to this viewport (in number of items).\n         */\n        this._dataLength = 0;\n        /**\n         * The size of the viewport (in pixels).\n         */\n        this._viewportSize = 0;\n        /**\n         * The last rendered content offset that was set.\n         */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /**\n         * Whether there is a pending change detection cycle.\n         */\n        this._isChangeDetectionPending = false;\n        /**\n         * A list of functions to run after the next change detection cycle.\n         */\n        this._runAfterChangeDetection = [];\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n    }\n    /**\n     * The direction the viewport scrolls.\n     * @return {?}\n     */\n    get orientation() {\n        return this._orientation;\n    }\n    /**\n     * @param {?} orientation\n     * @return {?}\n     */\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith((/** @type {?} */ (null))), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentScrolled()));\n            this._markChangeDetectionNeeded();\n        }))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        super.ngOnDestroy();\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => {\n                /** @type {?} */\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            }));\n        }));\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentRendered()));\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n        const isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n        const axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            }));\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        /** @type {?} */\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        return super.measureScrollOffset(from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    measureRenderedContentSize() {\n        /** @type {?} */\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @private\n     * @return {?}\n     */\n    _measureViewportSize() {\n        /** @type {?} */\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @private\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                this._doChangeDetection();\n            }))));\n        }\n    }\n    /**\n     * Run change detection.\n     * @private\n     * @return {?}\n     */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        /** @type {?} */\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /**\n     * Calculates the `style.width` and `style.height` for the spacer element.\n     * @private\n     * @return {?}\n     */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.decorators = [\n    { type: Component, args: [{selector: 'cdk-virtual-scroll-viewport',\n                template: \"<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\"><ng-content></ng-content></div><div class=\\\"cdk-virtual-scroll-spacer\\\" [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\",\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport,\n                    }]\n            },] },\n];\n/** @nocollapse */\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n    /** @type {?} */\n    const el = (/** @type {?} */ (node));\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    /** @type {?} */\n    const rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nclass CdkVirtualForOf {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    constructor(_viewContainerRef, _template, _differs, _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /**\n         * Emits when the rendered view of the data changes.\n         */\n        this.viewChange = new Subject();\n        /**\n         * Subject that emits when a new DataSource instance is given.\n         */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /**\n         * Emits whenever the data in the current DataSource changes.\n         */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith((/** @type {?} */ (null))), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([prev, cur]) => this._changeDataSource(prev, cur))), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /**\n         * The differ used to calculate changes to the data.\n         */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /**\n         * Whether the rendered data should be updated during the next ngDoCheck cycle.\n         */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        }));\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} range\n         * @return {?}\n         */\n        range => {\n            this._renderedRange = range;\n            ngZone.run((/**\n             * @return {?}\n             */\n            () => this.viewChange.next(this._renderedRange)));\n            this._onRenderedDataChange();\n        }));\n        this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        /** @type {?} */\n        const ds = isDataSource(value) ? value :\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n        this._dataSourceChanges.next(ds);\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (/**\n             * @param {?} index\n             * @param {?} item\n             * @return {?}\n             */\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)) :\n            undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        /** @type {?} */\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        /** @type {?} */\n        const rangeLen = range.end - range.start;\n        // Loop over all root nodes for all items in the range and sum up their size.\n        /** @type {?} */\n        let totalSize = 0;\n        /** @type {?} */\n        let i = rangeLen;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i + renderedStartIndex)));\n            /** @type {?} */\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, (/** @type {?} */ (view)).rootNodes[j]);\n            }\n        }\n        return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            /** @type {?} */\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @private\n     * @return {?}\n     */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @private\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @private\n     * @return {?}\n     */\n    _updateContext() {\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            let view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                // Item added.\n                /** @type {?} */\n                const view = this._insertViewForNewItem((/** @type {?} */ (currentIndex)));\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._cacheView(this._detachView((/** @type {?} */ (adjustedPreviousIndex))));\n            }\n            else { // Item moved.\n                // Item moved.\n                /** @type {?} */\n                const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (adjustedPreviousIndex)))));\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        }));\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (record.currentIndex)))));\n            view.context.$implicit = record.item;\n        }));\n        // Update the context variables on all items.\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /**\n     * Cache the given detached view.\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(view);\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new one.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewForNewItem(index) {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    /**\n     * Creates a new embedded view and moves it to the given index\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _createEmbeddedViewAt(index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: (/** @type {?} */ (null)),\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        }, index);\n    }\n    /**\n     * Inserts a recycled view from the cache at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewFromCache(index) {\n        /** @type {?} */\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n    /**\n     * Detaches the embedded view at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _detachView(index) {\n        return (/** @type {?} */ (this._viewContainerRef.detach(index)));\n    }\n}\nCdkVirtualForOf.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]',\n            },] },\n];\n/** @nocollapse */\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScrollingModule {\n}\nScrollingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BidiModule, PlatformModule],\n                exports: [\n                    BidiModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n            },] },\n];\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\nclass ScrollDispatchModule {\n}\nScrollDispatchModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ScrollingModule],\n                exports: [ScrollingModule],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the resize events by default.\n * @type {?}\n */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     */\n    constructor(_platform, ngZone) {\n        this._platform = _platform;\n        ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._change = _platform.isBrowser ?\n                merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                of();\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe((/**\n             * @return {?}\n             */\n            () => this._updateViewportSize()));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        /** @type {?} */\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = (/** @type {?} */ (null));\n        }\n        return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        /** @type {?} */\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        /** @type {?} */\n        const documentElement = (/** @type {?} */ (document.documentElement));\n        /** @type {?} */\n        const documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        /** @type {?} */\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @private\n     * @return {?}\n     */\n    _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ ViewportRuler.ngInjectableDef = ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: ViewportRuler, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport };\n//# sourceMappingURL=scrolling.js.map\n"],"sourceRoot":"webpack:///","file":"vendors~home-home-module-es5.js"}